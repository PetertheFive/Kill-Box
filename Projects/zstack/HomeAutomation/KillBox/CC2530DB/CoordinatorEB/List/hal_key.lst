###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Jul/2020  22:03:51
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Z-Stack Home 1.2.2a.44539\Components\hal\target\CC2530EB\hal_key.c
#    Command line       =  
#        -f C:\Users\Peter.Wu\AppData\Local\Temp\EWFF16.tmp ("C:\Z-Stack Home
#        1.2.2a.44539\Components\hal\target\CC2530EB\hal_key.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xD882
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x05, 0x69, 0x67, 0x42,
#        0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30,
#        0x39}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\" -I
#        "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\Source\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\Source\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\CoordinatorEB\List\hal_key.lst
#    Object file        =  
#        C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\KillBox\CC2530DB\CoordinatorEB\Obj\hal_key.r51
#
###############################################################################

C:\Z-Stack Home 1.2.2a.44539\Components\hal\target\CC2530EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
      4            Revision:       $Revision: 23815 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x8a
   \   unsigned char volatile __sfr P1IFG
   \                     P1IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr P2IFG
   \                     P2IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8d
   \   unsigned char volatile __sfr P1IEN
   \                     P1IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          uint8 UV_Auto_Turn_Off = 0;
   \                     UV_Auto_Turn_Off:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     93          
     94          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     95          
     96          /**************************************************************************************************
     97           *                                              MACROS
     98           **************************************************************************************************/
     99          
    100          /**************************************************************************************************
    101           *                                            CONSTANTS
    102           **************************************************************************************************/
    103          #define HAL_KEY_RISING_EDGE   0
    104          #define HAL_KEY_FALLING_EDGE  1
    105          
    106          #define HAL_KEY_DEBOUNCE_VALUE  25
    107          
    108          /* CPU port interrupt */
    109          #define HAL_KEY_CPU_PORT_0_IF P0IF
    110          #define HAL_KEY_CPU_PORT_2_IF P2IF
    111          
    112          /* Button GPIO Setting */
    113          /* SW_6 is at P1.2 */
    114          #define HAL_KEY_SW_6_PORT   P1
    115          #define HAL_KEY_SW_6_BIT    BV(2)
    116          #define HAL_KEY_SW_6_SEL    P1SEL
    117          #define HAL_KEY_SW_6_DIR    P1DIR
    118          
    119          /* edge interrupt */
    120          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    121          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    122          
    123          
    124          /* SW_6 interrupts */
    125          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    126          #define HAL_KEY_SW_6_IENBIT   BV(1) /* Mask bit for all of Port_1 */
    127          #define HAL_KEY_SW_6_ICTL     P1IEN /* Port Interrupt Control register */
    128          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P1.2 enable/disable bit */
    129          #define HAL_KEY_SW_6_PXIFG    P1IFG /* Interrupt flag at source */
    130          
    131          /* Reed Switch GPIO Setting */
    132          /* SW_5 is at P1.1 */
    133          #define HAL_KEY_SW_5_PORT   P1
    134          
    135          #define HAL_KEY_SW_5_BIT    BV(1)
    136          #define HAL_KEY_SW_5_SEL    P1SEL
    137          #define HAL_KEY_SW_5_DIR    P1DIR
    138          
    139          /* edge interrupt */
    140          #define HAL_KEY_SW_5_EDGEBIT  BV(0)
    141          #define HAL_KEY_SW_5_EDGE     HAL_KEY_FALLING_EDGE
    142          
    143          /* SW_5 interrupts */
    144          #define HAL_KEY_SW_5_IEN      IEN1  /* CPU interrupt mask register */
    145          #define HAL_KEY_SW_5_IENBIT   BV(1) /* Mask bit for all of Port_1 */
    146          #define HAL_KEY_SW_5_ICTL     P1IEN /* Port Interrupt Control register */
    147          #define HAL_KEY_SW_5_ICTLBIT  BV(1) /* P2IEN - P1.1 enable/disable bit */
    148          #define HAL_KEY_SW_5_PXIFG    P1IFG /* Interrupt flag at source */
    149          
    150          /* Unless Setting */
    151          /* Joy stick move at P2.0 */
    152          #define HAL_KEY_JOY_MOVE_PORT   P2
    153          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    154          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    155          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    156          
    157          /* edge interrupt */
    158          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    159          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
    160          
    161          /* Joy move interrupts */
    162          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    163          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    164          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    165          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    166          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    167          
    168          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    169          
    170          
    171          /**************************************************************************************************
    172           *                                            TYPEDEFS
    173           **************************************************************************************************/
    174          
    175          
    176          /**************************************************************************************************
    177           *                                        GLOBAL VARIABLES
    178           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          
    184          /**************************************************************************************************
    185           *                                        FUNCTIONS - Local
    186           **************************************************************************************************/
    187          void halProcessKeyInterrupt(void);
    188          uint8 halGetJoyKeyInput(void);
    189          
    190          
    191          
    192          /**************************************************************************************************
    193           *                                        FUNCTIONS - API
    194           **************************************************************************************************/
    195          
    196          
    197          /**************************************************************************************************
    198           * @fn      HalKeyInit
    199           *
    200           * @brief   Initilize Key Service
    201           *
    202           * @param   none
    203           *
    204           * @return  None
    205           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          void HalKeyInit( void )
   \                     HalKeyInit:
    207          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    208            /* Initialize previous key to 0 */
    209            halKeySavedKeys = 0;
   \   000004   90....       MOV       DPTR,#halKeySavedKeys
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
    210          
    211            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
   \   000009   53F4FB       ANL       0xf4,#0xfb
    212            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
   \   00000C   53FEFB       ANL       0xfe,#0xfb
    213          
    214          //  HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
    215          //  HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
    216            
    217            HAL_KEY_SW_5_SEL &= ~(HAL_KEY_SW_5_BIT);    /* Set pin function to GPIO */
   \   00000F   53F4FD       ANL       0xf4,#0xfd
    218            HAL_KEY_SW_5_DIR &= ~(HAL_KEY_SW_5_BIT);    /* Set pin direction to Input */
   \   000012   53FEFD       ANL       0xfe,#0xfd
    219          
    220          
    221            /* Initialize callback function */
    222            pHalKeyProcessFunction  = NULL;
   \   000015   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    223          
    224            /* Start with key is not configured */
    225            HalKeyConfigured = FALSE;
   \   00001B   90....       MOV       DPTR,#HalKeyConfigured
   \   00001E   F0           MOVX      @DPTR,A
    226          }
   \   00001F   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000022                REQUIRE P1SEL
   \   000022                REQUIRE P1DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    227          
    228          
    229          /**************************************************************************************************
    230           * @fn      HalKeyConfig
    231           *
    232           * @brief   Configure the Key serivce
    233           *
    234           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    235           *          cback - pointer to the CallBack function
    236           *
    237           * @return  None
    238           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    239          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    240          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    241            /* Enable/Disable Interrupt or */
    242            Hal_KeyIntEnable = interruptEnable;
   \   000006   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000009   F0           MOVX      @DPTR,A
    243          
    244            /* Register the callback fucntion */
    245            pHalKeyProcessFunction = cback;
   \   00000A   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   00000D   EA           MOV       A,R2
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   EB           MOV       A,R3
   \   000011   F0           MOVX      @DPTR,A
    246          
    247            /* Determine if interrupt is enable or not */
    248            if (Hal_KeyIntEnable)
   \   000012   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6032         JZ        ??HalKeyConfig_0
    249            {
    250              /* Rising/Falling edge configuratinn */
    251          
    252              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
   \   000018   538CFE       ANL       0x8c,#0xfe
    253              /* For falling edge, the bit must be set. */
    254            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    255              PICTL |= HAL_KEY_SW_6_EDGEBIT;
   \   00001B   438C01       ORL       0x8c,#0x1
    256            #endif
    257              
    258              PICTL &= ~(HAL_KEY_SW_5_EDGEBIT);    /* Clear the edge bit */
   \   00001E   538CFE       ANL       0x8c,#0xfe
    259              /* For falling edge, the bit must be set. */
    260            #if (HAL_KEY_SW_5_EDGE == HAL_KEY_FALLING_EDGE)
    261              PICTL |= HAL_KEY_SW_5_EDGEBIT;
   \   000021   438C01       ORL       0x8c,#0x1
    262            #endif
    263          
    264          
    265              /* Interrupt configuration:
    266               * - Enable interrupt generation at the port
    267               * - Enable CPU interrupt
    268               * - Clear any pending interrupt
    269               */
    270              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   000024   438D02       ORL       0x8d,#0x2
    271              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   000027   D2B9         SETB      0xb8.1
    272              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
   \   000029   758AFB       MOV       0x8a,#-0x5
    273          
    274              HAL_KEY_SW_5_ICTL |= HAL_KEY_SW_5_ICTLBIT;
   \   00002C   438D02       ORL       0x8d,#0x2
    275              HAL_KEY_SW_5_IEN |= HAL_KEY_SW_5_IENBIT;
   \   00002F   D2B9         SETB      0xb8.1
    276              HAL_KEY_SW_5_PXIFG = ~(HAL_KEY_SW_5_BIT);
   \   000031   758AFD       MOV       0x8a,#-0x3
    277          
    278          
    279              /* Rising/Falling edge configuratinn */
    280          
    281          //    HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
    282          //    /* For falling edge, the bit must be set. */
    283          //  #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    284          //    HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
    285          //  #endif
    286          
    287          
    288          //    /* Interrupt configuration:
    289          //     * - Enable interrupt generation at the port
    290          //     * - Enable CPU interrupt
    291          //     * - Clear any pending interrupt
    292          //     */
    293          //    HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
    294          //    HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
    295          //    HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
    296          
    297          
    298              /* Do this only after the hal_key is configured - to work with sleep stuff */
    299              if (HalKeyConfigured == TRUE)
   \   000034   90....       MOV       DPTR,#HalKeyConfigured
   \   000037   E0           MOVX      A,@DPTR
   \   000038   6401         XRL       A,#0x1
   \   00003A   7024         JNZ       ??HalKeyConfig_1
    300              {
    301                osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   00003C                ; Setup parameters for call to function osal_stop_timerEx
   \   00003C   7A10         MOV       R2,#0x10
   \   00003E   7B00         MOV       R3,#0x0
   \   000040   90....       MOV       DPTR,#Hal_TaskID
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F9           MOV       R1,A
   \   000045   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000048   8016         SJMP      ??HalKeyConfig_1
    302              }
    303            }
    304            else    /* Interrupts NOT enabled */
    305            {
    306              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   00004A   538DFD       ANL       0x8d,#0xfd
    307              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
   \   00004D   C2B9         CLR       0xb8.1
    308          
    309              HAL_KEY_SW_5_ICTL &= ~(HAL_KEY_SW_5_ICTLBIT); /* don't generate interrupt */
   \   00004F   538DFD       ANL       0x8d,#0xfd
    310              HAL_KEY_SW_5_IEN &= ~(HAL_KEY_SW_5_IENBIT);   /* Clear interrupt enable bit */  
   \   000052   C2B9         CLR       0xb8.1
    311              
    312              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
   \   000054                ; Setup parameters for call to function osal_set_event
   \   000054   7A10         MOV       R2,#0x10
   \   000056   7B00         MOV       R3,#0x0
   \   000058   90....       MOV       DPTR,#Hal_TaskID
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    313            }
    314          
    315            /* Key now is configured */
    316            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   000060   90....       MOV       DPTR,#HalKeyConfigured
   \   000063   7401         MOV       A,#0x1
   \   000065   F0           MOVX      @DPTR,A
    317          }
   \   000066   FF           MOV       R7,A
   \   000067   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00006A                REQUIRE PICTL
   \   00006A                REQUIRE P1IEN
   \   00006A                REQUIRE _A_IEN1
   \   00006A                REQUIRE P1IFG
    318          
    319          
    320          /**************************************************************************************************
    321           * @fn      HalKeyRead
    322           *
    323           * @brief   Read the current value of a key
    324           *
    325           * @param   None
    326           *
    327           * @return  keys - current keys status
    328           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    329          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    330          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    331            
    332            uint8 keys = 0;
   \   000000   7900         MOV       R1,#0x0
    333          
    334            if (HAL_PUSH_BUTTON1())
   \   000002   A292         MOV       C,0x90.2
   \   000004   4002         JC        ??HalKeyRead_0
    335            {
    336              keys |= HAL_KEY_SW_6;
   \   000006   7920         MOV       R1,#0x20
    337            }
    338            
    339            if (HAL_PUSH_BUTTON1())
   \                     ??HalKeyRead_0:
   \   000008   A292         MOV       C,0x90.2
   \   00000A   4004         JC        ??HalKeyRead_1
    340            {
    341              keys |= HAL_KEY_SW_5;
   \   00000C   E9           MOV       A,R1
   \   00000D   D2E2         SETB      0xE0 /* A   */.2
   \   00000F   F9           MOV       R1,A
    342            }
    343          
    344          //  if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
    345          //  {
    346          //    keys |= halGetJoyKeyInput();
    347          //  }
    348          
    349            return keys;
   \                     ??HalKeyRead_1:
   \   000010   02....       LJMP      ?BRET
   \   000013                REQUIRE _A_P1
    350          }
    351          
    352          
    353          /**************************************************************************************************
    354           * @fn      HalKeyPoll
    355           *
    356           * @brief   Called by hal_driver to poll the keys
    357           *
    358           * @param   None
    359           *
    360           * @return  None
    361           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    362          void HalKeyPoll (void)
   \                     HalKeyPoll:
    363          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    364            uint8 keys = 0;
   \   000004   7900         MOV       R1,#0x0
    365          
    366          //  if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
    367          //  {
    368          //    keys = halGetJoyKeyInput();
    369          //  }
    370             
    371            if (HAL_PUSH_BUTTON1())
   \   000006   A292         MOV       C,0x90.2
   \   000008   4002         JC        ??HalKeyPoll_0
    372            {
    373              keys |= HAL_KEY_SW_6;
   \   00000A   7920         MOV       R1,#0x20
    374            }
    375          
    376            if (HAL_PUSH_BUTTON2())
   \                     ??HalKeyPoll_0:
   \   00000C   A291         MOV       C,0x90.1
   \   00000E   5004         JNC       ??HalKeyPoll_1
    377            {
    378              keys |= HAL_KEY_SW_5;
   \   000010   E9           MOV       A,R1
   \   000011   D2E2         SETB      0xE0 /* A   */.2
   \   000013   F9           MOV       R1,A
    379            }  
    380            
    381            if ((!HAL_PUSH_BUTTON2())&&(!UV_Auto_Turn_Off))
   \                     ??HalKeyPoll_1:
   \   000014   A291         MOV       C,0x90.1
   \   000016   400A         JC        ??HalKeyPoll_2
   \   000018   90....       MOV       DPTR,#UV_Auto_Turn_Off
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   7004         JNZ       ??HalKeyPoll_2
    382            {
    383              keys |= HAL_KEY_SW_3;
   \   00001E   E9           MOV       A,R1
   \   00001F   D2E4         SETB      0xE0 /* A   */.4
   \   000021   F9           MOV       R1,A
    384            }  
    385            
    386            /* If interrupts are not enabled, previous key status and current key status
    387             * are compared to find out if a key has changed status.
    388             */
    389            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_2:
   \   000022   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000025   E0           MOVX      A,@DPTR
   \   000026   7009         JNZ       ??HalKeyPoll_3
    390            {
    391              if (keys == halKeySavedKeys)
   \   000028   90....       MOV       DPTR,#halKeySavedKeys
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   69           XRL       A,R1
   \   00002D   6021         JZ        ??HalKeyPoll_4
    392              {
    393                /* Exit - since no keys have changed */
    394                return;
    395              }
    396              /* Store the current keys for comparation next time */
    397              halKeySavedKeys = keys;
   \   00002F   E9           MOV       A,R1
   \   000030   F0           MOVX      @DPTR,A
    398            }
    399            else
    400            {
    401              /* Key interrupt handled here */
    402            }
    403          
    404          
    405            
    406            /* Invoke Callback if new keys were depressed */
    407            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_3:
   \   000031   E9           MOV       A,R1
   \   000032   601C         JZ        ??HalKeyPoll_4
   \   000034   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FA           MOV       R2,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FB           MOV       R3,A
   \   00003C   EA           MOV       A,R2
   \   00003D   4B           ORL       A,R3
   \   00003E   6010         JZ        ??HalKeyPoll_4
    408            {
    409              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   000040                ; Setup parameters for indirect call
   \   000040   7A00         MOV       R2,#0x0
   \   000042   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F583         MOV       DPH,A
   \   00004B   8882         MOV       DPL,R0
   \   00004D   12....       LCALL     ?CALL_IND
    410            }
    411          }
   \                     ??HalKeyPoll_4:
   \   000050   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000053                REQUIRE _A_P1
    412          
    413          /**************************************************************************************************
    414           * @fn      halGetJoyKeyInput
    415           *
    416           * @brief   Map the ADC value to its corresponding key.
    417           *
    418           * @param   None
    419           *
    420           * @return  keys - current joy key status
    421           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    422          uint8 halGetJoyKeyInput(void)
   \                     halGetJoyKeyInput:
    423          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    424            /* The joystick control is encoded as an analog voltage.
    425             * Read the JOY_LEVEL analog value and map it to joy movement.
    426             */
    427            uint8 adc;
    428            uint8 ksave0 = 0;
   \   000005   7E00         MOV       R6,#0x0
    429            uint8 ksave1;
    430          
    431            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    432            do
    433            {
    434              ksave1 = ksave0;    /* save previouse key reading */
   \                     ??halGetJoyKeyInput_0:
   \   000007   EE           MOV       A,R6
   \   000008   FF           MOV       R7,A
    435          
    436              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
   \   000009                ; Setup parameters for call to function HalAdcRead
   \   000009   7A01         MOV       R2,#0x1
   \   00000B   7906         MOV       R1,#0x6
   \   00000D   12....       LCALL     `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   000010   EA           MOV       A,R2
   \   000011   F8           MOV       R0,A
    437          
    438              if ((adc >= 2) && (adc <= 38))
   \   000012   74FE         MOV       A,#-0x2
   \   000014   2A           ADD       A,R2
   \   000015   C3           CLR       C
   \   000016   9425         SUBB      A,#0x25
   \   000018   5005         JNC       ??halGetJoyKeyInput_1
    439              {
    440                 ksave0 |= HAL_KEY_UP;
   \   00001A   EE           MOV       A,R6
   \   00001B   D2E0         SETB      0xE0 /* A   */.0
   \   00001D   8032         SJMP      ??halGetJoyKeyInput_2
    441              }
    442              else if ((adc >= 74) && (adc <= 88))
   \                     ??halGetJoyKeyInput_1:
   \   00001F   74B6         MOV       A,#-0x4a
   \   000021   2A           ADD       A,R2
   \   000022   C3           CLR       C
   \   000023   940F         SUBB      A,#0xf
   \   000025   5005         JNC       ??halGetJoyKeyInput_3
    443              {
    444                ksave0 |= HAL_KEY_RIGHT;
   \   000027   EE           MOV       A,R6
   \   000028   D2E1         SETB      0xE0 /* A   */.1
   \   00002A   8025         SJMP      ??halGetJoyKeyInput_2
    445              }
    446              else if ((adc >= 60) && (adc <= 73))
   \                     ??halGetJoyKeyInput_3:
   \   00002C   74C4         MOV       A,#-0x3c
   \   00002E   2A           ADD       A,R2
   \   00002F   C3           CLR       C
   \   000030   940E         SUBB      A,#0xe
   \   000032   5005         JNC       ??halGetJoyKeyInput_4
    447              {
    448                ksave0 |= HAL_KEY_LEFT;
   \   000034   EE           MOV       A,R6
   \   000035   D2E3         SETB      0xE0 /* A   */.3
   \   000037   8018         SJMP      ??halGetJoyKeyInput_2
    449              }
    450              else if ((adc >= 39) && (adc <= 59))
   \                     ??halGetJoyKeyInput_4:
   \   000039   74D9         MOV       A,#-0x27
   \   00003B   2A           ADD       A,R2
   \   00003C   C3           CLR       C
   \   00003D   9415         SUBB      A,#0x15
   \   00003F   5005         JNC       ??halGetJoyKeyInput_5
    451              {
    452                ksave0 |= HAL_KEY_DOWN;
   \   000041   EE           MOV       A,R6
   \   000042   D2E4         SETB      0xE0 /* A   */.4
   \   000044   800B         SJMP      ??halGetJoyKeyInput_2
    453              }
    454              else if ((adc >= 89) && (adc <= 100))
   \                     ??halGetJoyKeyInput_5:
   \   000046   74A7         MOV       A,#-0x59
   \   000048   2A           ADD       A,R2
   \   000049   C3           CLR       C
   \   00004A   940C         SUBB      A,#0xc
   \   00004C   5004         JNC       ??halGetJoyKeyInput_6
    455              {
    456                ksave0 |= HAL_KEY_CENTER;
   \   00004E   EE           MOV       A,R6
   \   00004F   D2E2         SETB      0xE0 /* A   */.2
   \                     ??halGetJoyKeyInput_2:
   \   000051   FE           MOV       R6,A
    457              }
    458            } while (ksave0 != ksave1);
   \                     ??halGetJoyKeyInput_6:
   \   000052   EF           MOV       A,R7
   \   000053   6E           XRL       A,R6
   \   000054   70B1         JNZ       ??halGetJoyKeyInput_0
    459          
    460            return ksave0;
   \   000056   EE           MOV       A,R6
   \   000057   F9           MOV       R1,A
   \   000058   7F01         MOV       R7,#0x1
   \   00005A   02....       LJMP      ?BANKED_LEAVE_XDATA
    461          }
    462          
    463          
    464          
    465          
    466          
    467          /**************************************************************************************************
    468           * @fn      halProcessKeyInterrupt
    469           *
    470           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    471           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    472           *
    473           * @param
    474           *
    475           * @return
    476           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    478          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    479            bool valid=FALSE;
   \   000004   7800         MOV       R0,#0x0
    480          
    481            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000006   E58A         MOV       A,0x8a
   \   000008   A2E2         MOV       C,0xE0 /* A   */.2
   \   00000A   5005         JNC       ??halProcessKeyInterrupt_0
    482            {
    483              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000C   758AFB       MOV       0x8a,#-0x5
    484              valid = TRUE;
   \   00000F   7801         MOV       R0,#0x1
    485            }
    486          
    487            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_0:
   \   000011   E58B         MOV       A,0x8b
   \   000013   A2E0         MOV       C,0xE0 /* A   */.0
   \   000015   5005         JNC       ??halProcessKeyInterrupt_1
    488            {
    489              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
   \   000017   758BFE       MOV       0x8b,#-0x2
    490              valid = TRUE;
   \   00001A   8005         SJMP      ??halProcessKeyInterrupt_2
    491            }
    492          
    493            if (valid)
   \                     ??halProcessKeyInterrupt_1:
   \   00001C   E8           MOV       A,R0
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   5017         JNC       ??halProcessKeyInterrupt_3
    494            {
    495              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \                     ??halProcessKeyInterrupt_2:
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   90....       MOV       DPTR,#__Constant_19
   \   000024   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000027   7A10         MOV       R2,#0x10
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   90....       MOV       DPTR,#Hal_TaskID
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000033   7404         MOV       A,#0x4
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
    496            }
    497          }
   \                     ??halProcessKeyInterrupt_3:
   \   000038                REQUIRE ?Subroutine0
   \   000038                REQUIRE P1IFG
   \   000038                REQUIRE P2IFG
   \   000038                ; // Fall through to label ?Subroutine0
    498          
    499          /**************************************************************************************************
    500           * @fn      HalKeyEnterSleep
    501           *
    502           * @brief  - Get called to enter sleep mode
    503           *
    504           * @param
    505           *
    506           * @return
    507           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    508          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    509          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    510          }
   \   000000   02....       LJMP      ?BRET
    511          
    512          /**************************************************************************************************
    513           * @fn      HalKeyExitSleep
    514           *
    515           * @brief   - Get called when sleep is over
    516           *
    517           * @param
    518           *
    519           * @return  - return saved keys
    520           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    522          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    523            /* Wake up and read keys */
    524            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   80..         SJMP      ?Subroutine0
    525          }
    526          
    527          /***************************************************************************************************
    528           *                                    INTERRUPT SERVICE ROUTINE
    529           ***************************************************************************************************/
    530          
    531          /**************************************************************************************************
    532           * @fn      halKeyPort0Isr
    533           *
    534           * @brief   Port0 ISR
    535           *
    536           * @param
    537           *
    538           * @return
    539           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    540          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    541          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    542            HAL_ENTER_ISR();
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   FE           MOV       R6,A
   \   00000C   D2AF         SETB      0xa8.7
    543          
    544            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   00000E   E58A         MOV       A,0x8a
   \   000010   A2E2         MOV       C,0xE0 /* A   */.2
   \   000012   5003         JNC       ??halKeyPort0Isr_0
    545            {
    546              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    547            }
    548          
    549            /*
    550              Clear the CPU interrupt flag for Port_0
    551              PxIFG has to be cleared before PxIF
    552            */
    553            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_0:
   \   000017   758A00       MOV       0x8a,#0x0
    554            HAL_KEY_CPU_PORT_0_IF = 0;
   \   00001A   C2C5         CLR       0xc0.5
    555            
    556            CLEAR_SLEEP_MODE();
    557            HAL_EXIT_ISR();
   \   00001C                REQUIRE ?Subroutine1
   \   00001C                REQUIRE _A_IEN0
   \   00001C                REQUIRE P1IFG
   \   00001C                REQUIRE _A_IRCON
   \   00001C                ; // Fall through to label ?Subroutine1
    558          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV       A,R6
   \   000001   A2E0         MOV       C,0xE0 /* A   */.0
   \   000003   92AF         MOV       0xa8.7,C
   \   000005   7F01         MOV       R7,#0x1
   \   000007   02....       LJMP      ?INTERRUPT_LEAVE_XSP
    559          
    560          
    561          /**************************************************************************************************
    562           * @fn      halKeyPort2Isr
    563           *
    564           * @brief   Port2 ISR
    565           *
    566           * @param
    567           *
    568           * @return
    569           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    570          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    571          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    572            HAL_ENTER_ISR();
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   FE           MOV       R6,A
   \   00000C   D2AF         SETB      0xa8.7
    573            
    574            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
   \   00000E   E58B         MOV       A,0x8b
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5003         JNC       ??halKeyPort2Isr_0
    575            {
    576              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    577            }
    578          
    579            /*
    580              Clear the CPU interrupt flag for Port_2
    581              PxIFG has to be cleared before PxIF
    582              Notes: P2_1 and P2_2 are debug lines.
    583            */
    584            HAL_KEY_JOY_MOVE_PXIFG = 0;
   \                     ??halKeyPort2Isr_0:
   \   000017   758B00       MOV       0x8b,#0x0
    585            HAL_KEY_CPU_PORT_2_IF = 0;
   \   00001A   C2E8         CLR       0xe8.0
    586          
    587            CLEAR_SLEEP_MODE();
    588            HAL_EXIT_ISR();
   \   00001C   80..         SJMP      ?Subroutine1
   \   00001E                REQUIRE _A_IEN0
   \   00001E                REQUIRE P2IFG
   \   00001E                REQUIRE _A_IRCON2
    589          }

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr::??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr::??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_19:
   \   000000   19000000     DD 25
    590          
    591          #else
    592          
    593          
    594          void HalKeyInit(void){}
    595          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    596          uint8 HalKeyRead(void){ return 0;}
    597          void HalKeyPoll(void){}
    598          
    599          #endif /* HAL_KEY */
    600          
    601          
    602          /**************************************************************************************************
    603          **************************************************************************************************/
    604          
    605          
    606          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   HalKeyConfig
        0      9   -> osal_set_event
        0      9   -> osal_stop_timerEx
      0      0   HalKeyEnterSleep
      2      0   HalKeyExitSleep
        2      0   -> HalKeyRead
      2      0   HalKeyInit
      2      0   HalKeyPoll
      0      0   HalKeyRead
      0      9   halGetJoyKeyInput
        0      9   -> HalAdcRead
      0     14   halKeyPort0Isr
        0     14   -> halProcessKeyInterrupt
      0     14   halKeyPort2Isr
        0     14   -> halProcessKeyInterrupt
      2     18   halProcessKeyInterrupt
        2      4   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
      10  ?Subroutine1
     106  HalKeyConfig
       1  HalKeyConfigured
       3  HalKeyEnterSleep
       9  HalKeyExitSleep
      34  HalKeyInit
      83  HalKeyPoll
      19  HalKeyRead
       1  Hal_KeyIntEnable
       1  P1DIR
       1  P1IEN
       1  P1IFG
       1  P1SEL
       1  P2IFG
       1  PICTL
       1  UV_Auto_Turn_Off
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       1  _A_IRCON2
       1  _A_P1
       4  __Constant_19
      93  halGetJoyKeyInput
      28  halKeyPort0Isr
       3  halKeyPort0Isr::??INTVEC 107
      30  halKeyPort2Isr
       3  halKeyPort2Isr::??INTVEC 51
       1  halKeySavedKeys
      56  halProcessKeyInterrupt
       2  pHalKeyProcessFunction
      48  -- Other

 
 410 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  68 bytes in segment NEAR_CODE
  11 bytes in segment SFR_AN
   4 bytes in segment XDATA_ROM_C
   6 bytes in segment XDATA_Z
 
 116 bytes of CODE     memory (+  6 bytes shared)
   0 bytes of CONST    memory (+  4 bytes shared)
   0 bytes of DATA     memory (+ 11 bytes shared)
 410 bytes of HUGECODE memory
   6 bytes of XDATA    memory

Errors: none
Warnings: none
