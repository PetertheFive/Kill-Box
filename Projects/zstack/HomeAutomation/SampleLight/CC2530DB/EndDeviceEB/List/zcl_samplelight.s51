///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              17/Jul/2020  11:36:29
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f C:\Users\Peter.Wu\AppData\Local\Temp\EW24CB.tmp ("C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        xPOWER_SAVING -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC
//        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D MULTICAST_ENABLED=FALSE -D ZCL_READ
//        -D ZCL_WRITE -D ZCL_REPORT -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
//        FEATURE_SYSTEM_STATS -lC "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xD882
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x05, 0x69, 0x67, 0x42,
//        0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30,
//        0x39}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        C:\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_LcdDisplayUpdate::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessIdentifyTimeChange::?re`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK _A_P1
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_ea60
        PUBLIC bindingInClusters
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zclSampleLight_DstAddr
        FUNCTION zclSampleLight_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC zclSampleLight_NwkState
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclSampleLight_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 24>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 24>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UV_Auto_Turn_Off
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "zcl.h"
//   77 #include "zcl_general.h"
//   78 #include "zcl_ha.h"
//   79 #include "zcl_ezmode.h"
//   80 #include "zcl_diagnostic.h"
//   81 
//   82 #include "zcl_samplelight.h"
//   83 
//   84 #include "onboard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   85 
//   86 /* HAL */
//   87 #include "hal_lcd.h"
//   88 #include "hal_led.h"
//   89 #include "hal_key.h"
//   90 
//   91 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   92       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   93 #include "zgp_translationtable.h"
//   94   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   95     #define ZGP_AUTO_TT
//   96   #endif
//   97 #endif
//   98 
//   99 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  100 #include "math.h"
//  101 #include "hal_timer.h"
//  102 #endif
//  103 
//  104 #include "NLMEDE.h"
//  105 
//  106 /*********************************************************************
//  107  * MACROS
//  108  */
//  109 
//  110 /*********************************************************************
//  111  * CONSTANTS
//  112  */
//  113 #if (defined HAL_BOARD_ZLIGHT)
//  114 #define LEVEL_MAX                 0xFE
//  115 #define LEVEL_MIN                 0x0
//  116 #define GAMMA_VALUE               2
//  117 #define PWM_FULL_DUTY_CYCLE       1000
//  118 #elif (defined HAL_PWM)
//  119 #define LEVEL_MAX                 0xFE
//  120 #define LEVEL_MIN                 0x0
//  121 #define GAMMA_VALUE               2
//  122 #define PWM_FULL_DUTY_CYCLE       100
//  123 #endif
//  124 
//  125 /*********************************************************************
//  126  * TYPEDEFS
//  127  */
//  128 
//  129 /*********************************************************************
//  130  * GLOBAL VARIABLES
//  131  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134 
//  135 
//  136 /*********************************************************************
//  137  * GLOBAL FUNCTIONS
//  138  */
//  139 
//  140 /*********************************************************************
//  141  * LOCAL VARIABLES
//  142  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 
//  146 
//  147 #ifdef ZCL_EZMODE
//  148 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  149 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  150 
//  151 
//  152 // register EZ-Mode with task information (timeout events, callback, etc...)
//  153 static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
//  154 {
//  155   &zclSampleLight_TaskID,
//  156   SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  157   SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  158   &zclSampleLightSeqNum,
//  159   zclSampleLight_EZModeCB
//  160 };
//  161 
//  162 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  163 uint16 bindingInClusters[] =
bindingInClusters:
        DATA16
        DS 2
        REQUIRE `?<Initializer for bindingInClusters>`
        REQUIRE __INIT_XDATA_I
//  164 {
//  165   ZCL_CLUSTER_ID_GEN_ON_OFF
//  166 #ifdef ZCL_LEVEL_CTRL
//  167   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  168 #endif
//  169 };
//  170 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  171 
//  172 #endif  // ZCL_EZMODE
//  173 
//  174 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  175 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  176 {
//  177   SAMPLELIGHT_ENDPOINT,
//  178   &zclSampleLight_TaskID,
//  179   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  180   (afNetworkLatencyReq_t)0            // No Network Latency req
//  181 };
//  182 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  183 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  184 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  185 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  186 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  187 devStates_t zclSampleLight_NwkState = DEV_INIT;
zclSampleLight_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleLight_NwkState>`
        REQUIRE __INIT_XDATA_I
//  188 
//  189 #if ZCL_LEVEL_CTRL
//  190 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  191 uint8 zclSampleLight_NewLevel;        // new level when done moving
//  192 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  193 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  194 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  195 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  196 #endif
//  197 
//  198 /*********************************************************************
//  199  * LOCAL FUNCTIONS
//  200  */
//  201 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  202 static void zclSampleLight_BasicResetCB( void );
//  203 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
//  204 static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  205 static void zclSampleLight_OnOffCB( uint8 cmd );
//  206 static void zclSampleLight_ProcessIdentifyTimeChange( void );
//  207 #ifdef ZCL_LEVEL_CTRL
//  208 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  209 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  210 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  211 static void zclSampleLight_LevelControlStopCB( void );
//  212 static void zclSampleLight_DefaultMove( void );
//  213 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  214 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  215 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  216 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  217 static void zclSampleLight_AdjustLightLevel( void );
//  218 #endif
//  219 
//  220 // app display functions
//  221 static void zclSampleLight_LcdDisplayUpdate( void );
//  222 #ifdef LCD_SUPPORTED
//  223 static void zclSampleLight_LcdDisplayMainMode( void );
//  224 static void zclSampleLight_LcdDisplayHelpMode( void );
//  225 #endif
//  226 static void zclSampleLight_DisplayLight( void );
//  227 
//  228 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  229 void zclSampleLight_UpdateLampLevel( uint8 level );
//  230 #endif
//  231 
//  232 // Functions to process ZCL Foundation incoming Command/Response messages
//  233 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  234 #ifdef ZCL_READ
//  235 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  236 #endif
//  237 #ifdef ZCL_WRITE
//  238 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  239 #endif
//  240 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  241 #ifdef ZCL_DISCOVER
//  242 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  243 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  244 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  245 #endif
//  246 
//  247 /*********************************************************************
//  248  * STATUS STRINGS
//  249  */
//  250 #ifdef LCD_SUPPORTED
//  251 const char sDeviceName[]   = "  Sample Light";
//  252 const char sClearLine[]    = " ";
//  253 const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
//  254 const char sSwEZMode[]     = "SW2: EZ-Mode";
//  255 char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
//  256 const char sLightOn[]      = "    LIGHT ON ";
//  257 const char sLightOff[]     = "    LIGHT OFF";
//  258  #if ZCL_LEVEL_CTRL
//  259  char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
//  260  #endif
//  261 #endif
//  262 
//  263 /*********************************************************************
//  264  * ZCL General Profile Callback table
//  265  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  266 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 28
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  267 {
//  268   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  269   zclSampleLight_IdentifyCB,              // Identify command
//  270 #ifdef ZCL_EZMODE
//  271   NULL,                                   // Identify EZ-Mode Invoke command
//  272   NULL,                                   // Identify Update Commission State command
//  273 #endif
//  274   NULL,                                   // Identify Trigger Effect command
//  275   zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
//  276   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  277   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  278   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  279   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  280 #ifdef ZCL_LEVEL_CTRL
//  281   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  282   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  283   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  284   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  285 #endif
//  286 #ifdef ZCL_GROUPS
//  287   NULL,                                   // Group Response commands
//  288 #endif
//  289 #ifdef ZCL_SCENES
//  290   NULL,                                  // Scene Store Request command
//  291   NULL,                                  // Scene Recall Request command
//  292   NULL,                                  // Scene Response command
//  293 #endif
//  294 #ifdef ZCL_ALARMS
//  295   NULL,                                  // Alarm (Response) commands
//  296 #endif
//  297 #ifdef SE_UK_EXT
//  298   NULL,                                  // Get Event Log command
//  299   NULL,                                  // Publish Event Log command
//  300 #endif
//  301   NULL,                                  // RSSI Location command
//  302   NULL                                   // RSSI Location Response command
//  303 };
//  304 
//  305 /*********************************************************************
//  306  * @fn          zclSampleLight_Init
//  307  *
//  308  * @brief       Initialization function for the zclGeneral layer.
//  309  *
//  310  * @param       none
//  311  *
//  312  * @return      none
//  313  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  314 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  315 {
        FUNCALL zclSampleLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  316   zclSampleLight_TaskID = task_id;
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      @DPTR,A
//  317 
//  318   // Set destination address to indirect
//  319   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV       DPTR,#zclSampleLight_DstAddr + 8
        CLR       A
        MOVX      @DPTR,A
//  320   zclSampleLight_DstAddr.endPoint = 0;
        INC       DPTR
        MOVX      @DPTR,A
//  321   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV       DPTR,#zclSampleLight_DstAddr
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  322 
//  323   // This app is part of the Home Automation Profile
//  324   zclHA_Init( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV       R2,#zclSampleLight_SimpleDesc & 0xff
        MOV       R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL     `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  325 
//  326   // Register the ZCL General Cluster Library callback functions
//  327   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  328 
//  329   // Register the application's attribute list
//  330   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclSampleLight_Attrs & 0xff
        MOV       R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV       DPTR,#zclSampleLight_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  331 
//  332   // Register the Application to receive the unprocessed Foundation command/response messages
//  333   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  334 
//  335 #ifdef ZCL_DISCOVER
//  336   // Register the application's command list
//  337   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
//  338 #endif
//  339 
//  340   // Register for all key events - This app will handle all key events
//  341   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  342 
//  343   // Register for a test endpoint
//  344   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV       R2,#sampleLight_TestEp & 0xff
        MOV       R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  345 
//  346 #ifdef ZCL_EZMODE
//  347   // Register EZ-Mode
//  348   zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
//  349 
//  350   // Register with the ZDO to receive Match Descriptor Responses
//  351   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
//  352 #endif
//  353 
//  354 
//  355 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  356   HalTimer1Init( 0 );
//  357   halTimer1SetChannelDuty( WHITE_LED, 0 );
//  358   halTimer1SetChannelDuty( RED_LED, 0 );
//  359   halTimer1SetChannelDuty( BLUE_LED, 0 );
//  360   halTimer1SetChannelDuty( GREEN_LED, 0 );
//  361 
//  362   // find if we are already on a network from NV_RESTORE
//  363   uint8 state;
//  364   NLME_GetRequest( nwkNwkState, 0, &state );
//  365 
//  366   if ( state < NWK_ENDDEVICE )
//  367   {
//  368     // Start EZMode on Start up to avoid button press
//  369     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
//  370   }
//  371 #if ZCL_LEVEL_CTRL
//  372   zclSampleLight_DefaultMove();
//  373 #endif
//  374 #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  375 
//  376 #ifdef ZCL_DIAGNOSTIC
//  377   // Register the application's callback function to read/write attribute data.
//  378   // This is only required when the attribute data format is unknown to ZCL.
//  379   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV       R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  380 
//  381   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL     `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  382   {
//  383     // Here the user could start the timer to save Diagnostics to NV
//  384   }
//  385 #endif
//  386 
//  387 #ifdef LCD_SUPPORTED
//  388   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  389 #endif  // LCD_SUPPORTED
//  390 
//  391 #ifdef ZGP_AUTO_TT
//  392   zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
//  393 #endif
//  394   
//  395   // Initialize the UV control
//  396   P0SEL &= ~(BV(4));    /* Set pin function to GPIO */
        ANL       0xf3,#0xef
//  397   P0DIR |= BV(4);       /* Set pin direction to Output */
        ORL       0xfd,#0x10
//  398   
//  399   // Automatically turn on the UV
//  400   zclSampleLight_OnOff = LIGHT_ON; 
        MOV       DPTR,#zclSampleLight_OnOff
        MOV       A,#0x1
        MOVX      @DPTR,A
//  401   zclSampleLight_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL     `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  402 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE P0DIR
//  403 
//  404 /*********************************************************************
//  405  * @fn          zclSample_event_loop
//  406  *
//  407  * @brief       Event Loop Processor for zclGeneral.
//  408  *
//  409  * @param       none
//  410  *
//  411  * @return      none
//  412  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  413 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  414 {
        FUNCALL zclSampleLight_event_loop, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  415   afIncomingMSGPacket_t *MSGpkt;
//  416 
//  417   (void)task_id;  // Intentionally unreferenced parameter
//  418 
//  419   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclSampleLight_event_loop_0
//  420   {
//  421     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  422     {
//  423       switch ( MSGpkt->hdr.event )
//  424       {
//  425 #ifdef ZCL_EZMODE
//  426         case ZDO_CB_MSG:
//  427           zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  428           break;
//  429 #endif
//  430         case ZCL_INCOMING_MSG:
//  431           // Incoming ZCL Foundation command/response messages
//  432           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  433           break;
//  434 
//  435         case KEY_CHANGE:
//  436           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  437           break;
//  438 
//  439         case ZDO_STATE_CHANGE:
//  440           zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  441 
//  442           // now on the network
//  443           if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  444                (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  445                (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  446           {
//  447             giLightScreenMode = LIGHT_MAINMODE;
//  448             zclSampleLight_LcdDisplayUpdate();
//  449 #ifdef ZCL_EZMODE
//  450             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  451 #endif // ZCL_EZMODE
//  452           }
//  453           break;
//  454 
//  455         default:
//  456           break;
//  457       }
//  458 
//  459       // Release the memory
//  460       osal_msg_deallocate( (uint8 *)MSGpkt );
//  461     }
//  462 
//  463     // return unprocessed events
//  464     return (events ^ SYS_EVENT_MSG);
//  465   }
//  466 
//  467   /* Turn off the UV automatically */
//  468   if ( events & SAMPLELIGHT_TURNOFF_UV_EVT )
        MOV       A,R2
        ANL       A,#0x80
        JNZ       $+5
        LJMP      ??zclSampleLight_event_loop_1 & 0xFFFF
//  469   {   
//  470     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_TURNOFF_UV_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL     ?Subroutine3 & 0xFFFF
//  471     zclSampleLight_OnOff = LIGHT_OFF;
??CrossCallReturnLabel_2:
        MOV       DPTR,#zclSampleLight_OnOff
        CLR       A
        MOVX      @DPTR,A
//  472     UV_Auto_Turn_Off = 1;
        MOV       DPTR,#UV_Auto_Turn_Off
        INC       A
        MOVX      @DPTR,A
//  473     zclSampleLight_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL     `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  474     return ( events ^ SAMPLELIGHT_TURNOFF_UV_EVT );
        MOV       A,R6
        XRL       A,#0x80
        LJMP      ??zclSampleLight_event_loop_2 & 0xFFFF
//  475   }  
??zclSampleLight_event_loop_3:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_NwkState
        MOVX      @DPTR,A
        XRL       A,#0x9
        JZ        ??zclSampleLight_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??zclSampleLight_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclSampleLight_event_loop_5
??zclSampleLight_event_loop_4:
        MOV       DPTR,#giLightScreenMode
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
??zclSampleLight_event_loop_6:
        LCALL     `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
??zclSampleLight_event_loop_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zclSampleLight_event_loop_7 & 0xFFFF
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclSampleLight_event_loop_8
        ADD       A,#0x74
        JZ        ??zclSampleLight_event_loop_9
        ADD       A,#-0x11
        JZ        ??zclSampleLight_event_loop_3
        SJMP      ??zclSampleLight_event_loop_5
??zclSampleLight_event_loop_8:
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleLight_event_loop_10
        ADD       A,#-0x3
        JNZ       ??zclSampleLight_event_loop_11
        LCALL     ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleLight_event_loop_11
        INC       R0
        SJMP      ??CrossCallReturnLabel_0
??zclSampleLight_event_loop_10:
        LCALL     ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP      ??zclSampleLight_event_loop_12
??zclSampleLight_event_loop_13:
        INC       R0
??zclSampleLight_event_loop_12:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??zclSampleLight_event_loop_13
??zclSampleLight_event_loop_11:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleLight_event_loop_5
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclSampleLight_event_loop_5
??zclSampleLight_event_loop_9:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       C,0xE0 /* A   */.5
        JNC       ??zclSampleLight_event_loop_14
        ; Setup parameters for call to function zclSampleLight_BasicResetCB
        LCALL     `??zclSampleLight_BasicResetCB::?relay`; Banked call to: zclSampleLight_BasicResetCB
??zclSampleLight_event_loop_14:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclSampleLight_event_loop_15
        MOV       DPTR,#zclSampleLight_OnOff
        CLR       A
        MOVX      @DPTR,A
        MOV       DPTR,#UV_Auto_Turn_Off
        MOVX      @DPTR,A
??zclSampleLight_event_loop_15:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclSampleLight_event_loop_16
        MOV       DPTR,#zclSampleLight_OnOff
        MOV       A,#0x1
        MOVX      @DPTR,A
??zclSampleLight_event_loop_16:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LJMP      ??zclSampleLight_event_loop_6 & 0xFFFF
??zclSampleLight_event_loop_7:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        SJMP      ??zclSampleLight_event_loop_17
//  476 
//  477   if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
??zclSampleLight_event_loop_1:
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclSampleLight_event_loop_18
//  478   {
//  479     if ( zclSampleLight_IdentifyTime > 0 )
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclSampleLight_event_loop_19
//  480       zclSampleLight_IdentifyTime--;
        MOV       DPTR,#zclSampleLight_IdentifyTime
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOVX      @DPTR,A
//  481     zclSampleLight_ProcessIdentifyTimeChange();
??zclSampleLight_event_loop_19:
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL     `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  482 
//  483     return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        MOV       A,R6
        XRL       A,#0x1
        SJMP      ??zclSampleLight_event_loop_2
//  484   }
//  485 
//  486   if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
??zclSampleLight_event_loop_18:
        ANL       A,#0x10
        JZ        ??zclSampleLight_event_loop_20
//  487   {
//  488     giLightScreenMode = LIGHT_MAINMODE;
        MOV       DPTR,#giLightScreenMode
        CLR       A
        MOVX      @DPTR,A
//  489     zclSampleLight_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL     `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  490 
//  491     return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
        MOV       A,R6
        XRL       A,#0x10
??zclSampleLight_event_loop_2:
        MOV       R2,A
        MOV       A,R7
??zclSampleLight_event_loop_17:
        MOV       R3,A
        SJMP      ??zclSampleLight_event_loop_21
//  492   }
//  493 
//  494 #ifdef ZCL_EZMODE
//  495 #if (defined HAL_BOARD_ZLIGHT)
//  496   // event to start EZMode on startup with a delay
//  497   if ( events & SAMPLELIGHT_START_EZMODE_EVT )
//  498   {
//  499     // Invoke EZ-Mode
//  500     zclEZMode_InvokeData_t ezModeData;
//  501 
//  502     // Invoke EZ-Mode
//  503     ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  504     if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  505          (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  506          (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  507     {
//  508       ezModeData.onNetwork = TRUE;      // node is already on the network
//  509     }
//  510     else
//  511     {
//  512       ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  513     }
//  514     ezModeData.initiator = FALSE;          // OnOffLight is a target
//  515     ezModeData.numActiveOutClusters = 0;
//  516     ezModeData.pActiveOutClusterIDs = NULL;
//  517     ezModeData.numActiveInClusters = 0;
//  518     ezModeData.pActiveOutClusterIDs = NULL;
//  519     zcl_InvokeEZMode( &ezModeData );
//  520 
//  521     return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
//  522   }
//  523 #endif // #if (defined HAL_BOARD_ZLIGHT)
//  524 
//  525   // going on to next state
//  526   if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
//  527   {
//  528     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
//  529     return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
//  530   }
//  531 
//  532   // the overall EZMode timer expired, so we timed out
//  533   if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
//  534   {
//  535     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
//  536     return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
//  537   }
//  538 #endif // ZLC_EZMODE
//  539 
//  540 #ifdef ZCL_LEVEL_CTRL
//  541   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  542   {
//  543     zclSampleLight_AdjustLightLevel();
//  544     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  545   }
//  546 #endif
//  547 
//  548   // Discard unknown events
//  549   return 0;
??zclSampleLight_event_loop_20:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclSampleLight_event_loop_21:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  550 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zclSampleLight_LcdDisplayUpdate
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond3) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond3) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond3) CFA_SP SP+-7
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV       R2,#-0x80
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIdentifyTimeChange
          CFI Conditional ??CrossCallReturnLabel_4
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zclSampleLight_event_loop
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zclSampleLight_LcdDisplayUpdate
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond7) CFA_SP SP+-7
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond10) CFA_SP SP+-7
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOV       DPTR,#zclSampleLight_IdentifyTime
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine5_0:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
          CFI Conditional ??CrossCallReturnLabel_5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zclSampleLight_OnOffCB
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zclSampleLight_event_loop
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond15) CFA_SP SP+-7
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclSampleLight_event_loop
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
//  551 
//  552 /*********************************************************************
//  553  * @fn      zclSampleLight_HandleKeys
//  554  *
//  555  * @brief   Handles all key events for this device.
//  556  *
//  557  * @param   shift - true if in shift/alt.
//  558  * @param   keys - bit field for key events. Valid entries:
//  559  *                 HAL_KEY_SW_5
//  560  *                 HAL_KEY_SW_4
//  561  *                 HAL_KEY_SW_2
//  562  *                 HAL_KEY_SW_1
//  563  *
//  564  * @return  none
//  565  */
//  566 static void zclSampleLight_HandleKeys( byte shift, byte keys )
//  567 {
//  568    if ( keys & HAL_KEY_SW_6 )
//  569   {
//  570     // toggle local light immediately
//  571     zclSampleLight_BasicResetCB();
//  572   }
//  573   
//  574   if ( keys & HAL_KEY_SW_5 )
//  575   {  
//  576     zclSampleLight_OnOff =LIGHT_OFF;
//  577     UV_Auto_Turn_Off = 0;
//  578   }
//  579   
//  580   if ( keys & HAL_KEY_SW_3 )
//  581   {  
//  582     zclSampleLight_OnOff =LIGHT_ON;
//  583   }
//  584 
//  585   // update the display, including the light
//  586   zclSampleLight_LcdDisplayUpdate();
//  587 }
//  588 
//  589 /*********************************************************************
//  590  * @fn      zclSampleLight_LcdDisplayUpdate
//  591  *
//  592  * @brief   Called to update the LCD display.
//  593  *
//  594  * @param   none
//  595  *
//  596  * @return  none
//  597  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  598 void zclSampleLight_LcdDisplayUpdate( void )
zclSampleLight_LcdDisplayUpdate:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclSampleLight_LcdDisplayUpdate
        CODE
//  599 {
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  600 #ifdef LCD_SUPPORTED
//  601   if ( giLightScreenMode == LIGHT_HELPMODE )
//  602   {
//  603     zclSampleLight_LcdDisplayHelpMode();
//  604   }
//  605   else
//  606   {
//  607     zclSampleLight_LcdDisplayMainMode();
//  608   }
//  609 #endif
//  610 
//  611   zclSampleLight_DisplayLight();
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclSampleLight_LcdDisplayUpdate_0
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_ea60
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        SJMP      ??CrossCallReturnLabel_3
??zclSampleLight_LcdDisplayUpdate_0:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL     ?Subroutine3 & 0xFFFF
//  612 }
??CrossCallReturnLabel_3:
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock20
//  613 
//  614 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  615 /*********************************************************************
//  616  * @fn      zclSampleLight_UpdateLampLevel
//  617  *
//  618  * @brief   Update lamp level output with gamma compensation
//  619  *
//  620  * @param   level
//  621  *
//  622  * @return  none
//  623  */
//  624 void zclSampleLight_UpdateLampLevel( uint8 level )
//  625 
//  626 {
//  627   uint16 gammaCorrectedLevel;
//  628 
//  629   // gamma correct the level
//  630   gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
//  631 
//  632   halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
//  633 }
//  634 #endif
//  635 
//  636 /*********************************************************************
//  637  * @fn      zclSampleLight_DisplayLight
//  638  *
//  639  * @brief   Displays current state of light on LED and also on main display if supported.
//  640  *
//  641  * @param   none
//  642  *
//  643  * @return  none
//  644  */
//  645 static void zclSampleLight_DisplayLight( void )
//  646 {
//  647   // set the LED1 based on light (on or off)
//  648   if ( zclSampleLight_OnOff == LIGHT_ON )
//  649   {
//  650     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  651     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  652     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_TURNOFF_UV_EVT, 60000 );    
//  653   }
//  654   else
//  655   {
//  656     HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
//  657     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  658     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_TURNOFF_UV_EVT ); 
//  659   }
//  660 
//  661 #ifdef LCD_SUPPORTED
//  662   if (giLightScreenMode == LIGHT_MAINMODE)
//  663   {
//  664 #ifdef ZCL_LEVEL_CTRL
//  665     // display current light level
//  666     if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  667          ( zclSampleLight_OnOff == LIGHT_OFF ) )
//  668     {
//  669       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  670     }
//  671     else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  672               ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
//  673                ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  674                  ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
//  675     {
//  676       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  677     }
//  678     else    // "    LEVEL ###"
//  679     {
//  680       zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
//  681       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  682     }
//  683 #else
//  684     if ( zclSampleLight_OnOff )
//  685     {
//  686       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  687     }
//  688     else
//  689     {
//  690       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  691     }
//  692 #endif // ZCL_LEVEL_CTRL
//  693   }
//  694 #endif // LCD_SUPPORTED
//  695 }
//  696 
//  697 #ifdef LCD_SUPPORTED
//  698 /*********************************************************************
//  699  * @fn      zclSampleLight_LcdDisplayMainMode
//  700  *
//  701  * @brief   Called to display the main screen on the LCD.
//  702  *
//  703  * @param   none
//  704  *
//  705  * @return  none
//  706  */
//  707 static void zclSampleLight_LcdDisplayMainMode( void )
//  708 {
//  709   // display line 1 to indicate NWK status
//  710   if ( zclSampleLight_NwkState == DEV_ZB_COORD )
//  711   {
//  712     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
//  713   }
//  714   else if ( zclSampleLight_NwkState == DEV_ROUTER )
//  715   {
//  716     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
//  717   }
//  718   else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
//  719   {
//  720     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
//  721   }
//  722 
//  723   // end of line 3 displays permit join status (*)
//  724   if ( gPermitDuration )
//  725   {
//  726     sSwHelp[15] = '*';
//  727   }
//  728   else
//  729   {
//  730     sSwHelp[15] = ' ';
//  731   }
//  732   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  733 }
//  734 
//  735 /*********************************************************************
//  736  * @fn      zclSampleLight_LcdDisplayHelpMode
//  737  *
//  738  * @brief   Called to display the SW options on the LCD.
//  739  *
//  740  * @param   none
//  741  *
//  742  * @return  none
//  743  */
//  744 static void zclSampleLight_LcdDisplayHelpMode( void )
//  745 {
//  746   HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
//  747   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
//  748   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  749 }
//  750 #endif  // LCD_SUPPORTED
//  751 
//  752 /*********************************************************************
//  753  * @fn      zclSampleLight_ProcessIdentifyTimeChange
//  754  *
//  755  * @brief   Called to process any change to the IdentifyTime attribute.
//  756  *
//  757  * @param   none
//  758  *
//  759  * @return  none
//  760  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  761 static void zclSampleLight_ProcessIdentifyTimeChange( void )
zclSampleLight_ProcessIdentifyTimeChange:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIdentifyTimeChange
        CODE
//  762 {
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  763   if ( zclSampleLight_IdentifyTime > 0 )
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclSampleLight_ProcessIdentifyTimeChange_0
//  764   {
//  765     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        SJMP      ??CrossCallReturnLabel_4
//  766 //    HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
//  767   }
//  768   else
//  769   {
//  770 #ifdef ZCL_EZMODE
//  771     if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
//  772     {
//  773       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
//  774     }
//  775     else
//  776     {
//  777       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  778     }
//  779 #endif
//  780 
//  781     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
??zclSampleLight_ProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x1
        LCALL     ??Subroutine4_0 & 0xFFFF
//  782   }
//  783 }
??CrossCallReturnLabel_4:
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock21
//  784 
//  785 /*********************************************************************
//  786  * @fn      zclSampleLight_BasicResetCB
//  787  *
//  788  * @brief   Callback from the ZCL General Cluster Library
//  789  *          to set all the Basic Cluster attributes to default values.
//  790  *
//  791  * @param   none
//  792  *
//  793  * @return  none
//  794  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  795 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  796 {
        FUNCALL zclSampleLight_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  797   NLME_LeaveReq_t leaveReq;
//  798   // Set every field to 0
//  799   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  800 
//  801   // This will enable the device to rejoin the network after reset.
//  802   leaveReq.rejoin = TRUE;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  803 
//  804   // Set the NV startup option to force a "new" join.
//  805   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x2
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  806 
//  807   // Leave the network, and reset afterwards
//  808   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV       A,R1
        JZ        ??zclSampleLight_BasicResetCB_0
//  809   {
//  810     // Couldn't send out leave; prepare to reset anyway
//  811     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV       R1,#0x0
        LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  812   }
//  813 }
??zclSampleLight_BasicResetCB_0:
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock22
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock23
//  814 
//  815 /*********************************************************************
//  816  * @fn      zclSampleLight_IdentifyCB
//  817  *
//  818  * @brief   Callback from the ZCL General Cluster Library when
//  819  *          it received an Identity Command for this application.
//  820  *
//  821  * @param   srcAddr - source address and endpoint of the response message
//  822  * @param   identifyTime - the number of seconds to identify yourself
//  823  *
//  824  * @return  none
//  825  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  826 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
zclSampleLight_IdentifyCB:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
        CODE
//  827 {
        FUNCALL zclSampleLight_IdentifyCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  828   zclSampleLight_IdentifyTime = pCmd->identifyTime;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV       DPTR,#zclSampleLight_IdentifyTime
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  829   zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL     `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  830 }
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock24
//  831 
//  832 /*********************************************************************
//  833  * @fn      zclSampleLight_IdentifyQueryRspCB
//  834  *
//  835  * @brief   Callback from the ZCL General Cluster Library when
//  836  *          it received an Identity Query Response Command for this application.
//  837  *
//  838  * @param   srcAddr - requestor's address
//  839  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  840  *
//  841  * @return  none
//  842  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  843 static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclSampleLight_IdentifyQueryRspCB:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyQueryRspCB
        CODE
//  844 {
        ; Saved register size: 0
        ; Auto size: 0
//  845   (void)pRsp;
//  846 #ifdef ZCL_EZMODE
//  847   {
//  848     zclEZMode_ActionData_t data;
//  849     data.pIdentifyQueryRsp = pRsp;
//  850     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
//  851   }
//  852 #endif
//  853 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock25
//  854 
//  855 /*********************************************************************
//  856  * @fn      zclSampleLight_OnOffCB
//  857  *
//  858  * @brief   Callback from the ZCL General Cluster Library when
//  859  *          it received an On/Off Command for this application.
//  860  *
//  861  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  862  *
//  863  * @return  none
//  864  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  865 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  866 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  867   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL     `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV       DPL,R2
        MOV       DPH,R3
//  868 
//  869   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV       DPTR,#zclSampleLight_DstAddr
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  870 
//  871 
//  872   // Turn on the light
//  873   if (( cmd == COMMAND_ON )&&( !HAL_PUSH_BUTTON2() ))
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??zclSampleLight_OnOffCB_0
        MOV       C,0x90.1
        JC        ??zclSampleLight_OnOffCB_1
        SJMP      ??zclSampleLight_OnOffCB_2
//  874   {
//  875     zclSampleLight_OnOff = LIGHT_ON;
//  876   }
//  877   // Turn off the light
//  878   else if ( cmd == COMMAND_OFF )
??zclSampleLight_OnOffCB_0:
        MOV       A,R6
        JZ        ??zclSampleLight_OnOffCB_3
//  879   {
//  880     zclSampleLight_OnOff = LIGHT_OFF;
//  881     UV_Auto_Turn_Off = 0;
//  882   }
//  883   // Toggle the light
//  884   else if ( cmd == COMMAND_TOGGLE )
        MOV       A,#0x2
        XRL       A,R6
        JNZ       ??zclSampleLight_OnOffCB_1
//  885   {
//  886     if ( zclSampleLight_OnOff == LIGHT_OFF )
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_OnOffCB_3
//  887     {
//  888       zclSampleLight_OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_2:
        MOV       DPTR,#zclSampleLight_OnOff
        MOV       A,#0x1
        SJMP      ??zclSampleLight_OnOffCB_4
//  889     }
//  890     else
//  891     {
//  892       zclSampleLight_OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_3:
        MOV       DPTR,#zclSampleLight_OnOff
        CLR       A
        MOVX      @DPTR,A
//  893       UV_Auto_Turn_Off = 0;
        MOV       DPTR,#UV_Auto_Turn_Off
??zclSampleLight_OnOffCB_4:
        MOVX      @DPTR,A
//  894     }
//  895   }
//  896 
//  897 #if ZCL_LEVEL_CTRL
//  898   zclSampleLight_DefaultMove( );
//  899 #endif
//  900 
//  901   // update the display
//  902   zclSampleLight_LcdDisplayUpdate( );
??zclSampleLight_OnOffCB_1:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL     `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  903 }
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock26
        REQUIRE _A_P1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bindingInClusters>`:
        DATA16
        DW 6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 8
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW `??zclSampleLight_IdentifyCB::?relay`
        DW 0H
        DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ea60:
        DD 60000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIdentifyTimeChange::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        END
//  904 
//  905 #ifdef ZCL_LEVEL_CTRL
//  906 /*********************************************************************
//  907  * @fn      zclSampleLight_TimeRateHelper
//  908  *
//  909  * @brief   Calculate time based on rate, and startup level state machine
//  910  *
//  911  * @param   newLevel - new level for current level
//  912  *
//  913  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  914  */
//  915 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
//  916 {
//  917   uint32 diff;
//  918   uint32 newLevel32;
//  919 
//  920   // remember current and new level
//  921   zclSampleLight_NewLevel = newLevel;
//  922   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
//  923 
//  924   // calculate diff
//  925   newLevel32 = (uint32)1000 * newLevel;
//  926   if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  927   {
//  928     diff = zclSampleLight_CurrentLevel32 - newLevel32;
//  929     zclSampleLight_NewLevelUp = FALSE;  // moving down
//  930   }
//  931   else
//  932   {
//  933     diff = newLevel32 - zclSampleLight_CurrentLevel32;
//  934     zclSampleLight_NewLevelUp = TRUE;   // moving up
//  935   }
//  936 
//  937   return ( diff );
//  938 }
//  939 
//  940 /*********************************************************************
//  941  * @fn      zclSampleLight_MoveBasedOnRate
//  942  *
//  943  * @brief   Calculate time based on rate, and startup level state machine
//  944  *
//  945  * @param   newLevel - new level for current level
//  946  * @param   rate16   - fixed point rate (e.g. 16.123)
//  947  *
//  948  * @return  none
//  949  */
//  950 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
//  951 {
//  952   uint32 diff;
//  953 
//  954   // determine how much time (in 10ths of seconds) based on the difference and rate
//  955   zclSampleLight_Rate32 = rate;
//  956   diff = zclSampleLight_TimeRateHelper( newLevel );
//  957   zclSampleLight_LevelRemainingTime = diff / rate;
//  958   if ( !zclSampleLight_LevelRemainingTime )
//  959   {
//  960     zclSampleLight_LevelRemainingTime = 1;
//  961   }
//  962 
//  963   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  964 }
//  965 
//  966 /*********************************************************************
//  967  * @fn      zclSampleLight_MoveBasedOnTime
//  968  *
//  969  * @brief   Calculate rate based on time, and startup level state machine
//  970  *
//  971  * @param   newLevel  - new level for current level
//  972  * @param   time      - in 10ths of seconds
//  973  *
//  974  * @return  none
//  975  */
//  976 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
//  977 {
//  978   uint16 diff;
//  979 
//  980   // determine rate (in units) based on difference and time
//  981   diff = zclSampleLight_TimeRateHelper( newLevel );
//  982   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
//  983   zclSampleLight_Rate32 = diff / time;
//  984 
//  985   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  986 }
//  987 
//  988 /*********************************************************************
//  989  * @fn      zclSampleLight_GetTime
//  990  *
//  991  * @brief   Determine amount of time that MoveXXX will take to complete.
//  992  *
//  993  * @param   level = new level to move to
//  994  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
//  995  *
//  996  * @return  none
//  997  */
//  998 static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
//  999 {
// 1000   // there is a hiearchy of the amount of time to use for transistioning
// 1001   // check each one in turn. If none of defaults are set, then use fastest
// 1002   // time possible.
// 1003   if ( time == 0xFFFF )
// 1004   {
// 1005     // use On or Off Transition Time if set (not 0xffff)
// 1006     if ( zclSampleLight_OnOff == LIGHT_ON )
// 1007     {
// 1008       time = zclSampleLight_LevelOffTransitionTime;
// 1009     }
// 1010     else
// 1011     {
// 1012       time = zclSampleLight_LevelOnTransitionTime;
// 1013     }
// 1014 
// 1015     // else use OnOffTransitionTime if set (not 0xffff)
// 1016     if ( time == 0xFFFF )
// 1017     {
// 1018       time = zclSampleLight_LevelOnOffTransitionTime;
// 1019     }
// 1020 
// 1021     // else as fast as possible
// 1022     if ( time == 0xFFFF )
// 1023     {
// 1024       time = 1;
// 1025     }
// 1026   }
// 1027 
// 1028   if ( !time )
// 1029   {
// 1030     time = 1; // as fast as possible
// 1031   }
// 1032 
// 1033   return ( time );
// 1034 }
// 1035 
// 1036 /*********************************************************************
// 1037  * @fn      zclSampleLight_DefaultMove
// 1038  *
// 1039  * @brief   We were turned on/off. Use default time to move to on or off.
// 1040  *
// 1041  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
// 1042  *
// 1043  * @return  none
// 1044  */
// 1045 static void zclSampleLight_DefaultMove( void )
// 1046 {
// 1047   uint8  newLevel;
// 1048   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
// 1049   uint16 time;
// 1050 
// 1051   // if moving to on position, move to on level
// 1052   if ( zclSampleLight_OnOff )
// 1053   {
// 1054     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1055     {
// 1056       // The last Level (before going OFF) should be used)
// 1057       newLevel = zclSampleLight_LevelLastLevel;
// 1058     }
// 1059     else
// 1060     {
// 1061       newLevel = zclSampleLight_LevelOnLevel;
// 1062     }
// 1063 
// 1064     time = zclSampleLight_LevelOnTransitionTime;
// 1065   }
// 1066   else
// 1067   {
// 1068     newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1069 
// 1070     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1071     {
// 1072       // Save the current Level before going OFF to use it when the light turns ON
// 1073       // it should be back to this level
// 1074       zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
// 1075     }
// 1076 
// 1077     time = zclSampleLight_LevelOffTransitionTime;
// 1078   }
// 1079 
// 1080   // else use OnOffTransitionTime if set (not 0xffff)
// 1081   if ( time == 0xFFFF )
// 1082   {
// 1083     time = zclSampleLight_LevelOnOffTransitionTime;
// 1084   }
// 1085 
// 1086   // else as fast as possible
// 1087   if ( time == 0xFFFF )
// 1088   {
// 1089     time = 1;
// 1090   }
// 1091 
// 1092   // calculate rate based on time (int 10ths) for full transition (1-254)
// 1093   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
// 1094 
// 1095   // start up state machine.
// 1096   zclSampleLight_WithOnOff = TRUE;
// 1097   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1098 }
// 1099 
// 1100 /*********************************************************************
// 1101  * @fn      zclSampleLight_AdjustLightLevel
// 1102  *
// 1103  * @brief   Called each 10th of a second while state machine running
// 1104  *
// 1105  * @param   none
// 1106  *
// 1107  * @return  none
// 1108  */
// 1109 static void zclSampleLight_AdjustLightLevel( void )
// 1110 {
// 1111   // one tick (10th of a second) less
// 1112   if ( zclSampleLight_LevelRemainingTime )
// 1113   {
// 1114     --zclSampleLight_LevelRemainingTime;
// 1115   }
// 1116 
// 1117   // no time left, done
// 1118   if ( zclSampleLight_LevelRemainingTime == 0)
// 1119   {
// 1120     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
// 1121   }
// 1122 
// 1123   // still time left, keep increment/decrementing
// 1124   else
// 1125   {
// 1126     if ( zclSampleLight_NewLevelUp )
// 1127     {
// 1128       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
// 1129     }
// 1130     else
// 1131     {
// 1132       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
// 1133     }
// 1134     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
// 1135   }
// 1136 
// 1137 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1138   zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
// 1139 #endif
// 1140 
// 1141   // also affect on/off
// 1142   if ( zclSampleLight_WithOnOff )
// 1143   {
// 1144     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
// 1145     {
// 1146       zclSampleLight_OnOff = LIGHT_ON;
// 1147 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1148       ENABLE_LAMP;
// 1149 #endif
// 1150     }
// 1151     else
// 1152     {
// 1153       zclSampleLight_OnOff = LIGHT_OFF;
// 1154 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1155       DISABLE_LAMP;
// 1156 #endif
// 1157     }
// 1158   }
// 1159 
// 1160   // display light level as we go
// 1161   zclSampleLight_DisplayLight( );
// 1162 
// 1163   // keep ticking away
// 1164   if ( zclSampleLight_LevelRemainingTime )
// 1165   {
// 1166     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1167   }
// 1168 }
// 1169 
// 1170 /*********************************************************************
// 1171  * @fn      zclSampleLight_LevelControlMoveToLevelCB
// 1172  *
// 1173  * @brief   Callback from the ZCL General Cluster Library when
// 1174  *          it received a LevelControlMoveToLevel Command for this application.
// 1175  *
// 1176  * @param   pCmd - ZigBee command parameters
// 1177  *
// 1178  * @return  none
// 1179  */
// 1180 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
// 1181 {
// 1182   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1183   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
// 1184 }
// 1185 
// 1186 /*********************************************************************
// 1187  * @fn      zclSampleLight_LevelControlMoveCB
// 1188  *
// 1189  * @brief   Callback from the ZCL General Cluster Library when
// 1190  *          it received a LevelControlMove Command for this application.
// 1191  *
// 1192  * @param   pCmd - ZigBee command parameters
// 1193  *
// 1194  * @return  none
// 1195  */
// 1196 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
// 1197 {
// 1198   uint8 newLevel;
// 1199   uint32 rate;
// 1200 
// 1201   // convert rate from units per second to units per tick (10ths of seconds)
// 1202   // and move at that right up or down
// 1203   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1204 
// 1205   if ( pCmd->moveMode == LEVEL_MOVE_UP )
// 1206   {
// 1207     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
// 1208   }
// 1209   else
// 1210   {
// 1211     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1212   }
// 1213 
// 1214   rate = (uint32)100 * pCmd->rate;
// 1215   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1216 }
// 1217 
// 1218 /*********************************************************************
// 1219  * @fn      zclSampleLight_LevelControlStepCB
// 1220  *
// 1221  * @brief   Callback from the ZCL General Cluster Library when
// 1222  *          it received an On/Off Command for this application.
// 1223  *
// 1224  * @param   pCmd - ZigBee command parameters
// 1225  *
// 1226  * @return  none
// 1227  */
// 1228 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1229 {
// 1230   uint8 newLevel;
// 1231 
// 1232   // determine new level, but don't exceed boundaries
// 1233   if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1234   {
// 1235     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1236     {
// 1237       newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1238     }
// 1239     else
// 1240     {
// 1241       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1242     }
// 1243   }
// 1244   else
// 1245   {
// 1246     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1247     {
// 1248       newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1249     }
// 1250     else
// 1251     {
// 1252       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1253     }
// 1254   }
// 1255 
// 1256   // move to the new level
// 1257   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1258   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1259 }
// 1260 
// 1261 /*********************************************************************
// 1262  * @fn      zclSampleLight_LevelControlStopCB
// 1263  *
// 1264  * @brief   Callback from the ZCL General Cluster Library when
// 1265  *          it received an Level Control Stop Command for this application.
// 1266  *
// 1267  * @param   pCmd - ZigBee command parameters
// 1268  *
// 1269  * @return  none
// 1270  */
// 1271 static void zclSampleLight_LevelControlStopCB( void )
// 1272 {
// 1273   // stop immediately
// 1274   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1275   zclSampleLight_LevelRemainingTime = 0;
// 1276 }
// 1277 #endif
// 1278 
// 1279 /******************************************************************************
// 1280  *
// 1281  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1282  *
// 1283  *****************************************************************************/
// 1284 
// 1285 /*********************************************************************
// 1286  * @fn      zclSampleLight_ProcessIncomingMsg
// 1287  *
// 1288  * @brief   Process ZCL Foundation incoming message
// 1289  *
// 1290  * @param   pInMsg - pointer to the received message
// 1291  *
// 1292  * @return  none
// 1293  */
// 1294 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1295 {
// 1296   switch ( pInMsg->zclHdr.commandID )
// 1297   {
// 1298 #ifdef ZCL_READ
// 1299     case ZCL_CMD_READ_RSP:
// 1300       zclSampleLight_ProcessInReadRspCmd( pInMsg );
// 1301       break;
// 1302 #endif
// 1303 #ifdef ZCL_WRITE
// 1304     case ZCL_CMD_WRITE_RSP:
// 1305       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
// 1306       break;
// 1307 #endif
// 1308 #ifdef ZCL_REPORT
// 1309     // Attribute Reporting implementation should be added here
// 1310     case ZCL_CMD_CONFIG_REPORT:
// 1311       // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
// 1312       break;
// 1313 
// 1314     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1315       // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
// 1316       break;
// 1317 
// 1318     case ZCL_CMD_READ_REPORT_CFG:
// 1319       // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
// 1320       break;
// 1321 
// 1322     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1323       // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
// 1324       break;
// 1325 
// 1326     case ZCL_CMD_REPORT:
// 1327       // zclSampleLight_ProcessInReportCmd( pInMsg );
// 1328       break;
// 1329 #endif
// 1330     case ZCL_CMD_DEFAULT_RSP:
// 1331       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1332       break;
// 1333 #ifdef ZCL_DISCOVER
// 1334     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1335       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1336       break;
// 1337 
// 1338     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1339       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1340       break;
// 1341 
// 1342     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1343       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
// 1344       break;
// 1345 
// 1346     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1347       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1348       break;
// 1349 #endif
// 1350     default:
// 1351       break;
// 1352   }
// 1353 
// 1354   if ( pInMsg->attrCmd )
// 1355     osal_mem_free( pInMsg->attrCmd );
// 1356 }
// 1357 
// 1358 #ifdef ZCL_READ
// 1359 /*********************************************************************
// 1360  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1361  *
// 1362  * @brief   Process the "Profile" Read Response Command
// 1363  *
// 1364  * @param   pInMsg - incoming message to process
// 1365  *
// 1366  * @return  none
// 1367  */
// 1368 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1369 {
// 1370   zclReadRspCmd_t *readRspCmd;
// 1371   uint8 i;
// 1372 
// 1373   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1374   for (i = 0; i < readRspCmd->numAttr; i++)
// 1375   {
// 1376     // Notify the originator of the results of the original read attributes
// 1377     // attempt and, for each successfull request, the value of the requested
// 1378     // attribute
// 1379   }
// 1380 
// 1381   return ( TRUE );
// 1382 }
// 1383 #endif // ZCL_READ
// 1384 
// 1385 #ifdef ZCL_WRITE
// 1386 /*********************************************************************
// 1387  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1388  *
// 1389  * @brief   Process the "Profile" Write Response Command
// 1390  *
// 1391  * @param   pInMsg - incoming message to process
// 1392  *
// 1393  * @return  none
// 1394  */
// 1395 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1396 {
// 1397   zclWriteRspCmd_t *writeRspCmd;
// 1398   uint8 i;
// 1399 
// 1400   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1401   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1402   {
// 1403     // Notify the device of the results of the its original write attributes
// 1404     // command.
// 1405   }
// 1406 
// 1407   return ( TRUE );
// 1408 }
// 1409 #endif // ZCL_WRITE
// 1410 
// 1411 /*********************************************************************
// 1412  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1413  *
// 1414  * @brief   Process the "Profile" Default Response Command
// 1415  *
// 1416  * @param   pInMsg - incoming message to process
// 1417  *
// 1418  * @return  none
// 1419  */
// 1420 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1421 {
// 1422   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1423 
// 1424   // Device is notified of the Default Response command.
// 1425   (void)pInMsg;
// 1426 
// 1427   return ( TRUE );
// 1428 }
// 1429 
// 1430 #ifdef ZCL_DISCOVER
// 1431 /*********************************************************************
// 1432  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1433  *
// 1434  * @brief   Process the Discover Commands Response Command
// 1435  *
// 1436  * @param   pInMsg - incoming message to process
// 1437  *
// 1438  * @return  none
// 1439  */
// 1440 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1441 {
// 1442   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1443   uint8 i;
// 1444 
// 1445   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1446   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1447   {
// 1448     // Device is notified of the result of its attribute discovery command.
// 1449   }
// 1450 
// 1451   return ( TRUE );
// 1452 }
// 1453 
// 1454 /*********************************************************************
// 1455  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1456  *
// 1457  * @brief   Process the "Profile" Discover Attributes Response Command
// 1458  *
// 1459  * @param   pInMsg - incoming message to process
// 1460  *
// 1461  * @return  none
// 1462  */
// 1463 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1464 {
// 1465   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1466   uint8 i;
// 1467 
// 1468   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1469   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1470   {
// 1471     // Device is notified of the result of its attribute discovery command.
// 1472   }
// 1473 
// 1474   return ( TRUE );
// 1475 }
// 1476 
// 1477 /*********************************************************************
// 1478  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1479  *
// 1480  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1481  *
// 1482  * @param   pInMsg - incoming message to process
// 1483  *
// 1484  * @return  none
// 1485  */
// 1486 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1487 {
// 1488   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1489   uint8 i;
// 1490 
// 1491   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1492   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1493   {
// 1494     // Device is notified of the result of its attribute discovery command.
// 1495   }
// 1496 
// 1497   return ( TRUE );
// 1498 }
// 1499 #endif // ZCL_DISCOVER
// 1500 
// 1501 #if ZCL_EZMODE
// 1502 /*********************************************************************
// 1503  * @fn      zclSampleLight_ProcessZDOMsgs
// 1504  *
// 1505  * @brief   Called when this node receives a ZDO/ZDP response.
// 1506  *
// 1507  * @param   none
// 1508  *
// 1509  * @return  status
// 1510  */
// 1511 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
// 1512 {
// 1513   zclEZMode_ActionData_t data;
// 1514   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1515 
// 1516   // Let EZ-Mode know of the Simple Descriptor Response
// 1517   if ( pMsg->clusterID == Match_Desc_rsp )
// 1518   {
// 1519     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
// 1520     data.pMatchDescRsp = pMatchDescRsp;
// 1521     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
// 1522     osal_mem_free( pMatchDescRsp );
// 1523   }
// 1524 }
// 1525 
// 1526 /*********************************************************************
// 1527  * @fn      zclSampleLight_EZModeCB
// 1528  *
// 1529  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1530 *           going on during EZ-Mode steering/finding/binding.
// 1531  *
// 1532  * @param   state - an
// 1533  *
// 1534  * @return  none
// 1535  */
// 1536 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
// 1537 {
// 1538 #ifdef LCD_SUPPORTED
// 1539   char *pStr;
// 1540   uint8 err;
// 1541 #endif
// 1542 
// 1543   // time to go into identify mode
// 1544   if ( state == EZMODE_STATE_IDENTIFYING )
// 1545   {
// 1546 #ifdef LCD_SUPPORTED
// 1547     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 1548 #endif
// 1549 
// 1550     zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
// 1551     zclSampleLight_ProcessIdentifyTimeChange();
// 1552   }
// 1553 
// 1554   // autoclosing, show what happened (success, cancelled, etc...)
// 1555   if( state == EZMODE_STATE_AUTOCLOSE )
// 1556   {
// 1557 #ifdef LCD_SUPPORTED
// 1558     pStr = NULL;
// 1559     err = pData->sAutoClose.err;
// 1560     if ( err == EZMODE_ERR_SUCCESS )
// 1561     {
// 1562       pStr = "EZMode: Success";
// 1563     }
// 1564     else if ( err == EZMODE_ERR_NOMATCH )
// 1565     {
// 1566       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 1567     }
// 1568     if ( pStr )
// 1569     {
// 1570       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1571       {
// 1572         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1573       }
// 1574     }
// 1575 #endif
// 1576   }
// 1577 
// 1578   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1579   if( state == EZMODE_STATE_FINISH )
// 1580   {
// 1581     // turn off identify mode
// 1582     zclSampleLight_IdentifyTime = 0;
// 1583     zclSampleLight_ProcessIdentifyTimeChange();
// 1584 
// 1585 #ifdef LCD_SUPPORTED
// 1586     // if successful, inform user which nwkaddr/ep we bound to
// 1587     pStr = NULL;
// 1588     err = pData->sFinish.err;
// 1589     if( err == EZMODE_ERR_SUCCESS )
// 1590     {
// 1591       // already stated on autoclose
// 1592     }
// 1593     else if ( err == EZMODE_ERR_CANCELLED )
// 1594     {
// 1595       pStr = "EZMode: Cancel";
// 1596     }
// 1597     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 1598     {
// 1599       pStr = "EZMode: BadParm";
// 1600     }
// 1601     else if ( err == EZMODE_ERR_TIMEDOUT )
// 1602     {
// 1603       pStr = "EZMode: TimeOut";
// 1604     }
// 1605     if ( pStr )
// 1606     {
// 1607       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1608       {
// 1609         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1610       }
// 1611     }
// 1612 #endif
// 1613     // show main UI screen 3 seconds after binding
// 1614     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
// 1615   }
// 1616 }
// 1617 #endif // ZCL_EZMODE
// 1618 
// 1619 /****************************************************************************
// 1620 ****************************************************************************/
// 1621 
// 1622 
// 
// 734 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//  37 bytes in segment XDATA_I
//  37 bytes in segment XDATA_ID
//   8 bytes in segment XDATA_ROM_C
//  16 bytes in segment XDATA_Z
// 
//  85 bytes of CODE     memory
//   0 bytes of CONST    memory (+ 8 bytes shared)
//   0 bytes of DATA     memory (+ 3 bytes shared)
// 734 bytes of HUGECODE memory
//  53 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
