###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               08/Jul/2020  09:51:48
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDSecMgr.c
#    Command line       =  
#        -f C:\Users\Peter.Wu\AppData\Local\Temp\EW7FD6.tmp ("C:\Z-Stack Home
#        1.2.2a.44539\Components\stack\zdo\ZDSecMgr.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D
#        MT_ZDO_FUNC -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D
#        ZCL_REPORT -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xD882
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x05, 0x69, 0x67, 0x42,
#        0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30,
#        0x39}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\ZDSecMgr.lst
#    Object file        =  
#        C:\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj\ZDSecMgr.r51
#
###############################################################################

C:\Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDSecMgr.c
      1          /******************************************************************************
      2            Filename:       ZDSecMgr.c
      3            Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
      4            Revision:       $Revision: 38833 $
      5          
      6            Description:    The ZigBee Device Security Manager.
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "ZGlobals.h"
     52          #include "ssp.h"
     53          #include "nwk_globals.h"
     54          #include "nwk.h"
     55          #include "NLMEDE.h"
     56          #include "AddrMgr.h"
     57          #include "AssocList.h"
     58          #include "APSMEDE.h"
     59          #include "ZDConfig.h"
     60          #include "ZDSecMgr.h"
     61          
     62          /******************************************************************************
     63           * CONSTANTS
     64           */
     65          // maximum number of devices managed by this Security Manager
     66          #if !defined ( ZDSECMGR_DEVICE_MAX )
     67            #define ZDSECMGR_DEVICE_MAX 3
     68          #endif
     69          
     70          // maximum number of LINK keys this device may store
     71          #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
     72          
     73          // total number of stored devices
     74          #if !defined ( ZDSECMGR_STORED_DEVICES )
     75            #define ZDSECMGR_STORED_DEVICES 3
     76          #endif
     77          
     78          // Total number of preconfigured trust center link key
     79          #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
     80            #define ZDSECMGR_TC_DEVICE_MAX 1
     81          #endif
     82          
     83          #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
     84            #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
     85          #endif
     86          
     87          // APSME Stub Implementations
     88          #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
     89          #define ZDSecMgrLinkKeyNVIdGet APSME_LinkKeyNVIdGet
     90          #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
     91          #define ZDSecMgrIsLinkKeyValid APSME_IsLinkKeyValid
     92          
     93          /******************************************************************************
     94           * TYPEDEFS
     95           */
     96          typedef struct
     97          {
     98            uint16            ami;
     99            uint16            keyNvId;   // index to the Link Key table in NV
    100            ZDSecMgr_Authentication_Option authenticateOption;
    101          } ZDSecMgrEntry_t;
    102          
    103          typedef struct
    104          {
    105            uint16          nwkAddr;
    106            uint8*          extAddr;
    107            uint16          parentAddr;
    108            uint8           secure;
    109            uint8           devStatus;
    110          } ZDSecMgrDevice_t;
    111          
    112          /******************************************************************************
    113           * EXTERNAL VARIABLES
    114           */
    115          extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
    116          
    117          /******************************************************************************
    118           * LOCAL VARIABLES
    119           */
    120          #if 0 // Taken out because the following functionality is only used for test
    121                // purpose. A more efficient (above) way is used. It can be put
    122                // back in if customers request for a white/black list feature.
    123          uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
    124          {
    125            { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    126            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
    127            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    128          };
    129          #endif
    130          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
   \                     ZDSecMgrTCExtAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    132            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 ZDSecMgrTCAuthenticated = FALSE;
   \                     ZDSecMgrTCAuthenticated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
   \                     ZDSecMgrEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    137          
    138          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 ZDSecMgrPermitJoiningEnabled;
   \                     ZDSecMgrPermitJoiningEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 ZDSecMgrPermitJoiningTimed;
   \                     ZDSecMgrPermitJoiningTimed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          APSME_TCLinkKey_t TrustCenterLinkKey;
   \                     TrustCenterLinkKey:
   \   000000                DS 32
   \   000020                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
   \                     ApsLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
   \                     TCLinkKeyFrmCntr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    147          
    148          /******************************************************************************
    149           * PRIVATE FUNCTIONS
    150           *
    151           *   ZDSecMgrAddrStore
    152           *   ZDSecMgrExtAddrStore
    153           *   ZDSecMgrExtAddrLookup
    154           *   ZDSecMgrEntryInit
    155           *   ZDSecMgrEntryLookup
    156           *   ZDSecMgrEntryLookupAMI
    157           *   ZDSecMgrEntryLookupExt
    158           *   ZDSecMgrEntryLookupExtGetIndex
    159           *   ZDSecMgrEntryFree
    160           *   ZDSecMgrEntryNew
    161           *   ZDSecMgrAppKeyGet
    162           *   ZDSecMgrAppKeyReq
    163           *   ZDSecMgrSendNwkKey
    164           *   ZDSecMgrDeviceRemove
    165           *   ZDSecMgrDeviceValidateRM
    166           *   ZDSecMgrDeviceValidate
    167           *   ZDSecMgrDeviceJoin
    168           *   ZDSecMgrDeviceJoinDirect
    169           *   ZDSecMgrDeviceJoinFwd
    170           *   ZDSecMgrDeviceNew
    171           *   ZDSecMgrAssocDeviceAuth
    172           *   ZDSecMgrAuthNwkKey
    173           *   APSME_TCLinkKeyInit
    174           *   APSME_IsDefaultTCLK
    175           */
    176          
    177          //-----------------------------------------------------------------------------
    178          // address management
    179          //-----------------------------------------------------------------------------
    180          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    181          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    182          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
    183          
    184          //-----------------------------------------------------------------------------
    185          // Trust Center management
    186          //-----------------------------------------------------------------------------
    187          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
    188          void ZDSecMgrTCDataLoad( uint8* extAddr );
    189          
    190          //-----------------------------------------------------------------------------
    191          // entry data
    192          //-----------------------------------------------------------------------------
    193          void ZDSecMgrEntryInit(uint8 state);
    194          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
    195          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
    196          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    197          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
    198          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
    199          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
    200          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
    201          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
    202          void ZDSecMgrApsLinkKeyInit(void);
    203          #if defined ( NV_RESTORE )
    204          static void ZDSecMgrWriteNV(void);
    205          static void ZDSecMgrRestoreFromNV(void);
    206          static void ZDSecMgrUpdateNV( uint16 index );
    207          #endif
    208          
    209          //-----------------------------------------------------------------------------
    210          // key support
    211          //-----------------------------------------------------------------------------
    212          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
    213                                       uint8*  initExtAddr,
    214                                       uint16  partNwkAddr,
    215                                       uint8*  partExtAddr,
    216                                       uint8** key,
    217                                       uint8*  keyType );
    218          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
    219          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
    220          void ZDSecMgrNwkKeyInit(uint8 setDefault);
    221          
    222          //-----------------------------------------------------------------------------
    223          // device management
    224          //-----------------------------------------------------------------------------
    225          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
    226          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
    227          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
    228          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
    229          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
    230          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
    231          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
    232          
    233          //-----------------------------------------------------------------------------
    234          // association management
    235          //-----------------------------------------------------------------------------
    236          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
    237          
    238          //-----------------------------------------------------------------------------
    239          // authentication management
    240          //-----------------------------------------------------------------------------
    241          void ZDSecMgrAuthNwkKey( void );
    242          
    243          //-----------------------------------------------------------------------------
    244          // APSME function
    245          //-----------------------------------------------------------------------------
    246          void APSME_TCLinkKeyInit( uint8 setDefault );
    247          uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
    248          
    249          /******************************************************************************
    250           * @fn          ZDSecMgrAddrStore
    251           *
    252           * @brief       Store device addresses.
    253           *
    254           * @param       nwkAddr - [in] NWK address
    255           * @param       extAddr - [in] EXT address
    256           * @param       ami     - [out] Address Manager index
    257           *
    258           * @return      ZStatus_t
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrAddrStore:
    261          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    262            ZStatus_t      status;
    263            AddrMgrEntry_t entry;
    264          
    265          
    266            // add entry
    267            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7402         MOV       A,#0x2
   \   000012   F0           MOVX      @DPTR,A
    268            entry.nwkAddr = nwkAddr;
   \   000013   14           DEC       A
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine17 & 0xFFFF
    269            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_12:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   AA82         MOV       R2,DPL
   \   00001F   AB83         MOV       R3,DPH
   \   000021   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000024   7416         MOV       A,#0x16
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine25 & 0xFFFF
    270          
    271            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_23:
   \   00002C   700A         JNZ       ??ZDSecMgrAddrStore_0
    272            {
    273              // return successful results
    274              *ami   = entry.index;
   \   00002E   740B         MOV       A,#0xb
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine13 & 0xFFFF
    275              status = ZSuccess;
    276            }
   \                     ??CrossCallReturnLabel_91:
   \   000036   8008         SJMP      ??CrossCallReturnLabel_15
    277            else
    278            {
    279              // return failed results
    280              *ami   = entry.index;
   \                     ??ZDSecMgrAddrStore_0:
   \   000038   740B         MOV       A,#0xb
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine18 & 0xFFFF
    281              status = ZNwkUnknownDevice;
    282            }
    283          
    284            return status;
   \                     ??CrossCallReturnLabel_15:
   \   000040   02....       LJMP      ?Subroutine0 & 0xFFFF
    285          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003                REQUIRE ??Subroutine67_0
   \   000003                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   FE           MOV       R6,A
   \   000004   E9           MOV       A,R1
   \   000005   FF           MOV       R7,A
   \   000006                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000006                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000006   AA..         MOV       R2,?XSP + 0
   \   000008   AB..         MOV       R3,?XSP + 1
   \   00000A   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00000D   E9           MOV       A,R1
   \   00000E   6401         XRL       A,#0x1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   E8           MOV       A,R0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   E9           MOV       A,R1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   79C8         MOV       R1,#-0x38
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000003   E8           MOV       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   740D         MOV       A,#0xd
   \   000002                REQUIRE ??Subroutine80_0
   \   000002                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine81_0
   \   000003                ; // Fall through to label ??Subroutine81_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    286          
    287          /******************************************************************************
    288           * @fn          ZDSecMgrExtAddrStore
    289           *
    290           * @brief       Store EXT address.
    291           *
    292           * @param       extAddr - [in] EXT address
    293           * @param       ami     - [out] Address Manager index
    294           *
    295           * @return      ZStatus_t
    296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrStore:
    298          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    299            ZStatus_t      status;
    300            AddrMgrEntry_t entry;
    301          
    302          
    303            // add entry
    304            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7402         MOV       A,#0x2
   \   000012   F0           MOVX      @DPTR,A
    305            entry.nwkAddr = nwkAddr;
   \   000013   14           DEC       A
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine17 & 0xFFFF
    306            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_13:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   AA82         MOV       R2,DPL
   \   00001F   AB83         MOV       R3,DPH
   \   000021   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000024   7416         MOV       A,#0x16
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine25 & 0xFFFF
    307          
    308            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_24:
   \   00002C   700A         JNZ       ??ZDSecMgrExtAddrStore_0
    309            {
    310              // return successful results
    311              *ami   = entry.index;
   \   00002E   740B         MOV       A,#0xb
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine13 & 0xFFFF
    312              status = ZSuccess;
    313            }
   \                     ??CrossCallReturnLabel_92:
   \   000036   8008         SJMP      ??CrossCallReturnLabel_16
    314            else
    315            {
    316              // return failed results
    317              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrStore_0:
   \   000038   740B         MOV       A,#0xb
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine18 & 0xFFFF
    318              status = ZNwkUnknownDevice;
    319            }
    320          
    321            return status;
   \                     ??CrossCallReturnLabel_16:
   \   000040   02....       LJMP      ?Subroutine0 & 0xFFFF
    322          }
    323          
    324          /******************************************************************************
    325           * @fn          ZDSecMgrExtAddrLookup
    326           *
    327           * @brief       Lookup index for specified EXT address.
    328           *
    329           * @param       extAddr - [in] EXT address
    330           * @param       ami     - [out] Address Manager index
    331           *
    332           * @return      ZStatus_t
    333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    334          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrLookup:
    335          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    336            ZStatus_t      status;
    337            AddrMgrEntry_t entry;
    338          
    339          
    340            // lookup entry
    341            entry.user = ADDRMGR_USER_SECURITY;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7402         MOV       A,#0x2
   \   000016   F0           MOVX      @DPTR,A
    342            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000017                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000017   EA           MOV       A,R2
   \   000018   FC           MOV       R4,A
   \   000019   EB           MOV       A,R3
   \   00001A   FD           MOV       R5,A
   \   00001B   7403         MOV       A,#0x3
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   AA82         MOV       R2,DPL
   \   000022   AB83         MOV       R3,DPH
   \   000024   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    343          
    344            if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000027                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00002E   E9           MOV       A,R1
   \   00002F   6401         XRL       A,#0x1
   \   000031   700A         JNZ       ??ZDSecMgrExtAddrLookup_0
    345            {
    346              // return successful results
    347              *ami   = entry.index;
   \   000033   740B         MOV       A,#0xb
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ?Subroutine13 & 0xFFFF
    348              status = ZSuccess;
    349            }
   \                     ??CrossCallReturnLabel_93:
   \   00003B   8008         SJMP      ??CrossCallReturnLabel_17
    350            else
    351            {
    352              // return failed results
    353              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrLookup_0:
   \   00003D   740B         MOV       A,#0xb
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine18 & 0xFFFF
    354              status = ZNwkUnknownDevice;
    355            }
    356          
    357            return status;
   \                     ??CrossCallReturnLabel_17:
   \   000045   02....       LJMP      ?Subroutine0 & 0xFFFF
    358          }
    359          
    360          /******************************************************************************
    361           * @fn          ZDSecMgrAddrClear
    362           *
    363           * @brief       Clear security bit from Address Manager for specific device.
    364           *
    365           * @param       extAddr - [in] EXT address
    366           *
    367           * @return      ZStatus_t
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
   \                     ZDSecMgrAddrClear:
    370          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    371            ZStatus_t status;
    372            uint16 entryAmi;
    373          
    374            // get Address Manager Index
    375            status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
   \   00000A                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000A   AC..         MOV       R4,?XSP + 0
   \   00000C   AD..         MOV       R5,?XSP + 1
   \   00000E   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000011   E9           MOV       A,R1
   \   000012   FE           MOV       R6,A
    376          
    377            if ( status == ZSuccess )
   \   000013   7028         JNZ       ??ZDSecMgrAddrClear_0
    378            {
    379              AddrMgrEntry_t addrEntry;
    380          
    381              // Clear SECURITY User bit from the address manager
    382              addrEntry.user = ADDRMGR_USER_SECURITY;
   \   000015   7402         MOV       A,#0x2
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   7402         MOV       A,#0x2
   \   00001C   F0           MOVX      @DPTR,A
    383              addrEntry.index = entryAmi;
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ??Subroutine76_0 & 0xFFFF
    384          
    385              if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
   \                     ??CrossCallReturnLabel_145:
   \   00002E                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP101_8
   \   000033   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000036   E9           MOV       A,R1
   \   000037   6401         XRL       A,#0x1
   \   000039   6002         JZ        ??ZDSecMgrAddrClear_0
    386              {
    387                // return failure results
    388                status = ZFailure;
   \   00003B   7E01         MOV       R6,#0x1
    389              }
    390            }
    391          
    392            return status;
   \                     ??ZDSecMgrAddrClear_0:
   \   00003D   EE           MOV       A,R6
   \   00003E   F9           MOV       R1,A
   \   00003F   740F         MOV       A,#0xf
   \   000041   02....       LJMP      ??Subroutine80_0 & 0xFFFF
    393          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    394          
    395          /******************************************************************************
    396           * @fn          ZDSecMgrEntryInit
    397           *
    398           * @brief       Initialize entry sub module
    399           *
    400           * @param       state - device initialization state
    401           *
    402           * @return      none
    403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          void ZDSecMgrEntryInit(uint8 state)
   \                     ZDSecMgrEntryInit:
    405          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    406            if (ZDSecMgrEntries == NULL)
   \   000007   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00000A   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00000D   7031         JNZ       ??ZDSecMgrEntryInit_0
    407            {
    408              uint16 index;
    409          
    410              if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A0F         MOV       R2,#0xf
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000019   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00001C   F9           MOV       R1,A
   \   00001D   EA           MOV       A,R2
   \   00001E   49           ORL       A,R1
   \   00001F   6025         JZ        ??ZDSecMgrEntryInit_1
    411              {
    412                return;
    413              }
    414          
    415              for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
   \   000021   7800         MOV       R0,#0x0
   \   000023   7900         MOV       R1,#0x0
    416              {
    417                ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryInit_2:
   \   000025   12....       LCALL     ?Subroutine32 & 0xFFFF
    418          
    419                ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
    420              }
   \                     ??CrossCallReturnLabel_35:
   \   000028   74FE         MOV       A,#-0x2
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   04           INC       A
   \   00002D   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   F0           MOVX      @DPTR,A
   \   000036   08           INC       R0
   \   000037   E8           MOV       A,R0
   \   000038   7001         JNZ       ??ZDSecMgrEntryInit_3
   \   00003A   09           INC       R1
   \                     ??ZDSecMgrEntryInit_3:
   \   00003B   12....       LCALL     ?Subroutine41 & 0xFFFF
    421            }
   \                     ??CrossCallReturnLabel_97:
   \   00003E   40E5         JC        ??ZDSecMgrEntryInit_2
    422          
    423          #if defined NV_RESTORE
    424            if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \                     ??ZDSecMgrEntryInit_0:
   \   000040   EE           MOV       A,R6
   \   000041   7003         JNZ       ??ZDSecMgrEntryInit_1
    425            {
    426              ZDSecMgrRestoreFromNV();
   \   000043                ; Setup parameters for call to function ZDSecMgrRestoreFromNV
   \   000043   12....       LCALL     `??ZDSecMgrRestoreFromNV::?relay`; Banked call to: ZDSecMgrRestoreFromNV
    427            }
    428          #else
    429            (void)state;
    430          #endif
    431          }
   \                     ??ZDSecMgrEntryInit_1:
   \   000046   02....       LJMP      ??Subroutine81_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   C3           CLR       C
   \   000001                REQUIRE ??Subroutine68_0
   \   000001                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   9403         SUBB      A,#0x3
   \   000002   E9           MOV       A,R1
   \   000003   9400         SUBB      A,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   8A82         MOV       DPL,R2
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E8           MOV       A,R0
   \   000001   FA           MOV       R2,A
   \   000002   E9           MOV       A,R1
   \   000003   FB           MOV       R3,A
   \   000004   EA           MOV       A,R2
   \   000005   75F005       MOV       B,#0x5
   \   000008   A4           MUL       AB
   \   000009   FA           MOV       R2,A
   \   00000A   ACF0         MOV       R4,B
   \   00000C   75F005       MOV       B,#0x5
   \   00000F   EB           MOV       A,R3
   \   000010   A4           MUL       AB
   \   000011   2C           ADD       A,R4
   \   000012   FB           MOV       R3,A
   \   000013   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000016   E0           MOVX      A,@DPTR
   \   000017   2A           ADD       A,R2
   \   000018   FA           MOV       R2,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   3B           ADDC      A,R3
   \   00001C   FB           MOV       R3,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function AssocGetWithShort
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   49           ORL       A,R1
   \   000004   22           RET
    432          
    433          /******************************************************************************
    434           * @fn          ZDSecMgrEntryLookup
    435           *
    436           * @brief       Lookup entry index using specified NWK address.
    437           *
    438           * @param       nwkAddr - [in] NWK address
    439           * @param       entry   - [out] valid entry
    440           *
    441           * @return      ZStatus_t
    442           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    443          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookup:
    444          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    445            uint16         index;
    446            AddrMgrEntry_t addrMgrEntry;
    447          
    448            // initialize results
    449            *entry = NULL;
   \   00000E   8C82         MOV       DPL,R4
   \   000010   F583         MOV       DPH,A
   \   000012   12....       LCALL     ?Subroutine10 & 0xFFFF
    450          
    451            // verify data is available
    452            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_0:
   \   000015   6045         JZ        ??ZDSecMgrEntryLookup_0
    453            {
    454              addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
   \   000017   85..82       MOV       DPL,?XSP + 0
   \   00001A   85..83       MOV       DPH,?XSP + 1
   \   00001D   7402         MOV       A,#0x2
   \   00001F   F0           MOVX      @DPTR,A
    455              addrMgrEntry.nwkAddr = nwkAddr;
   \   000020   14           DEC       A
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine22 & 0xFFFF
    456          
    457              if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
   \                     ??CrossCallReturnLabel_184:
   \   000027   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00002A   E9           MOV       A,R1
   \   00002B   6401         XRL       A,#0x1
   \   00002D   702D         JNZ       ??ZDSecMgrEntryLookup_0
    458              {
    459                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00002F   7800         MOV       R0,#0x0
   \   000031   7900         MOV       R1,#0x0
    460                {
    461                  if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
   \                     ??ZDSecMgrEntryLookup_1:
   \   000033   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000036   740B         MOV       A,#0xb
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6C           XRL       A,R4
   \   000044   7003         JNZ       ??ZDSecMgrEntryLookup_2
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6D           XRL       A,R5
   \                     ??ZDSecMgrEntryLookup_2:
   \   000049   7007         JNZ       ??ZDSecMgrEntryLookup_3
    462                  {
    463                    // return successful results
    464                    *entry = &ZDSecMgrEntries[index];
   \   00004B   12....       LCALL     ?Subroutine54 & 0xFFFF
    465          
    466                    // break from loop
    467                    return ZSuccess;
   \                     ??CrossCallReturnLabel_142:
   \   00004E   7900         MOV       R1,#0x0
   \   000050   800C         SJMP      ??ZDSecMgrEntryLookup_4
    468                  }
    469                }
   \                     ??ZDSecMgrEntryLookup_3:
   \   000052   08           INC       R0
   \   000053   E8           MOV       A,R0
   \   000054   7001         JNZ       ??ZDSecMgrEntryLookup_5
   \   000056   09           INC       R1
   \                     ??ZDSecMgrEntryLookup_5:
   \   000057   12....       LCALL     ?Subroutine41 & 0xFFFF
    470              }
    471            }
   \                     ??CrossCallReturnLabel_98:
   \   00005A   40D7         JC        ??ZDSecMgrEntryLookup_1
    472          
    473            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookup_0:
   \   00005C   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookup_4:
   \   00005E   02....       LJMP      ?Subroutine0 & 0xFFFF
    474          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   F0           MOVX      @DPTR,A
   \   000004   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000007   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00000A   49           ORL       A,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine75_0
   \   000004                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine79_0
   \   000004                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000001                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000001                ; Setup parameters for call to function NLME_LeaveReq
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceNew
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   22           RET
    475          
    476          /******************************************************************************
    477           * @fn          ZDSecMgrEntryLookupAMI
    478           *
    479           * @brief       Lookup entry using specified address index
    480           *
    481           * @param       ami   - [in] Address Manager index
    482           * @param       entry - [out] valid entry
    483           *
    484           * @return      ZStatus_t
    485           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupAMI:
    487          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    488            uint16 index;
    489          
    490            // initialize results
    491            *entry = NULL;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   12....       LCALL     ?Subroutine10 & 0xFFFF
    492          
    493            // verify data is available
    494            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_1:
   \   00000C   6030         JZ        ??ZDSecMgrEntryLookupAMI_0
    495            {
    496              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000E   7800         MOV       R0,#0x0
   \   000010   7900         MOV       R1,#0x0
    497              {
    498                if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupAMI_1:
   \   000012   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000015   FE           MOV       R6,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   3F           ADDC      A,R7
   \   000019   FF           MOV       R7,A
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6A           XRL       A,R2
   \   000020   7003         JNZ       ??ZDSecMgrEntryLookupAMI_2
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6B           XRL       A,R3
   \                     ??ZDSecMgrEntryLookupAMI_2:
   \   000025   700D         JNZ       ??ZDSecMgrEntryLookupAMI_3
    499                {
    500                  // return successful results
    501                  *entry = &ZDSecMgrEntries[index];
   \   000027   8C82         MOV       DPL,R4
   \   000029   8D83         MOV       DPH,R5
   \   00002B   EE           MOV       A,R6
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   EF           MOV       A,R7
   \   00002F   F0           MOVX      @DPTR,A
    502          
    503                  // break from loop
    504                  return ZSuccess;
   \   000030   7900         MOV       R1,#0x0
   \   000032   800C         SJMP      ??ZDSecMgrEntryLookupAMI_4
    505                }
    506              }
   \                     ??ZDSecMgrEntryLookupAMI_3:
   \   000034   08           INC       R0
   \   000035   E8           MOV       A,R0
   \   000036   7001         JNZ       ??ZDSecMgrEntryLookupAMI_5
   \   000038   09           INC       R1
   \                     ??ZDSecMgrEntryLookupAMI_5:
   \   000039   12....       LCALL     ?Subroutine41 & 0xFFFF
    507            }
   \                     ??CrossCallReturnLabel_99:
   \   00003C   40D4         JC        ??ZDSecMgrEntryLookupAMI_1
    508          
    509            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMI_0:
   \   00003E   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMI_4:
   \   000040   02....       LJMP      ??Subroutine81_0 & 0xFFFF
    510          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E8           MOV       A,R0
   \   000001   FE           MOV       R6,A
   \   000002   E9           MOV       A,R1
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005   75F005       MOV       B,#0x5
   \   000008   A4           MUL       AB
   \   000009   FE           MOV       R6,A
   \   00000A   85F0..       MOV       ?V0,B
   \   00000D   75F005       MOV       B,#0x5
   \   000010   EF           MOV       A,R7
   \   000011   A4           MUL       AB
   \   000012   25..         ADD       A,?V0
   \   000014   FF           MOV       R7,A
   \   000015   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000018   E0           MOVX      A,@DPTR
   \   000019   2E           ADD       A,R6
   \   00001A   22           RET
    511          
    512          /******************************************************************************
    513           * @fn          ZDSecMgrEntryLookupExt
    514           *
    515           * @brief       Lookup entry index using specified EXT address.
    516           *
    517           * @param       extAddr - [in] EXT address
    518           * @param       entry   - [out] valid entry
    519           *
    520           * @return      ZStatus_t
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupExt:
    523          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    524            ZStatus_t status;
    525            uint16    ami;
    526          
    527            // initialize results
    528            *entry = NULL;
   \   00000E   8C82         MOV       DPL,R4
   \   000010   F583         MOV       DPH,A
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
    529            status = ZNwkUnknownDevice;
   \   000016   75..C8       MOV       ?V0,#-0x38
    530          
    531            // lookup address index
    532            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   000019                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000019   AC..         MOV       R4,?XSP + 0
   \   00001B   AD..         MOV       R5,?XSP + 1
   \   00001D   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000020   E9           MOV       A,R1
   \   000021   700D         JNZ       ??ZDSecMgrEntryLookupExt_0
    533            {
    534              status = ZDSecMgrEntryLookupAMI( ami, entry );
   \   000023                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000023   EE           MOV       A,R6
   \   000024   FC           MOV       R4,A
   \   000025   EF           MOV       A,R7
   \   000026   FD           MOV       R5,A
   \   000027   12....       LCALL     ?Subroutine37 & 0xFFFF
    535            }
   \                     ??CrossCallReturnLabel_112:
   \   00002A   12....       LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   00002D   E9           MOV       A,R1
   \   00002E   F5..         MOV       ?V0,A
    536          
    537            return status;
   \                     ??ZDSecMgrEntryLookupExt_0:
   \   000030   A9..         MOV       R1,?V0
   \   000032   02....       LJMP      ?Subroutine7 & 0xFFFF
    538          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV       A,#0x2
   \   000002   02....       LJMP      ??Subroutine80_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine69_0
   \   000006                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    539          
    540          /******************************************************************************
    541           * @fn          ZDSecMgrEntryLookupExtGetIndex
    542           *
    543           * @brief       Lookup entry index using specified EXT address.
    544           *
    545           * @param       extAddr - [in] EXT address
    546           * @param       entryIndex - [out] valid index to the entry table
    547           *
    548           * @return      ZStatus_t
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupExtGetIndex:
    551          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    552            uint16 ami;
    553            uint16 index;
    554          
    555            // lookup address index
    556            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000015   E9           MOV       A,R1
   \   000016   703B         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_0
    557            {
    558              // verify data is available
    559              if ( ZDSecMgrEntries != NULL )
   \   000018   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00001B   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00001E   6033         JZ        ??ZDSecMgrEntryLookupExtGetIndex_0
    560              {
    561                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000020   7800         MOV       R0,#0x0
   \   000022   7900         MOV       R1,#0x0
    562                {
    563                  if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupExtGetIndex_1:
   \   000024   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000027   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00002A   85..82       MOV       DPL,?XSP + 0
   \   00002D   85..83       MOV       DPH,?XSP + 1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6C           XRL       A,R4
   \   000032   7003         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_2
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6D           XRL       A,R5
   \                     ??ZDSecMgrEntryLookupExtGetIndex_2:
   \   000037   7010         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_3
    564                  {
    565                    // return successful results
    566                    *entry = &ZDSecMgrEntries[index];
   \   000039   12....       LCALL     ?Subroutine54 & 0xFFFF
    567                    *entryIndex = index;
   \                     ??CrossCallReturnLabel_143:
   \   00003C   740B         MOV       A,#0xb
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ?Subroutine38 & 0xFFFF
    568          
    569                    // break from loop
    570                    return ZSuccess;
    571                  }
    572                }
   \                     ??CrossCallReturnLabel_47:
   \   000044   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000047   800C         SJMP      ??ZDSecMgrEntryLookupExtGetIndex_4
   \                     ??ZDSecMgrEntryLookupExtGetIndex_3:
   \   000049   08           INC       R0
   \   00004A   E8           MOV       A,R0
   \   00004B   7001         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_5
   \   00004D   09           INC       R1
   \                     ??ZDSecMgrEntryLookupExtGetIndex_5:
   \   00004E   12....       LCALL     ?Subroutine41 & 0xFFFF
    573              }
    574            }
   \                     ??CrossCallReturnLabel_100:
   \   000051   40D1         JC        ??ZDSecMgrEntryLookupExtGetIndex_1
    575          
    576            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupExtGetIndex_0:
   \   000053   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupExtGetIndex_4:
   \   000055   02....       LJMP      ?Subroutine7 & 0xFFFF
    577          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8A82         MOV       DPL,R2
   \   000008   22           RET
    578          
    579          /******************************************************************************
    580           * @fn          ZDSecMgrEntryLookupAMIGetIndex
    581           *
    582           * @brief       Lookup entry using specified address index
    583           *
    584           * @param       ami   - [in] Address Manager index
    585           * @param       entryIndex - [out] valid index to the entry table
    586           *
    587           * @return      ZStatus_t
    588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    589          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupAMIGetIndex:
    590          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    591            uint16 index;
    592          
    593            // verify data is available
    594            if ( ZDSecMgrEntries != NULL )
   \   000005   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000008   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00000B   602D         JZ        ??ZDSecMgrEntryLookupAMIGetIndex_0
    595            {
    596              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000D   7800         MOV       R0,#0x0
   \   00000F   7900         MOV       R1,#0x0
    597              {
    598                if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_1:
   \   000011   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000014   F5..         MOV       ?V0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   3F           ADDC      A,R7
   \   000019   85..82       MOV       DPL,?V0
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6A           XRL       A,R2
   \   000020   7003         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_2
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6B           XRL       A,R3
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_2:
   \   000025   7009         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_3
    599                {
    600                  // return successful results
    601                  *entryIndex = index;
   \   000027   8C82         MOV       DPL,R4
   \   000029   8D83         MOV       DPH,R5
   \   00002B   12....       LCALL     ??Subroutine67_0 & 0xFFFF
    602          
    603                  // break from loop
    604                  return ZSuccess;
    605                }
    606              }
   \                     ??CrossCallReturnLabel_95:
   \   00002E   800C         SJMP      ??ZDSecMgrEntryLookupAMIGetIndex_4
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_3:
   \   000030   08           INC       R0
   \   000031   E8           MOV       A,R0
   \   000032   7001         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_5
   \   000034   09           INC       R1
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_5:
   \   000035   12....       LCALL     ?Subroutine41 & 0xFFFF
    607            }
   \                     ??CrossCallReturnLabel_101:
   \   000038   40D7         JC        ??ZDSecMgrEntryLookupAMIGetIndex_1
    608          
    609            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_0:
   \   00003A   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_4:
   \   00003C   02....       LJMP      ??Subroutine81_0 & 0xFFFF
    610          }
    611          
    612          /******************************************************************************
    613           * @fn          ZDSecMgrEntryFree
    614           *
    615           * @brief       Free entry.
    616           *
    617           * @param       entry - [in] valid entry
    618           *
    619           * @return      ZStatus_t
    620           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    621          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrEntryFree:
    622          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    623            APSME_LinkKeyData_t   *pApsLinkKey = NULL;
    624          
    625          #if defined ( NV_RESTORE )
    626            ZStatus_t status;
    627            uint16 entryIndex;
    628          
    629            status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupAMIGetIndex
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00001A   12....       LCALL     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupAMIGetIndex
   \   00001D   E9           MOV       A,R1
   \   00001E   F5..         MOV       ?V2,A
    630          #endif
    631          
    632            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   7A18         MOV       R2,#0x18
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
    633          
    634            if (pApsLinkKey != NULL)
   \   00002B   EA           MOV       A,R2
   \   00002C   4B           ORL       A,R3
   \   00002D   6041         JZ        ??ZDSecMgrEntryFree_0
    635            {
    636              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00002F                ; Setup parameters for call to function osal_memset
   \   00002F   7C18         MOV       R4,#0x18
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7900         MOV       R1,#0x0
   \   000035   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    637          
    638              // Clear the APS Link key in NV
    639              osal_nv_write( entry->keyNvId, 0,
    640                                  sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   000038   EE           MOV       A,R6
   \   000039   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00003C                ; Setup parameters for call to function osal_nv_write
   \   00003C   78..         MOV       R0,#?V4
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75..18       MOV       ?V6,#0x18
   \   000044   75..00       MOV       ?V7,#0x0
   \   000047   78..         MOV       R0,#?V6
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7C00         MOV       R4,#0x0
   \   00004E   7D00         MOV       R5,#0x0
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000059   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
    641          
    642              // set entry to invalid Key
    643              entry->keyNvId = SEC_NO_KEY_NV_ID;
   \   00005F   85..82       MOV       DPL,?V0
   \   000062   85..83       MOV       DPH,?V1
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   F0           MOVX      @DPTR,A
    644          
    645              osal_mem_free(pApsLinkKey);
   \   000069                ; Setup parameters for call to function osal_mem_free
   \   000069   AA..         MOV       R2,?V4
   \   00006B   AB..         MOV       R3,?V5
   \   00006D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    646            }
    647          
    648            // marking the entry as INVALID_NODE_ADDR
    649            entry->ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryFree_0:
   \   000070   8E82         MOV       DPL,R6
   \   000072   8F83         MOV       DPH,R7
   \   000074   74FE         MOV       A,#-0x2
   \   000076   F0           MOVX      @DPTR,A
   \   000077   A3           INC       DPTR
   \   000078   04           INC       A
   \   000079   F0           MOVX      @DPTR,A
    650          
    651            // set to default value
    652            entry->authenticateOption = ZDSecMgr_Not_Authenticated;
   \   00007A   8E82         MOV       DPL,R6
   \   00007C   8F83         MOV       DPH,R7
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   E4           CLR       A
   \   000083   F0           MOVX      @DPTR,A
    653          
    654          #if defined ( NV_RESTORE )
    655            if ( status == ZSuccess )
   \   000084   E5..         MOV       A,?V2
   \   000086   6003         JZ        $+5
   \   000088   02....       LJMP      ??ZDSecMgrEntryFree_1 & 0xFFFF
    656            {
    657              ZDSecMgrUpdateNV(entryIndex);
   \   00008B   7402         MOV       A,#0x2
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   12....       LCALL     ??Subroutine69_0 & 0xFFFF
    658            }
   \                     ??CrossCallReturnLabel_104:
   \   000093   EA           MOV       A,R2
   \   000094   75F005       MOV       B,#0x5
   \   000097   A4           MUL       AB
   \   000098   FE           MOV       R6,A
   \   000099   A8F0         MOV       R0,B
   \   00009B   75F005       MOV       B,#0x5
   \   00009E   EB           MOV       A,R3
   \   00009F   A4           MUL       AB
   \   0000A0   28           ADD       A,R0
   \   0000A1   FF           MOV       R7,A
   \   0000A2   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000A5   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0000A8   6037         JZ        ??ZDSecMgrEntryFree_2
   \   0000AA                ; Setup parameters for call to function osal_nv_write
   \   0000AA   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   2E           ADD       A,R6
   \   0000AF   F5..         MOV       ?V0,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   3F           ADDC      A,R7
   \   0000B4   F5..         MOV       ?V1,A
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   75..05       MOV       ?V0,#0x5
   \   0000BE   75..00       MOV       ?V1,#0x0
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   EA           MOV       A,R2
   \   0000C7   75F005       MOV       B,#0x5
   \   0000CA   A4           MUL       AB
   \   0000CB   A8F0         MOV       R0,B
   \   0000CD   75F005       MOV       B,#0x5
   \   0000D0   EB           MOV       A,R3
   \   0000D1   A4           MUL       AB
   \   0000D2   28           ADD       A,R0
   \   0000D3   FB           MOV       R3,A
   \   0000D4   EE           MOV       A,R6
   \   0000D5   2402         ADD       A,#0x2
   \   0000D7   FC           MOV       R4,A
   \   0000D8   E4           CLR       A
   \   0000D9   3B           ADDC      A,R3
   \   0000DA   FD           MOV       R5,A
   \   0000DB   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDSecMgrEntryFree_2:
   \   0000E1                ; Setup parameters for call to function osal_nv_read
   \   0000E1   A8..         MOV       R0,?XSP + 0
   \   0000E3   A9..         MOV       R1,?XSP + 1
   \   0000E5   88..         MOV       ?V0,R0
   \   0000E7   89..         MOV       ?V1,R1
   \   0000E9   78..         MOV       R0,#?V0
   \   0000EB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EE   75..02       MOV       ?V0,#0x2
   \   0000F1   75..00       MOV       ?V1,#0x0
   \   0000F4   78..         MOV       R0,#?V0
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F9   7C00         MOV       R4,#0x0
   \   0000FB   7D00         MOV       R5,#0x0
   \   0000FD   7A4C         MOV       R2,#0x4c
   \   0000FF   7B00         MOV       R3,#0x0
   \   000101   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000104   12....       LCALL     ?DEALLOC_XSTACK8
   \   000107   E9           MOV       A,R1
   \   000108   704A         JNZ       ??ZDSecMgrEntryFree_1
   \   00010A   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   64FE         XRL       A,#0xfe
   \   000110   7003         JNZ       ??ZDSecMgrEntryFree_3
   \   000112   A3           INC       DPTR
   \   000113   E0           MOVX      A,@DPTR
   \   000114   F4           CPL       A
   \                     ??ZDSecMgrEntryFree_3:
   \   000115   85..82       MOV       DPL,?XSP + 0
   \   000118   85..83       MOV       DPH,?XSP + 1
   \   00011B   7015         JNZ       ??ZDSecMgrEntryFree_4
   \   00011D   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000120   6014         JZ        ??ZDSecMgrEntryFree_5
   \   000122   85..82       MOV       DPL,?XSP + 0
   \   000125   85..83       MOV       DPH,?XSP + 1
   \   000128   E0           MOVX      A,@DPTR
   \   000129   24FF         ADD       A,#-0x1
   \   00012B   F0           MOVX      @DPTR,A
   \   00012C   A3           INC       DPTR
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   34FF         ADDC      A,#-0x1
   \   000130   8003         SJMP      ??CrossCallReturnLabel_49
   \                     ??ZDSecMgrEntryFree_4:
   \   000132   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000135   F0           MOVX      @DPTR,A
   \                     ??ZDSecMgrEntryFree_5:
   \   000136                ; Setup parameters for call to function osal_nv_write
   \   000136   A8..         MOV       R0,?XSP + 0
   \   000138   A9..         MOV       R1,?XSP + 1
   \   00013A   88..         MOV       ?V0,R0
   \   00013C   89..         MOV       ?V1,R1
   \   00013E   78..         MOV       R0,#?V0
   \   000140   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000143   75..02       MOV       ?V0,#0x2
   \   000146   75..00       MOV       ?V1,#0x0
   \   000149   78..         MOV       R0,#?V0
   \   00014B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014E   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000151   12....       LCALL     ?DEALLOC_XSTACK8
    659          #endif
    660          }
   \                     ??ZDSecMgrEntryFree_1:
   \   000154   7404         MOV       A,#0x4
   \   000156   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   2402         ADD       A,#0x2
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   3F           ADDC      A,R7
   \   000005   88..         MOV       ?V0,R0
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2401         ADD       A,#0x1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   8882         MOV       DPL,R0
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004                REQUIRE ??Subroutine89_0
   \   000004                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   7A4C         MOV       R2,#0x4c
   \   000002                REQUIRE ??Subroutine90_0
   \   000002                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine91_0
   \   000002                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET
    661          
    662          /******************************************************************************
    663           * @fn          ZDSecMgrEntryNew
    664           *
    665           * @brief       Get a new entry.
    666           *
    667           * @param       entry - [out] valid entry
    668           *
    669           * @return      ZStatus_t
    670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryNew:
    672          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    673            uint16 index;
    674          
    675            // initialize results
    676            *entry = NULL;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   12....       LCALL     ?Subroutine10 & 0xFFFF
    677          
    678            // verify data is available
    679            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_2:
   \   00000C   605B         JZ        ??ZDSecMgrEntryNew_0
    680            {
    681              // find available entry
    682              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000E   7C00         MOV       R4,#0x0
   \   000010   7D00         MOV       R5,#0x0
    683              {
    684                if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \                     ??ZDSecMgrEntryNew_1:
   \   000012   EC           MOV       A,R4
   \   000013   F8           MOV       R0,A
   \   000014   ED           MOV       A,R5
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   75F005       MOV       B,#0x5
   \   00001A   A4           MUL       AB
   \   00001B   F8           MOV       R0,A
   \   00001C   AEF0         MOV       R6,B
   \   00001E   75F005       MOV       B,#0x5
   \   000021   E9           MOV       A,R1
   \   000022   A4           MUL       AB
   \   000023   2E           ADD       A,R6
   \   000024   F9           MOV       R1,A
   \   000025   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000028   E0           MOVX      A,@DPTR
   \   000029   28           ADD       A,R0
   \   00002A   FE           MOV       R6,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   39           ADDC      A,R1
   \   00002E   FF           MOV       R7,A
   \   00002F   8E82         MOV       DPL,R6
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   64FE         XRL       A,#0xfe
   \   000036   7003         JNZ       ??ZDSecMgrEntryNew_2
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F4           CPL       A
   \                     ??ZDSecMgrEntryNew_2:
   \   00003B   701F         JNZ       ??ZDSecMgrEntryNew_3
    685                {
    686                  // return successful result
    687                  *entry = &ZDSecMgrEntries[index];
   \   00003D   8A82         MOV       DPL,R2
   \   00003F   8B83         MOV       DPH,R3
   \   000041   EE           MOV       A,R6
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   EF           MOV       A,R7
   \   000045   F0           MOVX      @DPTR,A
    688          
    689                  // Set the authentication option to default
    690                  ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
   \   000046   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   28           ADD       A,R0
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   39           ADDC      A,R1
   \   00004F   8A82         MOV       DPL,R2
   \   000051   F583         MOV       DPH,A
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E4           CLR       A
   \   000058   F0           MOVX      @DPTR,A
    691          
    692                  // break from loop
    693                  return ZSuccess;
   \   000059   F9           MOV       R1,A
   \   00005A   800F         SJMP      ??ZDSecMgrEntryNew_4
    694                }
    695              }
   \                     ??ZDSecMgrEntryNew_3:
   \   00005C   0C           INC       R4
   \   00005D   EC           MOV       A,R4
   \   00005E   7001         JNZ       ??ZDSecMgrEntryNew_5
   \   000060   0D           INC       R5
   \                     ??ZDSecMgrEntryNew_5:
   \   000061   C3           CLR       C
   \   000062   9403         SUBB      A,#0x3
   \   000064   ED           MOV       A,R5
   \   000065   9400         SUBB      A,#0x0
   \   000067   40A9         JC        ??ZDSecMgrEntryNew_1
    696            }
    697          
    698            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryNew_0:
   \   000069   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryNew_4:
   \   00006B   02....       LJMP      ??Subroutine81_0 & 0xFFFF
    699          }
    700          
    701          /******************************************************************************
    702           * @fn          ZDSecMgrAppKeyGet
    703           *
    704           * @brief       get an APP key - option APP(MASTER or LINK) key
    705           *
    706           * @param       initNwkAddr - [in] NWK address of initiator device
    707           * @param       initExtAddr - [in] EXT address of initiator device
    708           * @param       partNwkAddr - [in] NWK address of partner device
    709           * @param       partExtAddr - [in] EXT address of partner device
    710           * @param       key         - [out] APP(MASTER or LINK) key
    711           * @param       keyType     - [out] APP(MASTER or LINK) key type
    712           *
    713           * @return      ZStatus_t
    714           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    715          uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
   \                     ZDSecMgrAppKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    716                                                           // to KEY_TYPE_APP_LINK since
    717                                                           // only specific requirement
    718                                                           // right now comes from SE profile
    719          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
   \                     ZDSecMgrAppKeyGet:
    721                                       uint8*  initExtAddr,
    722                                       uint16  partNwkAddr,
    723                                       uint8*  partExtAddr,
    724                                       uint8** key,
    725                                       uint8*  keyType )
    726          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    727            // Intentionally unreferenced parameters
    728            (void)initNwkAddr;
    729            (void)initExtAddr;
    730            (void)partNwkAddr;
    731            (void)partExtAddr;
    732          
    733            //---------------------------------------------------------------------------
    734            // note:
    735            // should use a robust mechanism to generate keys, for example
    736            // combine EXT addresses and call a hash function
    737            //---------------------------------------------------------------------------
    738            SSP_GetTrueRand( SEC_KEY_LEN, *key );
   \   000004                ; Setup parameters for call to function SSP_GetTrueRand
   \   000004   7404         MOV       A,#0x4
   \   000006   12....       LCALL     ?XSTACK_DISP0_8
   \   000009   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00000C   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00000F   7910         MOV       R1,#0x10
   \   000011   12....       LCALL     `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
    739          
    740            *keyType = ZDSecMgrAppKeyType;
   \   000014   90....       MOV       DPTR,#ZDSecMgrAppKeyType
   \   000017   E0           MOVX      A,@DPTR
   \   000018   C0E0         PUSH      A
   \   00001A   7406         MOV       A,#0x6
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000022   D0E0         POP       A
   \   000024   F0           MOVX      @DPTR,A
    741          
    742            return ZSuccess;
   \   000025   7900         MOV       R1,#0x0
   \   000027   02....       LJMP      ??Subroutine74_0 & 0xFFFF
    743          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    744          
    745          /******************************************************************************
    746           * @fn          ZDSecMgrAppKeyReq
    747           *
    748           * @brief       Process request for APP key between two devices.
    749           *
    750           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    751           *
    752           * @return      none
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrAppKeyReq:
    755          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV       A,#-0x27
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    756            APSME_TransportKeyReq_t req;
    757            uint8                   initExtAddr[Z_EXTADDR_LEN];
    758            uint16                  partNwkAddr;
    759            uint8                   key[SEC_KEY_LEN];
    760          
    761          
    762            // validate initiator and partner
    763            if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
    764                 ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
   \   00000E   EA           MOV       A,R2
   \   00000F   2405         ADD       A,#0x5
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F5..         MOV       ?V1,A
   \   000017                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000017   AC..         MOV       R4,?XSP + 0
   \   000019   AD..         MOV       R5,?XSP + 1
   \   00001B   AA..         MOV       R2,?V0
   \   00001D   FB           MOV       R3,A
   \   00001E   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000021   E9           MOV       A,R1
   \   000022   6401         XRL       A,#0x1
   \   000024   6003         JZ        $+5
   \   000026   02....       LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   \   000029   EE           MOV       A,R6
   \   00002A   2402         ADD       A,#0x2
   \   00002C   E4           CLR       A
   \   00002D   3F           ADDC      A,R7
   \   00002E   F9           MOV       R1,A
   \   00002F   0E           INC       R6
   \   000030   0E           INC       R6
   \   000031   FF           MOV       R7,A
   \   000032                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000032   740F         MOV       A,#0xf
   \   000034   12....       LCALL     ?XSTACK_DISP102_8
   \   000037   8E82         MOV       DPL,R6
   \   000039   8983         MOV       DPH,R1
   \   00003B   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00003E   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000041   E9           MOV       A,R1
   \   000042   6401         XRL       A,#0x1
   \   000044   6003         JZ        $+5
   \   000046   02....       LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    765            {
    766              // point the key to some memory
    767              req.key = key;
   \   000049   7417         MOV       A,#0x17
   \   00004B   12....       LCALL     ?XSTACK_DISP100_8
   \   00004E   7406         MOV       A,#0x6
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ??Subroutine76_0 & 0xFFFF
    768          
    769              // get an APP key - option APP (MASTER or LINK) key
    770              if ( ZDSecMgrAppKeyGet( ind->srcAddr,
    771                                      initExtAddr,
    772                                      partNwkAddr,
    773                                      ind->partExtAddr,
    774                                      &req.key,
    775                                      &req.keyType ) == ZSuccess )
   \                     ??CrossCallReturnLabel_146:
   \   000056                ; Setup parameters for call to function ZDSecMgrAppKeyGet
   \   000056   7404         MOV       A,#0x4
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   8582..       MOV       ?V2,DPL
   \   00005E   8583..       MOV       ?V3,DPH
   \   000061   78..         MOV       R0,#?V2
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7408         MOV       A,#0x8
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   8582..       MOV       ?V2,DPL
   \   00006E   8583..       MOV       ?V3,DPH
   \   000071   78..         MOV       R0,#?V2
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   7406         MOV       A,#0x6
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000083   7417         MOV       A,#0x17
   \   000085   12....       LCALL     ?XSTACK_DISP102_8
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00008F   12....       LCALL     `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
   \   000092   7408         MOV       A,#0x8
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   \   000097   E9           MOV       A,R1
   \   000098   7076         JNZ       ??ZDSecMgrAppKeyReq_0
    776              {
    777                // always secure
    778                req.nwkSecure = TRUE;
   \   00009A   740C         MOV       A,#0xc
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   7401         MOV       A,#0x1
   \   0000A1   F0           MOVX      @DPTR,A
    779                req.apsSecure = TRUE;
   \   0000A2   740B         MOV       A,#0xb
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   7401         MOV       A,#0x1
   \   0000A9   F0           MOVX      @DPTR,A
    780                req.tunnel    = NULL;
   \   0000AA   740D         MOV       A,#0xd
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   E4           CLR       A
   \   0000B0   F0           MOVX      @DPTR,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   F0           MOVX      @DPTR,A
    781          
    782                // send key to initiator device
    783                req.dstAddr   = ind->srcAddr;
   \   0000B3   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ??Subroutine76_0 & 0xFFFF
    784                req.extAddr   = ind->partExtAddr;
   \                     ??CrossCallReturnLabel_147:
   \   0000BC   7408         MOV       A,#0x8
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E5..         MOV       A,?V0
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   E5..         MOV       A,?V1
   \   0000C7   F0           MOVX      @DPTR,A
    785                req.initiator = TRUE;
   \   0000C8   740A         MOV       A,#0xa
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   7401         MOV       A,#0x1
   \   0000CF   F0           MOVX      @DPTR,A
    786                APSME_TransportKeyReq( &req );
   \   0000D0                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000D0   04           INC       A
   \   0000D1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D4   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
    787          
    788                // send key to partner device
    789                req.dstAddr   = partNwkAddr;
   \   0000D7   85..82       MOV       DPL,?XSP + 0
   \   0000DA   85..83       MOV       DPH,?XSP + 1
   \   0000DD   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   12....       LCALL     ??Subroutine76_0 & 0xFFFF
    790                req.extAddr   = initExtAddr;
   \                     ??CrossCallReturnLabel_148:
   \   0000E6   740F         MOV       A,#0xf
   \   0000E8   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EB   7408         MOV       A,#0x8
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL     ??Subroutine76_0 & 0xFFFF
    791                req.initiator = FALSE;
   \                     ??CrossCallReturnLabel_149:
   \   0000F3   740A         MOV       A,#0xa
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   E4           CLR       A
   \   0000F9   F0           MOVX      @DPTR,A
    792          
    793                APSME_TransportKeyReq( &req );
   \   0000FA                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000FA   7402         MOV       A,#0x2
   \   0000FC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FF   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
    794          
    795                // clear copy of key in RAM
    796                osal_memset( key, 0x00, SEC_KEY_LEN);
   \   000102                ; Setup parameters for call to function osal_memset
   \   000102   7C10         MOV       R4,#0x10
   \   000104   7D00         MOV       R5,#0x0
   \   000106   7900         MOV       R1,#0x0
   \   000108   7417         MOV       A,#0x17
   \   00010A   12....       LCALL     ?XSTACK_DISP101_8
   \   00010D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    797          
    798              }
    799            }
    800          }
   \                     ??ZDSecMgrAppKeyReq_0:
   \   000110   7427         MOV       A,#0x27
   \   000112   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine72_0
   \   000004                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine82_0
   \   000003                ; // Fall through to label ??Subroutine82_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    801          
    802          /******************************************************************************
    803           * @fn          ZDSecMgrSendNwkKey
    804           *
    805           * @brief       Send NWK key to device joining network.
    806           *
    807           * @param       device - [in] ZDSecMgrDevice_t, device info
    808           *
    809           * @return      ZStatus_t
    810           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    811          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendNwkKey:
    812          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV       A,#-0x22
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    813            ZStatus_t status;
    814            APSME_TransportKeyReq_t req;
    815            APSDE_FrameTunnel_t tunnel;
    816            nwkKeyDesc tmpKey;
    817          
    818            req.dstAddr   = device->nwkAddr;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   F583         MOV       DPH,A
   \   000012   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000015   7404         MOV       A,#0x4
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ??Subroutine76_0 & 0xFFFF
    819            req.extAddr   = device->extAddr;
   \                     ??CrossCallReturnLabel_150:
   \   00001D   EA           MOV       A,R2
   \   00001E   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000021   8882         MOV       DPL,R0
   \   000023   F583         MOV       DPH,A
   \   000025   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000028   740A         MOV       A,#0xa
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ??Subroutine76_0 & 0xFFFF
    820          
    821            req.keyType   = KEY_TYPE_NWK;
   \                     ??CrossCallReturnLabel_151:
   \   000030   7406         MOV       A,#0x6
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   7401         MOV       A,#0x1
   \   000037   F0           MOVX      @DPTR,A
    822          
    823            // get the Active Key into a local variable
    824            if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
    825                                     ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
   \   000038                ; Setup parameters for call to function NLME_ReadNwkKeyInfo
   \   000038   75..3A       MOV       ?V2,#0x3a
   \   00003B   75..00       MOV       ?V3,#0x0
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7413         MOV       A,#0x13
   \   000045   12....       LCALL     ?XSTACK_DISP100_8
   \   000048   88..         MOV       ?V2,R0
   \   00004A   89..         MOV       ?V3,R1
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7C11         MOV       R4,#0x11
   \   000053   7D00         MOV       R5,#0x0
   \   000055   7A00         MOV       R2,#0x0
   \   000057   7B00         MOV       R3,#0x0
   \   000059   12....       LCALL     `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
   \   00005C   7404         MOV       A,#0x4
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000061   E9           MOV       A,R1
   \   000062   600D         JZ        ??ZDSecMgrSendNwkKey_0
    826            {
    827              // set key data to all 0s if NV read fails
    828              osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
   \   000064                ; Setup parameters for call to function osal_memset
   \   000064   7C11         MOV       R4,#0x11
   \   000066   7D00         MOV       R5,#0x0
   \   000068   7900         MOV       R1,#0x0
   \   00006A   EC           MOV       A,R4
   \   00006B   12....       LCALL     ?XSTACK_DISP101_8
   \   00006E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    829            }
    830          
    831            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    832            {
    833              // set values
    834              req.keySeqNum = tmpKey.keySeqNum;
   \                     ??ZDSecMgrSendNwkKey_0:
   \   000071   7411         MOV       A,#0x11
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   E0           MOVX      A,@DPTR
   \   000077   C0E0         PUSH      A
   \   000079   7407         MOV       A,#0x7
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   D0E0         POP       A
   \   000080   F0           MOVX      @DPTR,A
    835              req.key       = tmpKey.key;
   \   000081   7412         MOV       A,#0x12
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   A882         MOV       R0,DPL
   \   000088   A983         MOV       R1,DPH
   \   00008A   7408         MOV       A,#0x8
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ??Subroutine76_0 & 0xFFFF
    836          
    837              //devtag.pro.security.todo - make sure that if there is no link key the NWK
    838              //key isn't used to secure the frame at the APS layer -- since the receiving
    839              //device may not have a NWK key yet
    840              req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_152:
   \   000092   740D         MOV       A,#0xd
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   7401         MOV       A,#0x1
   \   000099   F0           MOVX      @DPTR,A
    841          
    842              // check if using secure hop to parent
    843              if ( device->parentAddr == NLME_GetShortAddr() )
   \   00009A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00009A   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00009D   EE           MOV       A,R6
   \   00009E   2404         ADD       A,#0x4
   \   0000A0   F8           MOV       R0,A
   \   0000A1   E4           CLR       A
   \   0000A2   3F           ADDC      A,R7
   \   0000A3   F9           MOV       R1,A
   \   0000A4   8882         MOV       DPL,R0
   \   0000A6   F583         MOV       DPH,A
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   6A           XRL       A,R2
   \   0000AA   7003         JNZ       ??ZDSecMgrSendNwkKey_1
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   6B           XRL       A,R3
   \                     ??ZDSecMgrSendNwkKey_1:
   \   0000AF   7011         JNZ       ??ZDSecMgrSendNwkKey_2
    844              {
    845                req.nwkSecure = FALSE;
   \   0000B1   740E         MOV       A,#0xe
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   E4           CLR       A
   \   0000B7   F0           MOVX      @DPTR,A
    846                req.tunnel    = NULL;
   \   0000B8   740F         MOV       A,#0xf
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   E4           CLR       A
   \   0000BE   F0           MOVX      @DPTR,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   802C         SJMP      ??ZDSecMgrSendNwkKey_3
    847              }
    848              else
    849              {
    850                req.nwkSecure   = TRUE;
   \                     ??ZDSecMgrSendNwkKey_2:
   \   0000C2   740E         MOV       A,#0xe
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   7401         MOV       A,#0x1
   \   0000C9   F0           MOVX      @DPTR,A
    851                req.tunnel      = &tunnel;
   \   0000CA   740F         MOV       A,#0xf
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   E5..         MOV       A,?XSP + 0
   \   0000D1   F0           MOVX      @DPTR,A
   \   0000D2   A3           INC       DPTR
   \   0000D3   E5..         MOV       A,?XSP + 1
   \   0000D5   12....       LCALL     ?Subroutine16 & 0xFFFF
    852                req.tunnel->tna = device->parentAddr;
    853                req.tunnel->dea = device->extAddr;
    854              }
    855            }
   \                     ??CrossCallReturnLabel_10:
   \   0000D8   85..82       MOV       DPL,?XSP + 0
   \   0000DB   85..83       MOV       DPH,?XSP + 1
   \   0000DE   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000E1   F8           MOV       R0,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   F9           MOV       R1,A
   \   0000E5   7402         MOV       A,#0x2
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   E8           MOV       A,R0
   \   0000EB   F0           MOVX      @DPTR,A
   \   0000EC   A3           INC       DPTR
   \   0000ED   E9           MOV       A,R1
   \                     ??ZDSecMgrSendNwkKey_3:
   \   0000EE   F0           MOVX      @DPTR,A
    856            else
    857            {
    858              // default values
    859              //devtag.0604.verify
    860              req.nwkSecure = TRUE;
    861              req.apsSecure = FALSE;
    862              req.tunnel    = NULL;
    863          
    864              if ( device->parentAddr != NLME_GetShortAddr() )
    865              {
    866                req.dstAddr = device->parentAddr;
    867              }
    868          
    869              // send the real key
    870              if ( zgPreConfigKeys == FALSE )
    871              {
    872                req.keySeqNum = tmpKey.keySeqNum;
    873                req.key       = tmpKey.key;
    874          
    875                // check if using secure hop to to parent
    876                if ( device->parentAddr == NLME_GetShortAddr() )
    877                {
    878                  req.nwkSecure = FALSE;
    879                }
    880              }
    881              else
    882              {
    883                // this is to send the all zero key when the NWK key has been preconfigured
    884                req.key       = NULL;
    885                req.keySeqNum = 0;
    886              }
    887            }
    888          
    889            status = APSME_TransportKeyReq( &req );
   \   0000EF                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000EF   7404         MOV       A,#0x4
   \   0000F1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F4   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000F7   E9           MOV       A,R1
   \   0000F8   FE           MOV       R6,A
    890          
    891            // clear copy of key in RAM before return
    892            osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
   \   0000F9                ; Setup parameters for call to function osal_memset
   \   0000F9   7C11         MOV       R4,#0x11
   \   0000FB   7D00         MOV       R5,#0x0
   \   0000FD   7900         MOV       R1,#0x0
   \   0000FF   EC           MOV       A,R4
   \   000100   12....       LCALL     ?XSTACK_DISP101_8
   \   000103   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    893          
    894            return status;
   \   000106   EE           MOV       A,R6
   \   000107   F9           MOV       R1,A
   \   000108   7422         MOV       A,#0x22
   \   00010A   02....       LJMP      ?Subroutine3 & 0xFFFF
    895          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET
    896          
    897          /******************************************************************************
    898           * @fn          ZDSecMgrDeviceRemoveByExtAddr
    899           *
    900           * @brief       Remove device entry by its ext address.
    901           *
    902           * @param       pAddr - pointer to the extended address
    903           *
    904           * @return      ZStatus_t
    905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    906          ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
   \                     ZDSecMgrDeviceRemoveByExtAddr:
    907          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    908            ZDSecMgrEntry_t *pEntry;
    909            uint8           retValue;
    910          
    911            retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
   \   00000A                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000A   AC..         MOV       R4,?XSP + 0
   \   00000C   AD..         MOV       R5,?XSP + 1
   \   00000E   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000011   E9           MOV       A,R1
   \   000012   FE           MOV       R6,A
    912          
    913            if( retValue == ZSuccess )
   \   000013   7006         JNZ       ??ZDSecMgrDeviceRemoveByExtAddr_0
    914            {
    915              // remove device from entry data
    916              ZDSecMgrEntryFree( pEntry );
   \   000015                ; Setup parameters for call to function ZDSecMgrEntryFree
   \   000015   12....       LCALL     ?Subroutine37 & 0xFFFF
    917            }
   \                     ??CrossCallReturnLabel_113:
   \   000018   12....       LCALL     `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
    918          
    919            return retValue;
   \                     ??ZDSecMgrDeviceRemoveByExtAddr_0:
   \   00001B   EE           MOV       A,R6
   \   00001C   F9           MOV       R1,A
   \   00001D                REQUIRE ?Subroutine7
   \   00001D                ; // Fall through to label ?Subroutine7
    920          }
    921          
    922          /******************************************************************************
    923           * @fn          ZDSecMgrDeviceRemove
    924           *
    925           * @brief       Remove device from network.
    926           *
    927           * @param       device - [in] ZDSecMgrDevice_t, device info
    928           *
    929           * @return      none
    930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    931          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceRemove:
    932          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    933            APSME_RemoveDeviceReq_t remDevReq;
    934            NLME_LeaveReq_t         leaveReq;
    935            associated_devices_t*   assoc;
    936          
    937            // check if parent, remove the device
    938            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000020   EE           MOV       A,R6
   \   000021   2402         ADD       A,#0x2
   \   000023   F8           MOV       R0,A
   \   000024   E4           CLR       A
   \   000025   3F           ADDC      A,R7
   \   000026   F9           MOV       R1,A
   \   000027   E5..         MOV       A,?V0
   \   000029   6A           XRL       A,R2
   \   00002A   7003         JNZ       ??ZDSecMgrDeviceRemove_0
   \   00002C   E5..         MOV       A,?V1
   \   00002E   6B           XRL       A,R3
   \                     ??ZDSecMgrDeviceRemove_0:
   \   00002F   707C         JNZ       ??ZDSecMgrDeviceRemove_1
    939            {
    940              // this is the parent of the device
    941              leaveReq.extAddr        = device->extAddr;
   \   000031   8882         MOV       DPL,R0
   \   000033   8983         MOV       DPH,R1
   \   000035   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000038   12....       LCALL     ?Subroutine20 & 0xFFFF
    942              leaveReq.removeChildren = FALSE;
   \                     ??CrossCallReturnLabel_120:
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   E4           CLR       A
   \   00003F   F0           MOVX      @DPTR,A
    943              leaveReq.rejoin         = FALSE;
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   E4           CLR       A
   \   000046   F0           MOVX      @DPTR,A
    944          
    945              // find child association
    946              assoc = AssocGetWithExt( device->extAddr );
   \   000047                ; Setup parameters for call to function AssocGetWithExt
   \   000047   8882         MOV       DPL,R0
   \   000049   8983         MOV       DPH,R1
   \   00004B   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00004E   8B..         MOV       ?V1,R3
   \   000050   A9..         MOV       R1,?V1
    947          
    948              if ( ( assoc != NULL                            ) &&
    949                   ( assoc->nodeRelation >= CHILD_RFD         ) &&
    950                   ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
   \   000052   EA           MOV       A,R2
   \   000053   49           ORL       A,R1
   \   000054   6027         JZ        ??ZDSecMgrDeviceRemove_2
   \   000056   8A82         MOV       DPL,R2
   \   000058   8B83         MOV       DPH,R3
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   601C         JZ        ??ZDSecMgrDeviceRemove_2
   \   000061   C3           CLR       C
   \   000062   9405         SUBB      A,#0x5
   \   000064   5017         JNC       ??ZDSecMgrDeviceRemove_2
    951              {
    952                // check if associated device is authenticated
    953                if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
   \   000066   8A82         MOV       DPL,R2
   \   000068   8B83         MOV       DPH,R3
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   A2E3         MOV       C,0xE0 /* A   */.3
   \   000072   7404         MOV       A,#0x4
   \   000074   402B         JC        ??ZDSecMgrDeviceRemove_3
    954                {
    955                  leaveReq.silent = FALSE;
    956                }
    957                else
    958                {
    959                  leaveReq.silent = TRUE;
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   7401         MOV       A,#0x1
   \   00007B   8028         SJMP      ??ZDSecMgrDeviceRemove_4
    960                }
    961          
    962                NLME_LeaveReq( &leaveReq );
    963              }
    964              else if ( device->nwkAddr == NLME_GetShortAddr() )
   \                     ??ZDSecMgrDeviceRemove_2:
   \   00007D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007D   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000080   8A..         MOV       ?V0,R2
   \   000082   8B..         MOV       ?V1,R3
   \   000084   A8..         MOV       R0,?V0
   \   000086   A9..         MOV       R1,?V1
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   68           XRL       A,R0
   \   00008E   7003         JNZ       ??ZDSecMgrDeviceRemove_5
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   69           XRL       A,R1
   \                     ??ZDSecMgrDeviceRemove_5:
   \   000093   7053         JNZ       ??ZDSecMgrDeviceRemove_6
    965              {
    966                // this is when ZC wants that ZR removes itself from the network
    967                leaveReq.extAddr = NULL;
   \   000095   85..82       MOV       DPL,?XSP + 0
   \   000098   85..83       MOV       DPH,?XSP + 1
   \   00009B   E4           CLR       A
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   A3           INC       DPTR
   \   00009E   F0           MOVX      @DPTR,A
    968                leaveReq.silent = FALSE;
   \   00009F   7404         MOV       A,#0x4
   \                     ??ZDSecMgrDeviceRemove_3:
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   E4           CLR       A
    969          
    970                NLME_LeaveReq( &leaveReq );
    971              }
    972            }
   \                     ??ZDSecMgrDeviceRemove_4:
   \   0000A5   12....       LCALL     ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0000A8   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000AB   803B         SJMP      ??ZDSecMgrDeviceRemove_6
    973            else
    974            {
    975              // this is not the parent of the device
    976              remDevReq.parentAddr   = device->parentAddr;
   \                     ??ZDSecMgrDeviceRemove_1:
   \   0000AD   7405         MOV       A,#0x5
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   EA           MOV       A,R2
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   EB           MOV       A,R3
   \   0000B6   12....       LCALL     ?Subroutine16 & 0xFFFF
    977              remDevReq.childExtAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_11:
   \   0000B9   7407         MOV       A,#0x7
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ??Subroutine76_0 & 0xFFFF
    978          
    979          #if defined ( APP_TP2_TEST_MODE )
    980              if ( guTxApsSecON == TRUE )
    981              {
    982                remDevReq.apsSecure = TRUE;
    983              }
    984              else
    985              {
    986                remDevReq.apsSecure = FALSE;
    987              }
    988          
    989              APSME_RemoveDeviceReq( &remDevReq );
    990          
    991          #else
    992              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    993              {
    994                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
    995                // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
    996                // with legacy Coordinator devices which can only handle one or the other.
    997                if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   \                     ??CrossCallReturnLabel_153:
   \   0000C1   90....       MOV       DPTR,#zgApsLinkKeyType
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   6401         XRL       A,#0x1
   \   0000C7   700F         JNZ       ??ZDSecMgrDeviceRemove_7
    998                {
    999                  remDevReq.apsSecure = FALSE;
   \   0000C9   7409         MOV       A,#0x9
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E4           CLR       A
   \   0000CF   F0           MOVX      @DPTR,A
   1000          
   1001                  APSME_RemoveDeviceReq( &remDevReq );
   \   0000D0                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   0000D0   7405         MOV       A,#0x5
   \   0000D2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D5   12....       LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   1002                }
   1003          
   1004                remDevReq.apsSecure = TRUE;
   \                     ??ZDSecMgrDeviceRemove_7:
   \   0000D8   7409         MOV       A,#0x9
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   7401         MOV       A,#0x1
   \   0000DF   F0           MOVX      @DPTR,A
   1005          
   1006                APSME_RemoveDeviceReq( &remDevReq );
   \   0000E0                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   0000E0   7405         MOV       A,#0x5
   \   0000E2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E5   12....       LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   1007              }
   1008              else
   1009              {
   1010                remDevReq.apsSecure = FALSE;
   1011          
   1012                APSME_RemoveDeviceReq( &remDevReq );
   1013              }
   1014          #endif
   1015            }
   1016          }
   \                     ??ZDSecMgrDeviceRemove_6:
   \   0000E8   740A         MOV       A,#0xa
   \   0000EA   02....       LJMP      ??Subroutine86_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine70_0
   \   000006                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine87_0
   \   000003                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1017          
   1018          /******************************************************************************
   1019           * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
   1020           *
   1021           * @brief       Decide whether device is allowed.
   1022           *
   1023           * @param       device - [in] ZDSecMgrDevice_t, device info
   1024           *
   1025           * @return      ZStatus_t
   1026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateRM:
   1028          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1029            ZStatus_t status;
   1030          
   1031            status = ZSuccess;
   \   000004   7900         MOV       R1,#0x0
   1032          
   1033            (void)device;  // Intentionally unreferenced parameter
   1034          
   1035            // For test purpose, turning off the zgSecurePermitJoin flag will force
   1036            // the trust center to reject any newly joining devices by sending
   1037            // Remove-device to the parents.
   1038            if ( zgSecurePermitJoin == FALSE )
   \   000006   90....       MOV       DPTR,#zgSecurePermitJoin
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   7002         JNZ       ??ZDSecMgrDeviceValidateRM_0
   1039            {
   1040              status = ZNwkUnknownDevice;
   \   00000C   79C8         MOV       R1,#-0x38
   1041            }
   1042          
   1043          
   1044          
   1045          #if 0  // Taken out because the following functionality is only used for test
   1046                 // purpose. A more efficient (above) way is used. It can be put
   1047                 // back in if customers request for a white/black list feature.
   1048                 // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
   1049          
   1050            // The following code processes the device black list (stored device list)
   1051            // If the joining device is not part of the forbidden device list
   1052            // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
   1053            // will send Remove-device and ban the device from joining.
   1054          
   1055            uint8     index;
   1056            uint8*    restricted;
   1057          
   1058            // Look through the stored device list - used for restricted devices
   1059            for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
   1060            {
   1061              restricted = ZDSecMgrStoredDeviceList[index];
   1062          
   1063              if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
   1064              {
   1065                // return as unknown device in regards to validation
   1066                status = ZNwkUnknownDevice;
   1067          
   1068                // break from loop
   1069                index = ZDSECMGR_STORED_DEVICES;
   1070              }
   1071            }
   1072          
   1073          #endif
   1074          
   1075            return status;
   \                     ??ZDSecMgrDeviceValidateRM_0:
   \   00000E   02....       LJMP      ??Subroutine74_0 & 0xFFFF
   1076          }
   1077          
   1078          /******************************************************************************
   1079           * @fn          ZDSecMgrDeviceValidate
   1080           *
   1081           * @brief       Decide whether device is allowed.
   1082           *
   1083           * @param       device - [in] ZDSecMgrDevice_t, device info
   1084           *
   1085           * @return      ZStatus_t
   1086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1087          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidate:
   1088          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1089            ZStatus_t status;
   1090          
   1091            if ( ZDSecMgrPermitJoiningEnabled == TRUE )
   \   000004   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7007         JNZ       ??ZDSecMgrDeviceValidate_0
   1092            {
   1093              status = ZDSecMgrDeviceValidateRM( device );
   \   00000C                ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
   \   00000C   12....       LCALL     `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
   \   00000F   E9           MOV       A,R1
   \   000010   F9           MOV       R1,A
   \   000011   8002         SJMP      ??ZDSecMgrDeviceValidate_1
   1094            }
   1095            else
   1096            {
   1097              status = ZNwkUnknownDevice;
   \                     ??ZDSecMgrDeviceValidate_0:
   \   000013   79C8         MOV       R1,#-0x38
   1098            }
   1099          
   1100            return status;
   \                     ??ZDSecMgrDeviceValidate_1:
   \   000015   02....       LJMP      ??Subroutine74_0 & 0xFFFF
   1101          }
   1102          
   1103          /******************************************************************************
   1104           * @fn          ZDSecMgrDeviceJoin
   1105           *
   1106           * @brief       Try to join this device.
   1107           *
   1108           * @param       device - [in] ZDSecMgrDevice_t, device info
   1109           *
   1110           * @return      ZStatus_t
   1111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1112          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoin:
   1113          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1114            ZStatus_t status = ZSuccess;
   \   00000E   75..00       MOV       ?V4,#0x0
   1115            uint16    ami;
   1116          
   1117            // attempt to validate device that joined/rejoined without security
   1118            if ( device->secure == FALSE )
   \   000011   EA           MOV       A,R2
   \   000012   2402         ADD       A,#0x2
   \   000014   F5..         MOV       ?V0,A
   \   000016   E4           CLR       A
   \   000017   3F           ADDC      A,R7
   \   000018   F5..         MOV       ?V1,A
   \   00001A   EA           MOV       A,R2
   \   00001B   2406         ADD       A,#0x6
   \   00001D   F8           MOV       R0,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   88..         MOV       ?V2,R0
   \   000022   F5..         MOV       ?V3,A
   \   000024   8882         MOV       DPL,R0
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   7008         JNZ       ??ZDSecMgrDeviceJoin_0
   1119            {
   1120              status = ZDSecMgrDeviceValidate( device );
   \   00002B                ; Setup parameters for call to function ZDSecMgrDeviceValidate
   \   00002B   12....       LCALL     `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
   \   00002E   E9           MOV       A,R1
   \   00002F   F5..         MOV       ?V4,A
   1121            }
   1122          
   1123            if ( status == ZSuccess )
   \   000031   7056         JNZ       ??ZDSecMgrDeviceJoin_1
   1124            {
   1125              // Add the device to the address manager
   1126              ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \                     ??ZDSecMgrDeviceJoin_0:
   \   000033                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000033   A8..         MOV       R0,?XSP + 0
   \   000035   A9..         MOV       R1,?XSP + 1
   \   000037   88..         MOV       ?V6,R0
   \   000039   89..         MOV       ?V7,R1
   \   00003B   78..         MOV       R0,#?V6
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000040   85..82       MOV       DPL,?V0
   \   000043   85..83       MOV       DPH,?V1
   \   000046   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000050   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   1127          
   1128              // Only send the key to devices that have not been authenticated
   1129              if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
   1130                   ( device->secure == FALSE ) )
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   A2E2         MOV       C,0xE0 /* A   */.2
   \   000064   5023         JNC       ??ZDSecMgrDeviceJoin_1
   \   000066   85..82       MOV       DPL,?V2
   \   000069   85..83       MOV       DPH,?V3
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   701A         JNZ       ??ZDSecMgrDeviceJoin_1
   1131              {
   1132                //send the nwk key data to the joining device
   1133                status = ZDSecMgrSendNwkKey( device );
   \   00006F                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   00006F   EE           MOV       A,R6
   \   000070   FA           MOV       R2,A
   \   000071   EF           MOV       A,R7
   \   000072   FB           MOV       R3,A
   \   000073   12....       LCALL     `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
   \   000076   E9           MOV       A,R1
   \   000077   F5..         MOV       ?V4,A
   1134              }
   1135          
   1136              if ( status != ZSuccess )
   \   000079   601B         JZ        ??ZDSecMgrDeviceJoin_2
   1137              {
   1138                ZDSecMgrAddrClear( device->extAddr );
   \   00007B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00007B   85..82       MOV       DPL,?V0
   \   00007E   85..83       MOV       DPH,?V1
   \   000081   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   1139              }
   1140            }
   \                     ??CrossCallReturnLabel_111:
   \   000084   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   000087   8004         SJMP      ??ZDSecMgrDeviceJoin_3
   1141          
   1142            if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_1:
   \   000089   E5..         MOV       A,?V4
   \   00008B   6009         JZ        ??ZDSecMgrDeviceJoin_2
   1143            {
   1144              // not allowed or transport key failed, remove the device
   1145              ZDSecMgrDeviceRemove( device );
   \                     ??ZDSecMgrDeviceJoin_3:
   \   00008D                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   00008D   EE           MOV       A,R6
   \   00008E   FA           MOV       R2,A
   \   00008F   EF           MOV       A,R7
   \   000090   FB           MOV       R3,A
   \   000091   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   \   000094   8053         SJMP      ??ZDSecMgrDeviceJoin_4
   1146            }
   1147            else
   1148            {
   1149              // Pass the Trust Center Device Indication to higher layer if callback registered
   1150              if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
   \                     ??ZDSecMgrDeviceJoin_2:
   \   000096   90....       MOV       DPTR,#zdoCBFunc + 16
   \   000099   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00009C   604B         JZ        ??ZDSecMgrDeviceJoin_4
   1151              {
   1152                ZDO_TC_Device_t dev;
   1153          
   1154                dev.nwkAddr = device->nwkAddr;
   \   00009E   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ?Subroutine15 & 0xFFFF
   1155                osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_9:
   \   0000A7   F5..         MOV       ?V0,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F5..         MOV       ?V1,A
   \   0000AD   75..00       MOV       ?V2,#0x0
   \   0000B0   78..         MOV       R0,#?V0
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B5   7C08         MOV       R4,#0x8
   \   0000B7   7D00         MOV       R5,#0x0
   \   0000B9   7407         MOV       A,#0x7
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   AA82         MOV       R2,DPL
   \   0000C0   AB83         MOV       R3,DPH
   \   0000C2   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C5   7403         MOV       A,#0x3
   \   0000C7   12....       LCALL     ?DEALLOC_XSTACK8
   1156                dev.parentAddr = device->parentAddr;
   \   0000CA   8E82         MOV       DPL,R6
   \   0000CC   8F83         MOV       DPH,R7
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0000D3   740C         MOV       A,#0xc
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   1157          
   1158                zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
   \                     ??CrossCallReturnLabel_154:
   \   0000DB                ; Setup parameters for indirect call
   \   0000DB   7402         MOV       A,#0x2
   \   0000DD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E0   90....       MOV       DPTR,#zdoCBFunc + 16
   \   0000E3   12....       LCALL     ?Subroutine28 & 0xFFFF
   1159              }
   1160            }
   \                     ??CrossCallReturnLabel_29:
   \   0000E6   12....       LCALL     ?CALL_IND
   1161          
   1162            return status;
   \                     ??ZDSecMgrDeviceJoin_4:
   \   0000E9   A9..         MOV       R1,?V4
   \   0000EB   740E         MOV       A,#0xe
   \   0000ED   02....       LJMP      ?Subroutine1 & 0xFFFF
   1163          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine71_0
   \   000002                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
   1164          
   1165          /******************************************************************************
   1166           * @fn          ZDSecMgrDeviceJoinDirect
   1167           *
   1168           * @brief       Try to join this device as a direct child.
   1169           *
   1170           * @param       device - [in] ZDSecMgrDevice_t, device info
   1171           *
   1172           * @return      ZStatus_t
   1173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1174          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinDirect:
   1175          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1176            ZStatus_t status;
   1177          
   1178            status = ZDSecMgrDeviceJoin( device );
   \   000009                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000009   12....       LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   00000C   E9           MOV       A,R1
   \   00000D   F5..         MOV       ?V0,A
   1179          
   1180            if ( status == ZSuccess )
   \   00000F   7007         JNZ       ??CrossCallReturnLabel_31
   1181            {
   1182              // set association status to authenticated
   1183              ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   000011                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000011                ; Setup parameters for call to function AssocGetWithShort
   \   000011   8E82         MOV       DPL,R6
   \   000013   8F83         MOV       DPH,R7
   \   000015   12....       LCALL     ?Subroutine29 & 0xFFFF
   1184            }
   1185          
   1186            return status;
   \                     ??CrossCallReturnLabel_31:
   \   000018   A9..         MOV       R1,?V0
   \   00001A   02....       LJMP      ??Subroutine81_0 & 0xFFFF
   1187          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000006                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000006   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   \   000009   22           RET
   1188          
   1189          /******************************************************************************
   1190           * @fn          ZDSecMgrDeviceJoinFwd
   1191           *
   1192           * @brief       Forward join to Trust Center.
   1193           *
   1194           * @param       device - [in] ZDSecMgrDevice_t, device info
   1195           *
   1196           * @return      ZStatus_t
   1197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1198          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinFwd:
   1199          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1200            ZStatus_t               status;
   1201            APSME_UpdateDeviceReq_t req;
   1202          
   1203            // forward any joining device to the Trust Center -- the Trust Center will
   1204            // decide if the device is allowed to join
   1205            status = ZSuccess;
   1206          
   1207            // forward authorization to the Trust Center
   1208            req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   12....       LCALL     ?Subroutine55 & 0xFFFF
   1209            req.devAddr    = device->nwkAddr;
   \                     ??CrossCallReturnLabel_74:
   \   000016   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine12 & 0xFFFF
   1210            req.devExtAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_4:
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   1211          
   1212            // set security status, option for router to reject if policy set
   1213            if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
   \                     ??CrossCallReturnLabel_155:
   \   000025   EA           MOV       A,R2
   \   000026   2407         ADD       A,#0x7
   \   000028   F582         MOV       DPL,A
   \   00002A   E4           CLR       A
   \   00002B   3B           ADDC      A,R3
   \   00002C   F583         MOV       DPH,A
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   A2E7         MOV       C,0xE0 /* A   */.7
   \   000031   502E         JNC       ??ZDSecMgrDeviceJoinFwd_0
   1214            {
   1215              if ( device->devStatus & DEV_REJOIN_STATUS )
   \   000033   A2E6         MOV       C,0xE0 /* A   */.6
   \   000035   5021         JNC       ??ZDSecMgrDeviceJoinFwd_1
   1216              {
   1217                if ( device->secure == TRUE )
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   6401         XRL       A,#0x1
   \   000044   7009         JNZ       ??ZDSecMgrDeviceJoinFwd_2
   1218                {
   1219                  req.status = APSME_UD_HIGH_SECURED_REJOIN;
   \   000046   7406         MOV       A,#0x6
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   7404         MOV       A,#0x4
   \   00004D   803D         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1220                }
   1221                else
   1222                {
   1223                  req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_2:
   \   00004F   7406         MOV       A,#0x6
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   7407         MOV       A,#0x7
   \   000056   8034         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1224                }
   1225              }
   1226              else
   1227              {
   1228                req.status = APSME_UD_HIGH_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_1:
   \   000058   7406         MOV       A,#0x6
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   7405         MOV       A,#0x5
   \   00005F   802B         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1229              }
   1230            }
   1231            else
   1232            {
   1233              if ( device->devStatus & DEV_REJOIN_STATUS )
   \                     ??ZDSecMgrDeviceJoinFwd_0:
   \   000061   A2E6         MOV       C,0xE0 /* A   */.6
   \   000063   5020         JNC       ??ZDSecMgrDeviceJoinFwd_4
   1234              {
   1235                if ( device->secure == TRUE )
   \   000065   8A82         MOV       DPL,R2
   \   000067   8B83         MOV       DPH,R3
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   6401         XRL       A,#0x1
   \   000072   7008         JNZ       ??ZDSecMgrDeviceJoinFwd_5
   1236                {
   1237                  req.status = APSME_UD_STANDARD_SECURED_REJOIN;
   \   000074   7406         MOV       A,#0x6
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   E4           CLR       A
   \   00007A   8010         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1238                }
   1239                else
   1240                {
   1241                  req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_5:
   \   00007C   7406         MOV       A,#0x6
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   7403         MOV       A,#0x3
   \   000083   8007         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1242                }
   1243              }
   1244              else
   1245              {
   1246                req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_4:
   \   000085   7406         MOV       A,#0x6
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   7401         MOV       A,#0x1
   1247              }
   1248            }
   \                     ??ZDSecMgrDeviceJoinFwd_3:
   \   00008C   12....       LCALL     ?Subroutine55 & 0xFFFF
   1249          
   1250            // set association status to authenticated
   1251            ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \                     ??CrossCallReturnLabel_75:
   \   00008F   12....       LCALL     ?Subroutine29 & 0xFFFF
   1252          
   1253          #if defined ( APP_TP2_TEST_MODE )
   1254            if ( guTxApsSecON == TRUE )
   1255            {
   1256              req.apsSecure = TRUE;
   1257            }
   1258            else
   1259            {
   1260              req.apsSecure = FALSE;
   1261            }
   1262          
   1263            // send and APSME_UPDATE_DEVICE request to the trust center
   1264            status = APSME_UpdateDeviceReq( &req );
   1265          
   1266          #else
   1267            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1268            {
   1269              // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1270              // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1271              // with legacy Coordinator devices which can only handle one or the other.
   1272              if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   \                     ??CrossCallReturnLabel_32:
   \   000092   90....       MOV       DPTR,#zgApsLinkKeyType
   \   000095   E0           MOVX      A,@DPTR
   \   000096   6401         XRL       A,#0x1
   \   000098   7009         JNZ       ??CrossCallReturnLabel_18
   1273              {
   1274                req.apsSecure = FALSE;
   \   00009A   7407         MOV       A,#0x7
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E4           CLR       A
   \   0000A0   12....       LCALL     ?Subroutine21 & 0xFFFF
   1275          
   1276                // send and APSME_UPDATE_DEVICE request to the trust center
   1277                status = APSME_UpdateDeviceReq( &req );
   1278              }
   1279          
   1280              // send the message APS encrypted
   1281              req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_18:
   \   0000A3   7407         MOV       A,#0x7
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   7401         MOV       A,#0x1
   \   0000AA   12....       LCALL     ?Subroutine21 & 0xFFFF
   1282          
   1283              // send and APSME_UPDATE_DEVICE request to the trust center
   1284              status = APSME_UpdateDeviceReq( &req );
   1285            }
   1286            else
   1287            {
   1288              req.apsSecure = FALSE;
   1289          
   1290              // send and APSME_UPDATE_DEVICE request to the trust center
   1291              status = APSME_UpdateDeviceReq( &req );
   1292            }
   1293          #endif
   1294          
   1295            return status;
   \                     ??CrossCallReturnLabel_19:
   \   0000AD   02....       LJMP      ?Subroutine4 & 0xFFFF
   1296          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00000C   7404         MOV       A,#0x4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7408         MOV       A,#0x8
   \   000002                REQUIRE ??Subroutine86_0
   \   000002                ; // Fall through to label ??Subroutine86_0
   1297          
   1298          /******************************************************************************
   1299           * @fn          ZDSecMgrDeviceNew
   1300           *
   1301           * @brief       Process a new device.
   1302           *
   1303           * @param       device - [in] ZDSecMgrDevice_t, device info
   1304           *
   1305           * @return      ZStatus_t
   1306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1307          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
   \                     ZDSecMgrDeviceNew:
   1308          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1309            ZStatus_t status;
   1310          
   1311            if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1312                || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   1313            {
   1314              // try to join this device
   1315              status = ZDSecMgrDeviceJoinDirect( joiner );
   1316            }
   1317            else
   1318            {
   1319              status = ZDSecMgrDeviceJoinFwd( joiner );
   1320            }
   1321          
   1322            return status;
   \   000004                ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
   \   000004   12....       LCALL     `??ZDSecMgrDeviceJoinFwd::?relay`; Banked call to: ZDSecMgrDeviceJoinFwd
   \   000007   80..         SJMP      ??Subroutine74_0
   1323          }
   1324          
   1325          /******************************************************************************
   1326           * @fn          ZDSecMgrAssocDeviceAuth
   1327           *
   1328           * @brief       Set associated device status to authenticated
   1329           *
   1330           * @param       assoc - [in, out] associated_devices_t
   1331           *
   1332           * @return      none
   1333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1334          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
   \                     ZDSecMgrAssocDeviceAuth:
   1335          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1336            if ( assoc != NULL )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   600D         JZ        ??ZDSecMgrAssocDeviceAuth_0
   1337            {
   1338              assoc->devStatus |= DEV_SEC_AUTH_STATUS;
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   D2E3         SETB      0xE0 /* A   */.3
   \   000014   F0           MOVX      @DPTR,A
   1339            }
   1340          }
   \                     ??ZDSecMgrAssocDeviceAuth_0:
   \   000015   80..         SJMP      ??Subroutine74_0
   1341          
   1342          /******************************************************************************
   1343           * @fn          ZDSecMgrAuthNwkKey
   1344           *
   1345           * @brief       Handle next step in authentication process
   1346           *
   1347           * @param       none
   1348           *
   1349           * @return      none
   1350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1351          void ZDSecMgrAuthNwkKey()
   \                     ZDSecMgrAuthNwkKey:
   1352          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1353            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   700C         JNZ       ??ZDSecMgrAuthNwkKey_0
   1354            {
   1355              // inform ZDO that device has been authenticated
   1356              osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A80         MOV       R2,#-0x80
   \   00000E   7B00         MOV       R3,#0x0
   \   000010   90....       MOV       DPTR,#ZDAppTaskID
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   1357            }
   1358          }
   \                     ??ZDSecMgrAuthNwkKey_0:
   \   000018   80..         SJMP      ??Subroutine74_0
   1359          
   1360          /******************************************************************************
   1361           * PUBLIC FUNCTIONS
   1362           */
   1363          /******************************************************************************
   1364           * @fn          ZDSecMgrInit
   1365           *
   1366           * @brief       Initialize ZigBee Device Security Manager.
   1367           *
   1368           * @param       state - device initialization state
   1369           *
   1370           * @return      none
   1371           */
   1372          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1373          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
   1374          void ZDSecMgrAddrMgrCB( uint8           update,
   1375                                  AddrMgrEntry_t* newEntry,
   1376                                  AddrMgrEntry_t* oldEntry )
   1377          {
   1378            (void)update;
   1379            (void)newEntry;
   1380            (void)oldEntry;
   1381          }
   1382          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1383          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1384          void ZDSecMgrInit(uint8 state)
   \                     ZDSecMgrInit:
   1385          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1386            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1387            {
   1388              // initialize sub modules
   1389              ZDSecMgrEntryInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrEntryInit
   \   000005   12....       LCALL     `??ZDSecMgrEntryInit::?relay`; Banked call to: ZDSecMgrEntryInit
   1390          
   1391              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1392              {
   1393                APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
   1394              }
   1395          
   1396              // register with Address Manager
   1397          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1398              AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
   1399          #endif
   1400            }
   1401          
   1402            if ( ZG_SECURE_ENABLED )
   1403            {
   1404              if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1405                   || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   1406              {
   1407                // setup joining permissions
   1408                ZDSecMgrPermitJoiningEnabled = TRUE;
   1409                ZDSecMgrPermitJoiningTimed   = FALSE;
   1410              }
   1411            }
   1412          
   1413            // configure security based on security mode and type of device
   1414            ZDSecMgrConfig();
   \   000008                ; Setup parameters for call to function SSP_Init
   \   000008   12....       LCALL     `??SSP_Init::?relay`; Banked call to: SSP_Init
   \   00000B                ; Setup parameters for call to function APSME_SecurityCM_ED
   \   00000B   12....       LCALL     `??APSME_SecurityCM_ED::?relay`; Banked call to: APSME_SecurityCM_ED
   1415          }
   \   00000E   02....       LJMP      ??Subroutine81_0 & 0xFFFF
   1416          
   1417          /******************************************************************************
   1418           * @fn          ZDSecMgrConfig
   1419           *
   1420           * @brief       Configure ZigBee Device Security Manager.
   1421           *
   1422           * @param       none
   1423           *
   1424           * @return      none
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          void ZDSecMgrConfig( void )
   \                     ZDSecMgrConfig:
   1427          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1428            if ( ZG_SECURE_ENABLED )
   1429            {
   1430              SSP_Init();
   \   000004                ; Setup parameters for call to function SSP_Init
   \   000004   12....       LCALL     `??SSP_Init::?relay`; Banked call to: SSP_Init
   1431          
   1432              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1433              {
   1434                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1435                {
   1436                  // COMMERCIAL MODE - COORDINATOR DEVICE
   1437                  APSME_SecurityCM_CD();
   1438                }
   1439                else if ( ZSTACK_ROUTER_BUILD )
   1440                {
   1441                  // COMMERCIAL MODE - ROUTER DEVICE
   1442                  APSME_SecurityCM_RD();
   1443                }
   1444                else
   1445                {
   1446                  // COMMERCIAL MODE - END DEVICE
   1447                  APSME_SecurityCM_ED();
   \   000007                ; Setup parameters for call to function APSME_SecurityCM_ED
   \   000007   12....       LCALL     `??APSME_SecurityCM_ED::?relay`; Banked call to: APSME_SecurityCM_ED
   1448                }
   1449              }
   1450              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1451              {
   1452                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1453                {
   1454                  // RESIDENTIAL MODE - COORDINATOR DEVICE
   1455                  APSME_SecurityRM_CD();
   1456                }
   1457                else if ( ZSTACK_ROUTER_BUILD )
   1458                {
   1459                  // RESIDENTIAL MODE - ROUTER DEVICE
   1460                  APSME_SecurityRM_RD();
   1461                }
   1462                else
   1463                {
   1464                  // RESIDENTIAL MODE - END DEVICE
   1465                  APSME_SecurityRM_ED();
   1466                }
   1467              }
   1468            }
   1469            else
   1470            {
   1471              // NO SECURITY
   1472              APSME_SecurityNM();
   1473            }
   1474          }
   \   00000A   80..         SJMP      ??Subroutine74_0
   1475          
   1476          /******************************************************************************
   1477           * @fn          ZDSecMgrPermitJoining
   1478           *
   1479           * @brief       Process request to change joining permissions.
   1480           *
   1481           * @param       duration - [in] timed duration for join in seconds
   1482           *                         - 0x00 not allowed
   1483           *                         - 0xFF allowed without timeout
   1484           *
   1485           * @return      uint8 - success(TRUE:FALSE)
   1486           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1487          uint8 ZDSecMgrPermitJoining( uint8 duration )
   \                     ZDSecMgrPermitJoining:
   1488          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
   1489            uint8 accept;
   1490          
   1491            ZDSecMgrPermitJoiningTimed = FALSE;
   \   000006   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   1492          
   1493            if ( duration > 0 )
   \   00000B   E9           MOV       A,R1
   \   00000C   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   600F         JZ        ??ZDSecMgrPermitJoining_0
   1494            {
   1495              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   000011   7401         MOV       A,#0x1
   \   000013   F0           MOVX      @DPTR,A
   1496          
   1497              if ( duration != 0xFF )
   \   000014   74FF         MOV       A,#-0x1
   \   000016   68           XRL       A,R0
   \   000017   6009         JZ        ??ZDSecMgrPermitJoining_1
   1498              {
   1499                ZDSecMgrPermitJoiningTimed = TRUE;
   \   000019   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   00001C   7401         MOV       A,#0x1
   \   00001E   8001         SJMP      ??ZDSecMgrPermitJoining_2
   1500              }
   1501            }
   1502            else
   1503            {
   1504              ZDSecMgrPermitJoiningEnabled = FALSE;
   \                     ??ZDSecMgrPermitJoining_0:
   \   000020   E4           CLR       A
   \                     ??ZDSecMgrPermitJoining_2:
   \   000021   F0           MOVX      @DPTR,A
   1505            }
   1506          
   1507            accept = TRUE;
   1508          
   1509            return accept;
   \                     ??ZDSecMgrPermitJoining_1:
   \   000022   7901         MOV       R1,#0x1
   \   000024   80..         SJMP      ??Subroutine74_0
   1510          }
   1511          
   1512          /******************************************************************************
   1513           * @fn          ZDSecMgrPermitJoiningTimeout
   1514           *
   1515           * @brief       Process permit joining timeout
   1516           *
   1517           * @param       none
   1518           *
   1519           * @return      none
   1520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1521          void ZDSecMgrPermitJoiningTimeout( void )
   \                     ZDSecMgrPermitJoiningTimeout:
   1522          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1523            if ( ZDSecMgrPermitJoiningTimed == TRUE )
   \   000004   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7009         JNZ       ??ZDSecMgrPermitJoiningTimeout_0
   1524            {
   1525              ZDSecMgrPermitJoiningEnabled = FALSE;
   \   00000C   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   1526              ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000011   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000014   F0           MOVX      @DPTR,A
   1527            }
   1528          }
   \                     ??ZDSecMgrPermitJoiningTimeout_0:
   \   000015   80..         SJMP      ??Subroutine74_0
   1529          
   1530          /******************************************************************************
   1531           * @fn          ZDSecMgrNewDeviceEvent
   1532           *
   1533           * @brief       Process a the new device event, if found reset new device
   1534           *              event/timer.
   1535           *
   1536           * @param       ShortAddr - of New Device to process
   1537           *
   1538           * @return      uint8 - found(TRUE:FALSE)
   1539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1540          uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
   \                     ZDSecMgrNewDeviceEvent:
   1541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1542            uint8                 found;
   1543            ZDSecMgrDevice_t      device;
   1544            AddrMgrEntry_t        addrEntry;
   1545            associated_devices_t* assoc;
   1546            ZStatus_t             status;
   1547          
   1548            // initialize return results
   1549            found = FALSE;
   \   00000A   75..00       MOV       ?V0,#0x0
   1550          
   1551            assoc = AssocGetWithShort( ShortAddr );
   \   00000D                ; Setup parameters for call to function AssocGetWithShort
   \   00000D   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AE..         MOV       R6,?V2
   \   000016   AF..         MOV       R7,?V3
   1552          
   1553            if ( assoc != NULL )
   \   000018   EA           MOV       A,R2
   \   000019   4F           ORL       A,R7
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
   1554            {
   1555              // device found
   1556              found = TRUE;
   \   00001F   75..01       MOV       ?V0,#0x1
   1557          
   1558              // check for preconfigured security
   1559              if ( zgPreConfigKeys == TRUE )
   \   000022   90....       MOV       DPTR,#zgPreConfigKeys
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6401         XRL       A,#0x1
   \   000028   7003         JNZ       ??ZDSecMgrNewDeviceEvent_1
   1560              {
   1561                // set association status to authenticated
   1562                ZDSecMgrAssocDeviceAuth( assoc );
   \   00002A                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002A   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1563              }
   1564          
   1565              // set up device info
   1566              addrEntry.user  = ADDRMGR_USER_DEFAULT;
   \                     ??ZDSecMgrNewDeviceEvent_1:
   \   00002D   7408         MOV       A,#0x8
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
   1567              addrEntry.index = assoc->addrIdx;
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   1568              AddrMgrEntryGet( &addrEntry );
   \                     ??CrossCallReturnLabel_156:
   \   000043                ; Setup parameters for call to function AddrMgrEntryGet
   \   000043   7408         MOV       A,#0x8
   \   000045   12....       LCALL     ?XSTACK_DISP101_8
   \   000048   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   1569          
   1570              device.nwkAddr    = assoc->shortAddr;
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000052   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   1571              device.extAddr    = addrEntry.extAddr;
   \                     ??CrossCallReturnLabel_157:
   \   000055   740B         MOV       A,#0xb
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   A882         MOV       R0,DPL
   \   00005C   A983         MOV       R1,DPH
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   1572              device.parentAddr = NLME_GetShortAddr();
   \                     ??CrossCallReturnLabel_158:
   \   000066                ; Setup parameters for call to function NLME_GetShortAddr
   \   000066   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   1573          
   1574              // the new device performed Secured Rejoin
   1575              if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
   1576                   ( assoc->devStatus & DEV_REJOIN_STATUS ) )
   \                     ??CrossCallReturnLabel_139:
   \   000071   EE           MOV       A,R6
   \   000072   2405         ADD       A,#0x5
   \   000074   F8           MOV       R0,A
   \   000075   E4           CLR       A
   \   000076   3F           ADDC      A,R7
   \   000077   F9           MOV       R1,A
   \   000078   E8           MOV       A,R0
   \   000079   FE           MOV       R6,A
   \   00007A   E9           MOV       A,R1
   \   00007B   FF           MOV       R7,A
   \   00007C   8882         MOV       DPL,R0
   \   00007E   F583         MOV       DPH,A
   \   000080   E0           MOVX      A,@DPTR
   \   000081   5460         ANL       A,#0x60
   \   000083   6460         XRL       A,#0x60
   \   000085   7009         JNZ       ??ZDSecMgrNewDeviceEvent_2
   1577              {
   1578                device.secure     = TRUE;
   \   000087   7406         MOV       A,#0x6
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   7401         MOV       A,#0x1
   \   00008E   8006         SJMP      ??ZDSecMgrNewDeviceEvent_3
   1579              }
   1580              else
   1581              {
   1582                device.secure     = FALSE;
   \                     ??ZDSecMgrNewDeviceEvent_2:
   \   000090   7406         MOV       A,#0x6
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   E4           CLR       A
   \                     ??ZDSecMgrNewDeviceEvent_3:
   \   000096   F0           MOVX      @DPTR,A
   1583              }
   1584              device.devStatus  = assoc->devStatus;
   \   000097   8882         MOV       DPL,R0
   \   000099   8983         MOV       DPH,R1
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   C0E0         PUSH      A
   \   00009E   7407         MOV       A,#0x7
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP       A
   \   0000A5   12....       LCALL     ??Subroutine79_0 & 0xFFFF
   1585          
   1586              // process new device
   1587              status = ZDSecMgrDeviceNew( &device );
   1588          
   1589              if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_187:
   \   0000A8   12....       LCALL     `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
   \   0000AB   E9           MOV       A,R1
   \   0000AC   700A         JNZ       ??ZDSecMgrNewDeviceEvent_4
   1590              {
   1591                assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
   \   0000AE   8E82         MOV       DPL,R6
   \   0000B0   8F83         MOV       DPH,R7
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   C2E2         CLR       0xE0 /* A   */.2
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   8018         SJMP      ??ZDSecMgrNewDeviceEvent_0
   1592              }
   1593              else
   1594              {
   1595                // Clear SECURITY bit from Address Manager
   1596                ZDSecMgrAddrClear( addrEntry.extAddr );
   \                     ??ZDSecMgrNewDeviceEvent_4:
   \   0000B8                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   0000B8   740B         MOV       A,#0xb
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   AA82         MOV       R2,DPL
   \   0000BF   AB83         MOV       R3,DPH
   \   0000C1   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   1597          
   1598                // Remove the Association completely
   1599                AssocRemove( addrEntry.extAddr );
   \   0000C4                ; Setup parameters for call to function AssocRemove
   \   0000C4   740B         MOV       A,#0xb
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   AA82         MOV       R2,DPL
   \   0000CB   AB83         MOV       R3,DPH
   \   0000CD   12....       LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
   1600              }
   1601            }
   1602          
   1603            return found;
   \                     ??ZDSecMgrNewDeviceEvent_0:
   \   0000D0   A9..         MOV       R1,?V0
   \   0000D2   7415         MOV       A,#0x15
   \   0000D4   02....       LJMP      ?Subroutine3 & 0xFFFF
   1604          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET
   1605          
   1606          /******************************************************************************
   1607           * @fn          ZDSecMgrTCExtAddrCheck
   1608           *
   1609           * @brief       Verifies if received ext. address matches TC ext. address.
   1610           *
   1611           * @param       extAddr - Extended address to be verified.
   1612           *
   1613           * @return      TRUE - extended address matches
   1614           *              FALSE - otherwise
   1615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1616          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
   \                     ZDSecMgrTCExtAddrCheck:
   1617          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1618            uint8  lookup[Z_EXTADDR_LEN];
   1619            APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   7A00         MOV       R2,#0x0
   \   000014   7B00         MOV       R3,#0x0
   \   000016   79AB         MOV       R1,#-0x55
   \   000018   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1620            return osal_ExtAddrEqual( extAddr, lookup );
   \   00001B                ; Setup parameters for call to function sAddrExtCmp
   \   00001B   AC..         MOV       R4,?XSP + 0
   \   00001D   AD..         MOV       R5,?XSP + 1
   \   00001F   EE           MOV       A,R6
   \   000020   FA           MOV       R2,A
   \   000021   EF           MOV       A,R7
   \   000022   FB           MOV       R3,A
   \   000023   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000026                REQUIRE ?Subroutine8
   \   000026                ; // Fall through to label ?Subroutine8
   1621          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7408         MOV       A,#0x8
   \   000002   02....       LJMP      ??Subroutine80_0 & 0xFFFF
   1622          
   1623          /******************************************************************************
   1624           * @fn          ZDSecMgrTCDataLoad
   1625           *
   1626           * @brief       Stores the address of TC into address manager.
   1627           *
   1628           * @param       extAddr - Extended address to be verified.
   1629           *
   1630           * @return      none
   1631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1632          void ZDSecMgrTCDataLoad( uint8* extAddr )
   \                     ZDSecMgrTCDataLoad:
   1633          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1634            uint16 ami;
   1635            AddrMgrEntry_t entry;
   1636          
   1637            // lookup using TC short address
   1638            entry.user    = ADDRMGR_USER_DEFAULT;
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   1639            osal_cpyExtAddr( entry.extAddr, extAddr );
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   EA           MOV       A,R2
   \   000016   FC           MOV       R4,A
   \   000017   EB           MOV       A,R3
   \   000018   FD           MOV       R5,A
   \   000019   7405         MOV       A,#0x5
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   AA82         MOV       R2,DPL
   \   000020   AB83         MOV       R3,DPH
   \   000022   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1640          
   1641            // Verify if TC address has been added to Address Manager
   1642            if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
   \   000025                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000025   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000028   E9           MOV       A,R1
   \   000029   7028         JNZ       ??ZDSecMgrTCDataLoad_0
   \   00002B                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP101_8
   \   000030   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000033   E9           MOV       A,R1
   \   000034   6401         XRL       A,#0x1
   \   000036   601B         JZ        ??ZDSecMgrTCDataLoad_0
   1643            {
   1644              ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
   \   000038                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000038   A8..         MOV       R0,?XSP + 0
   \   00003A   A9..         MOV       R1,?XSP + 1
   \   00003C   88..         MOV       ?V0,R0
   \   00003E   89..         MOV       ?V1,R1
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   EE           MOV       A,R6
   \   000046   FC           MOV       R4,A
   \   000047   EF           MOV       A,R7
   \   000048   FD           MOV       R5,A
   \   000049   7A00         MOV       R2,#0x0
   \   00004B   7B00         MOV       R3,#0x0
   \   00004D   12....       LCALL     ?Subroutine50 & 0xFFFF
   1645            }
   \                     ??CrossCallReturnLabel_66:
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
   1646          }
   \                     ??ZDSecMgrTCDataLoad_0:
   \   000053   740F         MOV       A,#0xf
   \   000055   02....       LJMP      ??Subroutine86_0 & 0xFFFF
   1647          
   1648          /******************************************************************************
   1649           * @fn          ZDSecMgrTransportKeyInd
   1650           *
   1651           * @brief       Process the ZDO_TransportKeyInd_t message.
   1652           *
   1653           * @param       ind - [in] ZDO_TransportKeyInd_t indication
   1654           *
   1655           * @return      none
   1656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000006                REQUIRE ??Subroutine76_0
   \   000006                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1657          void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
   \                     ZDSecMgrTransportKeyInd:
   1658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   1659            uint8 index;
   1660            uint8 zgPreConfigKey[SEC_KEY_LEN];
   1661          
   1662            ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
   \   00000E   EA           MOV       A,R2
   \   00000F   2416         ADD       A,#0x16
   \   000011   FE           MOV       R6,A
   \   000012   E4           CLR       A
   \   000013   35..         ADDC      A,?V3
   \   000015   FF           MOV       R7,A
   \   000016                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   000016   EE           MOV       A,R6
   \   000017   FA           MOV       R2,A
   \   000018   EF           MOV       A,R7
   \   000019   FB           MOV       R3,A
   \   00001A   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1663            // check for distributed security
   1664            if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
   1665            {
   1666              ZDSecMgrPermitJoiningEnabled = TRUE;
   1667            }
   1668          
   1669            // load Trust Center data if needed
   1670            ZDSecMgrTCDataLoad( ind->srcExtAddr );
   \   00001D                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   00001D   EE           MOV       A,R6
   \   00001E   FA           MOV       R2,A
   \   00001F   EF           MOV       A,R7
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
   1671          
   1672            if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   1673                 ( ind->keyType == 6            ) )
   \   000024   85..82       MOV       DPL,?V2
   \   000027   85..83       MOV       DPH,?V3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   E5..         MOV       A,?V2
   \   000032   2406         ADD       A,#0x6
   \   000034   F5..         MOV       ?V0,A
   \   000036   E4           CLR       A
   \   000037   35..         ADDC      A,?V3
   \   000039   F5..         MOV       ?V1,A
   \   00003B   7401         MOV       A,#0x1
   \   00003D   68           XRL       A,R0
   \   00003E   6008         JZ        ??ZDSecMgrTransportKeyInd_0
   \   000040   7406         MOV       A,#0x6
   \   000042   68           XRL       A,R0
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??ZDSecMgrTransportKeyInd_1 & 0xFFFF
   1674            {
   1675              // check for dummy NWK key (all zeros)
   1676              for ( index = 0;
   \                     ??ZDSecMgrTransportKeyInd_0:
   \   000048   7800         MOV       R0,#0x0
   \                     ??ZDSecMgrTransportKeyInd_2:
   \   00004A   E8           MOV       A,R0
   \   00004B   FA           MOV       R2,A
   \   00004C   E5..         MOV       A,?V2
   \   00004E   2A           ADD       A,R2
   \   00004F   F582         MOV       DPL,A
   \   000051   E4           CLR       A
   \   000052   35..         ADDC      A,?V3
   \   000054   F583         MOV       DPH,A
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   7007         JNZ       ??ZDSecMgrTransportKeyInd_3
   1677                    ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
   1678                    index++ );
   \   00005F   08           INC       R0
   \   000060   E8           MOV       A,R0
   \   000061   C3           CLR       C
   \   000062   9410         SUBB      A,#0x10
   \   000064   40E4         JC        ??ZDSecMgrTransportKeyInd_2
   1679          
   1680              if ( index == SEC_KEY_LEN )
   \                     ??ZDSecMgrTransportKeyInd_3:
   \   000066   7410         MOV       A,#0x10
   \   000068   68           XRL       A,R0
   \   000069   7031         JNZ       ??ZDSecMgrTransportKeyInd_4
   1681              {
   1682                // load preconfigured key - once!!
   1683                if ( !_NIB.nwkKeyLoaded )
   \   00006B   90....       MOV       DPTR,#_NIB + 61
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   7054         JNZ       ??ZDSecMgrTransportKeyInd_5
   1684                {
   1685                  ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000071                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?XSTACK_DISP102_8
   \   000076   7A62         MOV       R2,#0x62
   \   000078   7B00         MOV       R3,#0x0
   \   00007A   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   1686                  SSP_UpdateNwkKey( zgPreConfigKey, 0 );
   \   00007D                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00007D   7900         MOV       R1,#0x0
   \   00007F   7404         MOV       A,#0x4
   \   000081   12....       LCALL     ?XSTACK_DISP101_8
   \   000084   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1687                  SSP_SwitchNwkKey( 0 );
   \   000087                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000087   7900         MOV       R1,#0x0
   \   000089   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1688          
   1689                  // clear local copy of key
   1690                  osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00008C                ; Setup parameters for call to function osal_memset
   \   00008C   7C10         MOV       R4,#0x10
   \   00008E   7D00         MOV       R5,#0x0
   \   000090   7900         MOV       R1,#0x0
   \   000092   7404         MOV       A,#0x4
   \   000094   12....       LCALL     ?XSTACK_DISP101_8
   \   000097   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00009A   8029         SJMP      ??ZDSecMgrTransportKeyInd_5
   1691                }
   1692              }
   1693              else
   1694              {
   1695                SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
   \                     ??ZDSecMgrTransportKeyInd_4:
   \   00009C   E5..         MOV       A,?V2
   \   00009E   2405         ADD       A,#0x5
   \   0000A0   F8           MOV       R0,A
   \   0000A1   E4           CLR       A
   \   0000A2   35..         ADDC      A,?V3
   \   0000A4   F9           MOV       R1,A
   \   0000A5   E8           MOV       A,R0
   \   0000A6   FE           MOV       R6,A
   \   0000A7   E9           MOV       A,R1
   \   0000A8   FF           MOV       R7,A
   \   0000A9                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000A9   8882         MOV       DPL,R0
   \   0000AB   F583         MOV       DPH,A
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F9           MOV       R1,A
   \   0000AF   AA..         MOV       R2,?V0
   \   0000B1   AB..         MOV       R3,?V1
   \   0000B3   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1696                if ( !_NIB.nwkKeyLoaded )
   \   0000B6   90....       MOV       DPTR,#_NIB + 61
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   7009         JNZ       ??ZDSecMgrTransportKeyInd_5
   1697                {
   1698                  SSP_SwitchNwkKey( ind->keySeqNum );
   \   0000BC                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000BC   8E82         MOV       DPL,R6
   \   0000BE   8F83         MOV       DPH,R7
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F9           MOV       R1,A
   \   0000C2   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1699                }
   1700              }
   1701          
   1702              // handle next step in authentication process
   1703              ZDSecMgrAuthNwkKey();
   \                     ??ZDSecMgrTransportKeyInd_5:
   \   0000C5                ; Setup parameters for call to function ZDSecMgrAuthNwkKey
   \   0000C5   12....       LCALL     `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
   \   0000C8   8070         SJMP      ??ZDSecMgrTransportKeyInd_6
   1704            }
   1705            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrTransportKeyInd_1:
   \   0000CA   7404         MOV       A,#0x4
   \   0000CC   68           XRL       A,R0
   \   0000CD   606B         JZ        ??ZDSecMgrTransportKeyInd_6
   1706            {
   1707              // This should not happen because TCLK should not be Tx
   1708            }
   1709            else if ( ind->keyType == KEY_TYPE_APP_LINK )
   \   0000CF   7403         MOV       A,#0x3
   \   0000D1   68           XRL       A,R0
   \   0000D2   7066         JNZ       ??ZDSecMgrTransportKeyInd_6
   1710            {
   1711              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1712              {
   1713                uint16           ami;
   1714                ZDSecMgrEntry_t* entry;
   1715          
   1716                // get the address index
   1717                if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
   \   0000D4                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   0000D4   7402         MOV       A,#0x2
   \   0000D6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D9   EE           MOV       A,R6
   \   0000DA   FA           MOV       R2,A
   \   0000DB   EF           MOV       A,R7
   \   0000DC   FB           MOV       R3,A
   \   0000DD   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   0000E0   E9           MOV       A,R1
   \   0000E1   6029         JZ        ??ZDSecMgrTransportKeyInd_7
   1718                {
   1719                  // store new EXT address
   1720                  ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   \   0000E3                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   0000E3   7402         MOV       A,#0x2
   \   0000E5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E8   88..         MOV       ?V2,R0
   \   0000EA   89..         MOV       ?V3,R1
   \   0000EC   78..         MOV       R0,#?V2
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F1   EE           MOV       A,R6
   \   0000F2   FC           MOV       R4,A
   \   0000F3   EF           MOV       A,R7
   \   0000F4   FD           MOV       R5,A
   \   0000F5   7AFE         MOV       R2,#-0x2
   \   0000F7   7BFF         MOV       R3,#-0x1
   \   0000F9   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000FC   12....       LCALL     ?DEALLOC_XSTACK8
   1721                  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0000FF                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0000FF   7D00         MOV       R5,#0x0
   \   000101   7C00         MOV       R4,#0x0
   \   000103   7900         MOV       R1,#0x0
   \   000105   EE           MOV       A,R6
   \   000106   FA           MOV       R2,A
   \   000107   EF           MOV       A,R7
   \   000108   FB           MOV       R3,A
   \   000109   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   1722                }
   1723          
   1724                ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrTransportKeyInd_7:
   \   00010C                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   00010C   AC..         MOV       R4,?XSP + 0
   \   00010E   AD..         MOV       R5,?XSP + 1
   \   000110   7402         MOV       A,#0x2
   \   000112   12....       LCALL     ?XSTACK_DISP0_8
   \   000115   12....       LCALL     ?Subroutine23 & 0xFFFF
   1725          
   1726                if ( entry == NULL )
   \                     ??CrossCallReturnLabel_165:
   \   000118   7012         JNZ       ??CrossCallReturnLabel_163
   1727                {
   1728                  // get new entry
   1729                  if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   00011A                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   00011A   AA..         MOV       R2,?XSP + 0
   \   00011C   AB..         MOV       R3,?XSP + 1
   \   00011E   12....       LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   000121   E9           MOV       A,R1
   \   000122   7008         JNZ       ??CrossCallReturnLabel_163
   1730                  {
   1731                    // finish setting up entry
   1732                    entry->ami = ami;
   \   000124   7402         MOV       A,#0x2
   \   000126   12....       LCALL     ?XSTACK_DISP0_8
   \   000129   12....       LCALL     ?Subroutine19 & 0xFFFF
   1733                  }
   1734                }
   1735          
   1736                ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
   \                     ??CrossCallReturnLabel_163:
   \   00012C                ; Setup parameters for call to function APSME_LinkKeySet
   \   00012C   AC..         MOV       R4,?V0
   \   00012E   AD..         MOV       R5,?V1
   \   000130   EE           MOV       A,R6
   \   000131   FA           MOV       R2,A
   \   000132   EF           MOV       A,R7
   \   000133   FB           MOV       R3,A
   \   000134   12....       LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   1737          
   1738          #if defined NV_RESTORE
   1739                ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
   \   000137                ; Setup parameters for call to function ZDSecMgrWriteNV
   \   000137   12....       LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
   1740          #endif
   1741              }
   1742            }
   1743          }
   \                     ??ZDSecMgrTransportKeyInd_6:
   \   00013A   7414         MOV       A,#0x14
   \   00013C   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   12....       LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000006                REQUIRE ??Subroutine77_0
   \   000006                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine78_0
   \   000006                ; // Fall through to label ??Subroutine78_0
   1744          
   1745          /******************************************************************************
   1746           * @fn          ZDSecMgrUpdateDeviceInd
   1747           *
   1748           * @brief       Process the ZDO_UpdateDeviceInd_t message.
   1749           *
   1750           * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
   1751           *
   1752           * @return      none
   1753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7408         MOV       A,#0x8
   \   000002                REQUIRE ??Subroutine73_0
   \   000002                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine74_0
   \   000003                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1754          void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
   \                     ZDSecMgrUpdateDeviceInd:
   1755          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV       A,#-0x8
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1756            ZDSecMgrDevice_t device;
   1757          
   1758            device.nwkAddr    = ind->devAddr;
   \   000009   EA           MOV       A,R2
   \   00000A   240C         ADD       A,#0xc
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   F583         MOV       DPH,A
   \   000012   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000015   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   1759            device.extAddr    = ind->devExtAddr;
   \                     ??CrossCallReturnLabel_159:
   \   000018   EA           MOV       A,R2
   \   000019   2404         ADD       A,#0x4
   \   00001B   F8           MOV       R0,A
   \   00001C   E4           CLR       A
   \   00001D   3B           ADDC      A,R3
   \   00001E   F9           MOV       R1,A
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine12 & 0xFFFF
   1760            device.parentAddr = ind->srcAddr;
   \                     ??CrossCallReturnLabel_5:
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   1761            device.devStatus  = DEV_SEC_INIT_STATUS;
   \                     ??CrossCallReturnLabel_160:
   \   00002D   7407         MOV       A,#0x7
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   7404         MOV       A,#0x4
   \   000034   F0           MOVX      @DPTR,A
   1762            device.secure     = FALSE;
   \   000035   7406         MOV       A,#0x6
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   E4           CLR       A
   \   00003B   F0           MOVX      @DPTR,A
   1763          
   1764            // Trust Center should identify the type of JOIN/REJOIN and
   1765            // Transport the NWK key accordingly, it will only be transported for:
   1766            //              APSME_UD_STANDARD_UNSECURED_JOIN
   1767            //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
   1768            if ( ind->status != APSME_UD_DEVICE_LEFT )
   \   00003C   EA           MOV       A,R2
   \   00003D   240E         ADD       A,#0xe
   \   00003F   F582         MOV       DPL,A
   \   000041   E4           CLR       A
   \   000042   3B           ADDC      A,R3
   \   000043   F583         MOV       DPH,A
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   7402         MOV       A,#0x2
   \   000049   68           XRL       A,R0
   \   00004A   601A         JZ        ??ZDSecMgrUpdateDeviceInd_0
   1769            {
   1770              if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
   \   00004C   E8           MOV       A,R0
   \   00004D   7010         JNZ       ??ZDSecMgrUpdateDeviceInd_1
   1771              {
   1772                device.devStatus &= ~DEV_SEC_INIT_STATUS;
   1773                device.devStatus |=  DEV_SEC_AUTH_STATUS;
   \   00004F   7407         MOV       A,#0x7
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   7408         MOV       A,#0x8
   \   000056   F0           MOVX      @DPTR,A
   1774                device.secure = TRUE;
   \   000057   7406         MOV       A,#0x6
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   7401         MOV       A,#0x1
   \   00005E   F0           MOVX      @DPTR,A
   1775              }
   1776          
   1777              ZDSecMgrDeviceJoin( &device );
   \                     ??ZDSecMgrUpdateDeviceInd_1:
   \   00005F                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   00005F   AA..         MOV       R2,?XSP + 0
   \   000061   AB..         MOV       R3,?XSP + 1
   \   000063   12....       LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   1778            }
   1779          }
   \                     ??ZDSecMgrUpdateDeviceInd_0:
   \   000066   02....       LJMP      ?Subroutine2 & 0xFFFF
   1780          
   1781          /******************************************************************************
   1782           * @fn          ZDSecMgrRemoveDeviceInd
   1783           *
   1784           * @brief       Process the ZDO_RemoveDeviceInd_t message.
   1785           *
   1786           * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
   1787           *
   1788           * @return      none
   1789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1790          void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
   \                     ZDSecMgrRemoveDeviceInd:
   1791          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1792            ZDSecMgrDevice_t device;
   1793          
   1794            // only accept from Trust Center
   1795            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000013   702F         JNZ       ??ZDSecMgrRemoveDeviceInd_0
   1796            {
   1797              // look up NWK address
   1798              if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
   \   000015   EA           MOV       A,R2
   \   000016   2404         ADD       A,#0x4
   \   000018   FE           MOV       R6,A
   \   000019   E4           CLR       A
   \   00001A   3B           ADDC      A,R3
   \   00001B   FF           MOV       R7,A
   \   00001C                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00001C   AC..         MOV       R4,?XSP + 0
   \   00001E   AD..         MOV       R5,?XSP + 1
   \   000020   EE           MOV       A,R6
   \   000021   FA           MOV       R2,A
   \   000022   EF           MOV       A,R7
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000027   E9           MOV       A,R1
   \   000028   6401         XRL       A,#0x1
   \   00002A   7018         JNZ       ??ZDSecMgrRemoveDeviceInd_0
   1799              {
   1800                device.parentAddr = NLME_GetShortAddr();
   \   00002C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002C   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00002F   7404         MOV       A,#0x4
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   1801                device.extAddr    = ind->childExtAddr;
   1802          
   1803                // remove device
   1804                ZDSecMgrDeviceRemove( &device );
   1805              }
   1806            }
   \                     ??CrossCallReturnLabel_122:
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   EE           MOV       A,R6
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   EF           MOV       A,R7
   \   00003E   12....       LCALL     ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000041   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   1807          }
   \                     ??ZDSecMgrRemoveDeviceInd_0:
   \   000044   02....       LJMP      ?Subroutine8 & 0xFFFF
   1808          
   1809          /******************************************************************************
   1810           * @fn          ZDSecMgrRequestKeyInd
   1811           *
   1812           * @brief       Process the ZDO_RequestKeyInd_t message.
   1813           *
   1814           * @param       ind - [in] ZDO_RequestKeyInd_t indication
   1815           *
   1816           * @return      none
   1817           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1818          void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrRequestKeyInd:
   1819          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1820            if ( ind->keyType == KEY_TYPE_NWK )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   7401         MOV       A,#0x1
   \   000010   68           XRL       A,R0
   \   000011   6008         JZ        ??ZDSecMgrRequestKeyInd_0
   1821            {
   1822            }
   1823            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   000013   7402         MOV       A,#0x2
   \   000015   68           XRL       A,R0
   \   000016   7003         JNZ       ??ZDSecMgrRequestKeyInd_0
   1824            {
   1825              ZDSecMgrAppKeyReq( ind );
   \   000018                ; Setup parameters for call to function ZDSecMgrAppKeyReq
   \   000018   12....       LCALL     `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
   1826            }
   1827            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   1828            {
   1829            }
   1830            //else ignore
   1831          }
   \                     ??ZDSecMgrRequestKeyInd_0:
   \   00001B   02....       LJMP      ??Subroutine74_0 & 0xFFFF
   1832          
   1833          /******************************************************************************
   1834           * @fn          ZDSecMgrSwitchKeyInd
   1835           *
   1836           * @brief       Process the ZDO_SwitchKeyInd_t message.
   1837           *
   1838           * @param       ind - [in] ZDO_SwitchKeyInd_t indication
   1839           *
   1840           * @return      none
   1841           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1842          void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
   \                     ZDSecMgrSwitchKeyInd:
   1843          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1844            SSP_SwitchNwkKey( ind->keySeqNum );
   \   000004                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1845          
   1846            // Save if nv
   1847            ZDApp_NVUpdate();
   \   000011                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000011   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1848          }
   \   000014   02....       LJMP      ??Subroutine74_0 & 0xFFFF
   1849          
   1850          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1851          /******************************************************************************
   1852           * @fn          ZDSecMgrUpdateNwkKey
   1853           *
   1854           * @brief       Load a new NWK key and trigger a network update to the dstAddr.
   1855           *
   1856           * @param       key       - [in] new NWK key
   1857           * @param       keySeqNum - [in] new NWK key sequence number
   1858           *
   1859           * @return      ZStatus_t
   1860           */
   1861          ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
   1862          {
   1863            ZStatus_t               status;
   1864            APSME_TransportKeyReq_t req;
   1865          
   1866            // initialize common elements of local variables
   1867            req.keyType   = KEY_TYPE_NWK;
   1868          
   1869            req.dstAddr   = dstAddr;
   1870            req.keySeqNum = keySeqNum;
   1871            req.key       = key;
   1872            req.extAddr   = NULL;
   1873            req.nwkSecure = TRUE;
   1874            req.tunnel    = NULL;
   1875          
   1876            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1877            {
   1878              // Broadcast transport NWK key
   1879              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   1880                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   1881                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   1882              {
   1883                req.apsSecure = FALSE;
   1884                status = APSME_TransportKeyReq( &req );
   1885              }
   1886              else
   1887              {
   1888                AddrMgrEntry_t          addrEntry;
   1889          
   1890                addrEntry.user = ADDRMGR_USER_SECURITY;
   1891                addrEntry.nwkAddr = dstAddr;
   1892          
   1893                status = ZFailure;
   1894          
   1895                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   1896                {
   1897                  req.extAddr = addrEntry.extAddr;
   1898                  req.apsSecure = TRUE;
   1899                  status = APSME_TransportKeyReq( &req );
   1900                }
   1901              }
   1902            }
   1903            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1904            {
   1905              req.apsSecure = FALSE;
   1906              status = APSME_TransportKeyReq( &req );
   1907            }
   1908          
   1909            SSP_UpdateNwkKey( key, keySeqNum );
   1910          
   1911            // Save if nv
   1912            ZDApp_NVUpdate();
   1913          
   1914            return status;
   1915          }
   1916          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   1917          
   1918          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1919          /******************************************************************************
   1920           * @fn          ZDSecMgrSwitchNwkKey
   1921           *
   1922           * @brief       Causes the NWK key to switch via a network command to the dstAddr.
   1923           *
   1924           * @param       keySeqNum - [in] new NWK key sequence number
   1925           *
   1926           * @return      ZStatus_t
   1927           */
   1928          ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
   1929          {
   1930            ZStatus_t            status;
   1931            APSME_SwitchKeyReq_t req;
   1932          
   1933            // initialize common elements of local variables
   1934            req.dstAddr = dstAddr;
   1935            req.keySeqNum = keySeqNum;
   1936          
   1937            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1938            {
   1939              // Broadcast switch NWK key
   1940              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   1941                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   1942                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   1943              {
   1944                req.apsSecure = FALSE;
   1945                status = APSME_SwitchKeyReq( &req );
   1946              }
   1947              else
   1948              {
   1949                AddrMgrEntry_t          addrEntry;
   1950          
   1951                addrEntry.user = ADDRMGR_USER_SECURITY;
   1952                addrEntry.nwkAddr = dstAddr;
   1953          
   1954                status = ZFailure;
   1955          
   1956                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   1957                {
   1958                  req.dstAddr = addrEntry.nwkAddr;
   1959                  req.apsSecure = TRUE;
   1960                  status = APSME_SwitchKeyReq( &req );
   1961                }
   1962              }
   1963            }
   1964            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1965            {
   1966              req.apsSecure = FALSE;
   1967              status = APSME_SwitchKeyReq( &req );
   1968            }
   1969          
   1970            SSP_SwitchNwkKey( keySeqNum );
   1971          
   1972            // Save if nv
   1973            ZDApp_NVUpdate();
   1974          
   1975            return status;
   1976          }
   1977          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   1978          
   1979          /******************************************************************************
   1980           * @fn          ZDSecMgrRequestAppKey
   1981           *
   1982           * @brief       Request an application key with partner.
   1983           *
   1984           * @param       partExtAddr - [in] partner extended address
   1985           *
   1986           * @return      ZStatus_t
   1987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1988          ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
   \                     ZDSecMgrRequestAppKey:
   1989          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV       A,#-0x4
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1990            ZStatus_t status;
   1991            APSME_RequestKeyReq_t req;
   1992          
   1993            req.dstAddr = 0;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   1994            req.keyType = KEY_TYPE_APP_MASTER;
   \   000011   04           INC       A
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   7402         MOV       A,#0x2
   \   000017   F0           MOVX      @DPTR,A
   1995          
   1996            req.partExtAddr = partExtAddr;
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine22 & 0xFFFF
   1997            status = APSME_RequestKeyReq( &req );
   1998          
   1999            return status;
   \                     ??CrossCallReturnLabel_185:
   \   00001E   12....       LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   000021   7404         MOV       A,#0x4
   \   000023   02....       LJMP      ??Subroutine73_0 & 0xFFFF
   2000          }
   2001          
   2002          #if ( ZG_BUILD_JOINING_TYPE )
   2003          /******************************************************************************
   2004           * @fn          ZDSecMgrSetupPartner
   2005           *
   2006           * @brief       Setup for application key partner.
   2007           *
   2008           * @param       partNwkAddr - [in] partner network address
   2009           *
   2010           * @return      ZStatus_t
   2011           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2012          ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
   \                     ZDSecMgrSetupPartner:
   2013          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   2014            AddrMgrEntry_t entry;
   2015            ZStatus_t      status;
   2016          
   2017            status = ZFailure;
   \   000012   75..01       MOV       ?V0,#0x1
   2018          
   2019            // update the address manager
   2020            entry.user    = ADDRMGR_USER_SECURITY;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   7402         MOV       A,#0x2
   \   00001D   F0           MOVX      @DPTR,A
   2021            entry.nwkAddr = partNwkAddr;
   \   00001E   14           DEC       A
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ?Subroutine17 & 0xFFFF
   2022            AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
   \                     ??CrossCallReturnLabel_14:
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   AA82         MOV       R2,DPL
   \   00002A   AB83         MOV       R3,DPH
   \   00002C   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2023          
   2024            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   00002F                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00002F   AA..         MOV       R2,?XSP + 0
   \   000031   AB..         MOV       R3,?XSP + 1
   \   000033   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000036   E9           MOV       A,R1
   \   000037   6401         XRL       A,#0x1
   \   000039   7038         JNZ       ??ZDSecMgrSetupPartner_0
   2025            {
   2026              status = ZSuccess;
   \   00003B   75..00       MOV       ?V0,#0x0
   2027          
   2028              // check for address discovery
   2029              if ( partNwkAddr == INVALID_NODE_ADDR )
   \   00003E   74FE         MOV       A,#-0x2
   \   000040   65..         XRL       A,?V2
   \   000042   7004         JNZ       ??ZDSecMgrSetupPartner_1
   \   000044   74FF         MOV       A,#-0x1
   \   000046   65..         XRL       A,?V3
   \                     ??ZDSecMgrSetupPartner_1:
   \   000048   700F         JNZ       ??ZDSecMgrSetupPartner_2
   2030              {
   2031                status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00004A                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00004A   7D00         MOV       R5,#0x0
   \   00004C   7C00         MOV       R4,#0x0
   \   00004E   7900         MOV       R1,#0x0
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000057   8017         SJMP      ??ZDSecMgrSetupPartner_3
   2032              }
   2033              else if ( !AddrMgrExtAddrValid( partExtAddr ) )
   \                     ??ZDSecMgrSetupPartner_2:
   \   000059                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000060   E9           MOV       A,R1
   \   000061   7010         JNZ       ??ZDSecMgrSetupPartner_0
   2034              {
   2035                status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000063                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000063   7D00         MOV       R5,#0x0
   \   000065   7C00         MOV       R4,#0x0
   \   000067   7900         MOV       R1,#0x0
   \   000069   AA..         MOV       R2,?V2
   \   00006B   AB..         MOV       R3,?V3
   \   00006D   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \                     ??ZDSecMgrSetupPartner_3:
   \   000070   E9           MOV       A,R1
   \   000071   F5..         MOV       ?V0,A
   2036              }
   2037            }
   2038          
   2039            return status;
   \                     ??ZDSecMgrSetupPartner_0:
   \   000073   A9..         MOV       R1,?V0
   \   000075   740D         MOV       A,#0xd
   \   000077                REQUIRE ?Subroutine3
   \   000077                ; // Fall through to label ?Subroutine3
   2040          }
   2041          #endif // ( ZG_BUILD_JOINING_TYPE )
   2042          
   2043          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2044          /******************************************************************************
   2045           * @fn          ZDSecMgrAppKeyTypeSet
   2046           *
   2047           * @brief       Set application key type.
   2048           *
   2049           * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
   2050           *                                                   KEY_TYPE_APP_LINK@3
   2051           *
   2052           * @return      ZStatus_t
   2053           */
   2054          ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
   2055          {
   2056            if ( keyType == KEY_TYPE_APP_LINK )
   2057            {
   2058              ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
   2059            }
   2060            else
   2061            {
   2062              ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
   2063            }
   2064          
   2065            return ZSuccess;
   2066          }
   2067          #endif
   2068          
   2069          /******************************************************************************
   2070           * ZigBee Device Security Manager - Stub Implementations
   2071           */
   2072          
   2073          
   2074          /******************************************************************************
   2075           * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
   2076           *
   2077           * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
   2078           *
   2079           * @param       extAddr - [in] EXT address
   2080           * @param       data    - [in] APSME_LinkKeyData_t
   2081           *
   2082           * @return      ZStatus_t
   2083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2084          ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
   \                     APSME_LinkKeySet:
   2085          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   2086            ZStatus_t status;
   2087            ZDSecMgrEntry_t* entry;
   2088            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2089            uint16 Index;
   2090          
   2091            // lookup entry index for specified EXT address
   2092            status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP100_8
   \   000013   88..         MOV       ?V0,R0
   \   000015   89..         MOV       ?V1,R1
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7402         MOV       A,#0x2
   \   00001E   12....       LCALL     ?XSTACK_DISP102_8
   \   000021   12....       LCALL     `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
   \   000024   7402         MOV       A,#0x2
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
   \   000029   E9           MOV       A,R1
   \   00002A   F5..         MOV       ?V0,A
   2093          
   2094            if ( status == ZSuccess )
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??CrossCallReturnLabel_191 & 0xFFFF
   2095            {
   2096              // point to NV item
   2097              entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   2401         ADD       A,#0x1
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   3402         ADDC      A,#0x2
   \   00003E   F9           MOV       R1,A
   \   00003F   85..82       MOV       DPL,?XSP + 0
   \   000042   85..83       MOV       DPH,?XSP + 1
   \   000045   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   2098          
   2099              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \                     ??CrossCallReturnLabel_161:
   \   00004D                ; Setup parameters for call to function osal_mem_alloc
   \   00004D   12....       LCALL     ?Subroutine42 & 0xFFFF
   2100          
   2101              if (pApsLinkKey != NULL)
   \                     ??CrossCallReturnLabel_53:
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??CrossCallReturnLabel_191 & 0xFFFF
   2102              {
   2103                // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2104                osal_nv_read( entry->keyNvId, 0,
   2105                             sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000055                ; Setup parameters for call to function osal_nv_read
   \   000055   78..         MOV       R0,#?V2
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   75..18       MOV       ?V4,#0x18
   \   00005D   75..00       MOV       ?V5,#0x0
   \   000060   78..         MOV       R0,#?V4
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   7C00         MOV       R4,#0x0
   \   000067   7D00         MOV       R5,#0x0
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000071   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   2106          
   2107                // set new values of the key
   2108                osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   8E..         MOV       ?V4,R6
   \   000079   8F..         MOV       ?V5,R7
   \   00007B   75..00       MOV       ?V6,#0x0
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000083   7C10         MOV       R4,#0x10
   \   000085   7D00         MOV       R5,#0x0
   \   000087   AA..         MOV       R2,?V2
   \   000089   AB..         MOV       R3,?V3
   \   00008B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008E   7403         MOV       A,#0x3
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   2109                pApsLinkKey->rxFrmCntr = 0;
   \   000093   E5..         MOV       A,?V2
   \   000095   2414         ADD       A,#0x14
   \   000097   12....       LCALL     ?Subroutine11 & 0xFFFF
   2110                pApsLinkKey->txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_192:
   \   00009A   E5..         MOV       A,?V2
   \   00009C   2410         ADD       A,#0x10
   \   00009E   12....       LCALL     ?Subroutine11 & 0xFFFF
   2111          
   2112                osal_nv_write( entry->keyNvId, 0,
   2113                              sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \                     ??CrossCallReturnLabel_193:
   \   0000A1                ; Setup parameters for call to function osal_nv_write
   \   0000A1   78..         MOV       R0,#?V2
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   75..18       MOV       ?V4,#0x18
   \   0000A9   75..00       MOV       ?V5,#0x0
   \   0000AC   78..         MOV       R0,#?V4
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   7C00         MOV       R4,#0x0
   \   0000B3   7D00         MOV       R5,#0x0
   \   0000B5   7404         MOV       A,#0x4
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000BD   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
   2114          
   2115                // clear copy of key in RAM
   2116                osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   0000C3                ; Setup parameters for call to function osal_memset
   \   0000C3   12....       LCALL     ?Subroutine45 & 0xFFFF
   2117          
   2118                osal_mem_free(pApsLinkKey);
   \                     ??CrossCallReturnLabel_59:
   \   0000C6   85..82       MOV       DPL,?XSP + 0
   \   0000C9   85..83       MOV       DPH,?XSP + 1
   \   0000CC   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000CF   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000D2   E8           MOV       A,R0
   \   0000D3   75F009       MOV       B,#0x9
   \   0000D6   A4           MUL       AB
   \   0000D7   F8           MOV       R0,A
   \   0000D8   AAF0         MOV       R2,B
   \   0000DA   75F009       MOV       B,#0x9
   \   0000DD   E9           MOV       A,R1
   \   0000DE   A4           MUL       AB
   \   0000DF   2A           ADD       A,R2
   \   0000E0   F9           MOV       R1,A
   \   0000E1   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   0000E3   28           ADD       A,R0
   \   0000E4   F8           MOV       R0,A
   \   0000E5   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   0000E7   39           ADDC      A,R1
   \   0000E8   F9           MOV       R1,A
   \   0000E9   E8           MOV       A,R0
   \   0000EA   24F7         ADD       A,#-0x9
   \   0000EC   F582         MOV       DPL,A
   \   0000EE   E9           MOV       A,R1
   \   0000EF   34ED         ADDC      A,#-0x13
   \   0000F1   12....       LCALL     ??Subroutine83_0 & 0xFFFF
   2119          
   2120                // set initial values for counters in RAM
   2121                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
   2122                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_190:
   \   0000F4   E8           MOV       A,R0
   \   0000F5   24FB         ADD       A,#-0x5
   \   0000F7   F582         MOV       DPL,A
   \   0000F9   E9           MOV       A,R1
   \   0000FA   34ED         ADDC      A,#-0x13
   \   0000FC   12....       LCALL     ??Subroutine83_0 & 0xFFFF
   2123              }
   2124            }
   2125          
   2126            return status;
   \                     ??CrossCallReturnLabel_191:
   \   0000FF   A9..         MOV       R1,?V0
   \   000101   7404         MOV       A,#0x4
   \   000103                REQUIRE ?Subroutine5
   \   000103                ; // Fall through to label ?Subroutine5
   2127          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V3
   \   000005                REQUIRE ??Subroutine83_0
   \   000005                ; // Fall through to label ??Subroutine83_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine84_0
   \   000002                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   7C18         MOV       R4,#0x18
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7900         MOV       R1,#0x0
   \   000006   AA..         MOV       R2,?V2
   \   000008   AB..         MOV       R3,?V3
   \   00000A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000D                ; Setup parameters for call to function osal_mem_free
   \   00000D                ; Setup parameters for call to function osal_mem_free
   \   00000D   AA..         MOV       R2,?V2
   \   00000F   AB..         MOV       R3,?V3
   \   000011   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   7A18         MOV       R2,#0x18
   \   000002   7B00         MOV       R3,#0x0
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8A..         MOV       ?V2,R2
   \   000009   8B..         MOV       ?V3,R3
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   22           RET
   2128          
   2129          /******************************************************************************
   2130           * @fn          ZDSecMgrAuthenticationSet
   2131           *
   2132           * @brief       Mark the specific device as authenticated or not
   2133           *
   2134           * @param       extAddr - [in] EXT address
   2135           * @param       option  - [in] authenticated or not
   2136           *
   2137           * @return      ZStatus_t
   2138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2139          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
   \                     ZDSecMgrAuthenticationSet:
   2140          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2141            ZStatus_t        status;
   2142            ZDSecMgrEntry_t* entry;
   2143          
   2144          
   2145            // lookup entry index for specified EXT address
   2146            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000C                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000C   AC..         MOV       R4,?XSP + 0
   \   00000E   AD..         MOV       R5,?XSP + 1
   \   000010   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000013   E9           MOV       A,R1
   \   000014   F9           MOV       R1,A
   2147          
   2148            if ( status == ZSuccess )
   \   000015   7005         JNZ       ??ZDSecMgrAuthenticationSet_0
   2149            {
   2150              entry->authenticateOption = option;
   \   000017   12....       LCALL     ?Subroutine27 & 0xFFFF
   2151            }
   \                     ??CrossCallReturnLabel_25:
   \   00001A   EE           MOV       A,R6
   \   00001B   F0           MOVX      @DPTR,A
   2152          
   2153            return status;
   \                     ??ZDSecMgrAuthenticationSet_0:
   \   00001C   02....       LJMP      ?Subroutine7 & 0xFFFF
   2154          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET
   2155          
   2156          /******************************************************************************
   2157           * @fn          ZDSecMgrAuthenticationCheck
   2158           *
   2159           * @brief       Check if the specific device has been authenticated or not
   2160           *              For non-trust center device, always return TRUE
   2161           *
   2162           * @param       shortAddr - [in] short address
   2163           *
   2164           * @return      TRUE @ authenticated with CBKE
   2165           *              FALSE @ not authenticated
   2166           */
   2167          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2168          uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
   \                     ZDSecMgrAuthenticationCheck:
   2169          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2170          #if defined (TC_LINKKEY_JOIN)
   2171          
   2172            ZDSecMgrEntry_t* entry;
   2173            uint8 extAddr[Z_EXTADDR_LEN];
   2174          
   2175            // If the local device is not the trust center, always return TRUE
   2176            APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   7404         MOV       A,#0x4
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B00         MOV       R3,#0x0
   \   000017   79AB         MOV       R1,#-0x55
   \   000019   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   2177            if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
   \   00001C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001C   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   \   000023   AC..         MOV       R4,?V0
   \   000025   AD..         MOV       R5,?V1
   \   000027                ; Setup parameters for call to function sAddrExtCmp
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP101_8
   \   00002C   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002F   E9           MOV       A,R1
   \   000030   603B         JZ        ??ZDSecMgrAuthenticationCheck_0
   2178            {
   2179              return TRUE;
   2180            }
   2181            // Otherwise, check the authentication option
   2182            else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
   \   000032                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000032   7404         MOV       A,#0x4
   \   000034   12....       LCALL     ?XSTACK_DISP102_8
   \   000037   EE           MOV       A,R6
   \   000038   FA           MOV       R2,A
   \   000039   EF           MOV       A,R7
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   00003E   E9           MOV       A,R1
   \   00003F   6015         JZ        ??ZDSecMgrAuthenticationCheck_1
   2183            {
   2184              // lookup entry index for specified EXT address
   2185              if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
   \   000041                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000041   AC..         MOV       R4,?XSP + 0
   \   000043   AD..         MOV       R5,?XSP + 1
   \   000045   7404         MOV       A,#0x4
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00004D   E9           MOV       A,R1
   \   00004E   700D         JNZ       ??ZDSecMgrAuthenticationCheck_2
   2186              {
   2187                if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
   \   000050   12....       LCALL     ?Subroutine27 & 0xFFFF
   2188                {
   2189                  return TRUE;
   2190                }
   2191                else
   2192                {
   2193                  return FALSE;
   2194                }
   2195              }
   \                     ??CrossCallReturnLabel_26:
   \   000053   E0           MOVX      A,@DPTR
   \   000054   7017         JNZ       ??ZDSecMgrAuthenticationCheck_0
   2196              else
   2197              {
   2198                // it may have been secured with TCLK only
   2199                uint16    ami;
   2200          
   2201                // lookup address index in address manager
   2202                if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   2203                {
   2204                  return TRUE;
   2205                }
   2206              }
   2207            }
   2208            return FALSE;
   \                     ??ZDSecMgrAuthenticationCheck_1:
   \   000056   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAuthenticationCheck_3:
   \   000058   740C         MOV       A,#0xc
   \   00005A   02....       LJMP      ??Subroutine86_0 & 0xFFFF
   \                     ??ZDSecMgrAuthenticationCheck_2:
   \   00005D                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?XSTACK_DISP102_8
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?XSTACK_DISP101_8
   \   000067   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00006A   E9           MOV       A,R1
   \   00006B   70E9         JNZ       ??ZDSecMgrAuthenticationCheck_1
   \                     ??ZDSecMgrAuthenticationCheck_0:
   \   00006D   7901         MOV       R1,#0x1
   \   00006F   80E7         SJMP      ??ZDSecMgrAuthenticationCheck_3
   2209          
   2210          #else
   2211            (void)shortAddr;  // Intentionally unreferenced parameter
   2212          
   2213            // For non AMI/SE Profile, perform no check and always return TRUE.
   2214            return TRUE;
   2215          
   2216          #endif // TC_LINKKEY_JOIN
   2217          }
   2218          
   2219          /******************************************************************************
   2220           * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
   2221           *
   2222           * @brief       Get Key NV ID for specified NWK address.
   2223           *
   2224           * @param       extAddr - [in] EXT address
   2225           * @param       keyNvId - [out] NV ID
   2226           *
   2227           * @return      ZStatus_t
   2228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2229          ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
   \                     APSME_LinkKeyNVIdGet:
   2230          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   2231            ZStatus_t status;
   2232            ZDSecMgrEntry_t* entry;
   2233          
   2234            // lookup entry index for specified NWK address
   2235            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000015   E9           MOV       A,R1
   \   000016   F9           MOV       R1,A
   2236          
   2237            if ( status == ZSuccess )
   \   000017   7013         JNZ       ??APSME_LinkKeyNVIdGet_0
   2238            {
   2239              // return the index to the NV table
   2240              *pKeyNvId = entry->keyNvId;
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   12....       LCALL     ?Subroutine24 & 0xFFFF
   2241            }
   \                     ??CrossCallReturnLabel_22:
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   EA           MOV       A,R2
   \   000027   F0           MOVX      @DPTR,A
   \   000028   A3           INC       DPTR
   \   000029   EB           MOV       A,R3
   \   00002A   8007         SJMP      ??APSME_LinkKeyNVIdGet_1
   2242            else
   2243            {
   2244              *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??APSME_LinkKeyNVIdGet_0:
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \                     ??APSME_LinkKeyNVIdGet_1:
   \   000033   F0           MOVX      @DPTR,A
   2245            }
   2246          
   2247            return status;
   \   000034   02....       LJMP      ?Subroutine7 & 0xFFFF
   2248          }
   2249          
   2250          /******************************************************************************
   2251           * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
   2252           *
   2253           * @brief       Verifies if Link Key in NV has been set.
   2254           *
   2255           * @param       extAddr - [in] EXT address
   2256           *
   2257           * @return      TRUE - Link Key has been established
   2258           *              FALSE - Link Key in NV has default value.
   2259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2260          uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
   \                     APSME_IsLinkKeyValid:
   2261          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2262            APSME_LinkKeyData_t *pKeyData;
   2263            uint16 apsLinkKeyNvId;
   2264            uint8 nullKey[SEC_KEY_LEN];
   2265            uint8 status = FALSE;
   \   00000E   75..00       MOV       ?V0,#0x0
   2266          
   2267            // initialize default vealue to compare to
   2268            osal_memset(nullKey, 0x00, SEC_KEY_LEN);
   \   000011                ; Setup parameters for call to function osal_memset
   \   000011   7C10         MOV       R4,#0x10
   \   000013   7D00         MOV       R5,#0x0
   \   000015   7900         MOV       R1,#0x0
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP101_8
   \   00001C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2269          
   2270            // check for APS link NV ID
   2271            APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
   \   00001F                ; Setup parameters for call to function APSME_LinkKeyNVIdGet
   \   00001F   AC..         MOV       R4,?XSP + 0
   \   000021   AD..         MOV       R5,?XSP + 1
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
   2272          
   2273            if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
   \   00002A   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   00002D   6059         JZ        ??CrossCallReturnLabel_60
   2274            {
   2275              pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   12....       LCALL     ?Subroutine42 & 0xFFFF
   2276          
   2277              if (pKeyData != NULL)
   \                     ??CrossCallReturnLabel_54:
   \   000032   6054         JZ        ??CrossCallReturnLabel_60
   2278              {
   2279                // retrieve key from NV
   2280                if ( osal_nv_read( apsLinkKeyNvId, 0,
   2281                                  sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
   \   000034                ; Setup parameters for call to function osal_nv_read
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   75..18       MOV       ?V4,#0x18
   \   00003C   75..00       MOV       ?V5,#0x0
   \   00003F   78..         MOV       R0,#?V4
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   7C00         MOV       R4,#0x0
   \   000046   7D00         MOV       R5,#0x0
   \   000048   7404         MOV       A,#0x4
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
   \   000053   E9           MOV       A,R1
   \   000054   702F         JNZ       ??APSME_IsLinkKeyValid_0
   2282                {
   2283                  // if stored key is different than default value, then a key has been established
   2284                  if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
   \   000056                ; Setup parameters for call to function osal_memcmp
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP100_8
   \   00005B   88..         MOV       ?V4,R0
   \   00005D   89..         MOV       ?V5,R1
   \   00005F   75..00       MOV       ?V6,#0x0
   \   000062   78..         MOV       R0,#?V4
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000067   7C10         MOV       R4,#0x10
   \   000069   7D00         MOV       R5,#0x0
   \   00006B   85..82       MOV       DPL,?V2
   \   00006E   85..83       MOV       DPH,?V3
   \   000071   A982         MOV       R1,DPL
   \   000073   AA83         MOV       R2,DPH
   \   000075   7B00         MOV       R3,#0x0
   \   000077   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00007A   7403         MOV       A,#0x3
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F   E9           MOV       A,R1
   \   000080   7003         JNZ       ??APSME_IsLinkKeyValid_0
   2285                  {
   2286                    status = TRUE;
   \   000082   75..01       MOV       ?V0,#0x1
   2287                  }
   2288                }
   2289          
   2290                // clear copy of key in RAM
   2291                osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
   \                     ??APSME_IsLinkKeyValid_0:
   \   000085                ; Setup parameters for call to function osal_memset
   \   000085   12....       LCALL     ?Subroutine45 & 0xFFFF
   2292          
   2293                osal_mem_free(pKeyData);
   2294              }
   2295            }
   2296          
   2297            return status;
   \                     ??CrossCallReturnLabel_60:
   \   000088   A9..         MOV       R1,?V0
   \   00008A   7412         MOV       A,#0x12
   \   00008C   02....       LJMP      ?Subroutine5 & 0xFFFF
   2298          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000006   7404         MOV       A,#0x4
   \   000008   22           RET
   2299          
   2300          /******************************************************************************
   2301           * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
   2302           *
   2303           * @brief       Verify and process key transportation to child.
   2304           *
   2305           * @param       ind - [in] APSME_TransportKeyInd_t
   2306           *
   2307           * @return      uint8 - success(TRUE:FALSE)
   2308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2309          uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
   \                     APSME_KeyFwdToChild:
   2310          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2311            // verify from Trust Center
   2312            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00000C   7026         JNZ       ??APSME_KeyFwdToChild_0
   2313            {
   2314              // check for initial NWK key
   2315              if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   2316                   ( ind->keyType == 6            ) )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   7401         MOV       A,#0x1
   \   000018   68           XRL       A,R0
   \   000019   6005         JZ        ??APSME_KeyFwdToChild_1
   \   00001B   7406         MOV       A,#0x6
   \   00001D   68           XRL       A,R0
   \   00001E   7010         JNZ       ??APSME_KeyFwdToChild_2
   2317              {
   2318                // set association status to authenticated
   2319                ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
   \                     ??APSME_KeyFwdToChild_1:
   \   000020                ; Setup parameters for call to function AssocGetWithExt
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   12....       LCALL     ?Subroutine36 & 0xFFFF
   2320              }
   \                     ??CrossCallReturnLabel_46:
   \   00002D                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002D   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   2321          
   2322              return TRUE;
   \                     ??APSME_KeyFwdToChild_2:
   \   000030   7901         MOV       R1,#0x1
   \   000032   8002         SJMP      ??APSME_KeyFwdToChild_3
   2323            }
   2324          
   2325            return FALSE;
   \                     ??APSME_KeyFwdToChild_0:
   \   000034   7900         MOV       R1,#0x0
   \                     ??APSME_KeyFwdToChild_3:
   \   000036   02....       LJMP      ??Subroutine87_0 & 0xFFFF
   2326          }
   2327          
   2328          /******************************************************************************
   2329           * @fn          ZDSecMgrAddLinkKey
   2330           *
   2331           * @brief       Add the application link key to ZDSecMgr. Also mark the device
   2332           *              as authenticated in the authenticateOption. Note that this function
   2333           *              is hardwared to CBKE right now.
   2334           *
   2335           * @param       shortAddr - short address of the partner device
   2336           * @param       extAddr - extended address of the partner device
   2337           * @param       key - link key
   2338           *
   2339           * @return      ZStatus_t
   2340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2341          ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
   \                     ZDSecMgrAddLinkKey:
   2342          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   2343            uint16           ami;
   2344            ZDSecMgrEntry_t* entry;
   2345          
   2346            /* Store the device address in the addr manager */
   2347            if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP100_8
   \   000013   88..         MOV       ?V0,R0
   \   000015   89..         MOV       ?V1,R1
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   E9           MOV       A,R1
   \   000023   6004         JZ        ??ZDSecMgrAddLinkKey_0
   2348            {
   2349              /* Adding to Addr Manager fails */
   2350              return ZFailure;
   \   000025   7901         MOV       R1,#0x1
   \   000027   803D         SJMP      ??ZDSecMgrAddLinkKey_1
   2351            }
   2352          
   2353            /* Lookup entry using specified address index */
   2354            ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrAddLinkKey_0:
   \   000029                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000029   AC..         MOV       R4,?XSP + 0
   \   00002B   AD..         MOV       R5,?XSP + 1
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   12....       LCALL     ?Subroutine23 & 0xFFFF
   2355          
   2356            // If no existing entry, create one
   2357            if ( entry == NULL )
   \                     ??CrossCallReturnLabel_166:
   \   000035   7012         JNZ       ??CrossCallReturnLabel_164
   2358            {
   2359              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   000037                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   000037   AA..         MOV       R2,?XSP + 0
   \   000039   AB..         MOV       R3,?XSP + 1
   \   00003B   12....       LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   00003E   E9           MOV       A,R1
   \   00003F   702A         JNZ       ??ZDSecMgrAddLinkKey_2
   2360              {
   2361                entry->ami = ami;
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?Subroutine19 & 0xFFFF
   2362              }
   2363              else
   2364              {
   2365                /* Security Manager full */
   2366                return ZBufferFull;
   2367              }
   2368            }
   2369            // Write the link key
   2370            APSME_LinkKeySet( extAddr, key );
   \                     ??CrossCallReturnLabel_164:
   \   000049                ; Setup parameters for call to function APSME_LinkKeySet
   \   000049   740E         MOV       A,#0xe
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000051   EE           MOV       A,R6
   \   000052   FA           MOV       R2,A
   \   000053   EF           MOV       A,R7
   \   000054   FB           MOV       R3,A
   \   000055   12....       LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   2371          
   2372          #if defined (TC_LINKKEY_JOIN)
   2373            // Mark the device as authenticated.
   2374            ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
   \   000058                ; Setup parameters for call to function ZDSecMgrAuthenticationSet
   \   000058   7901         MOV       R1,#0x1
   \   00005A   EE           MOV       A,R6
   \   00005B   FA           MOV       R2,A
   \   00005C   EF           MOV       A,R7
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??ZDSecMgrAuthenticationSet::?relay`; Banked call to: ZDSecMgrAuthenticationSet
   2375          #endif
   2376          
   2377          #if defined NV_RESTORE
   2378            ZDSecMgrWriteNV();  // Write the new established link key to NV.
   \   000061                ; Setup parameters for call to function ZDSecMgrWriteNV
   \   000061   12....       LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
   2379          #endif
   2380          
   2381            return ZSuccess;
   \   000064   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAddLinkKey_1:
   \   000066   7404         MOV       A,#0x4
   \   000068   02....       LJMP      ??Subroutine86_0 & 0xFFFF
   \                     ??ZDSecMgrAddLinkKey_2:
   \   00006B   7911         MOV       R1,#0x11
   \   00006D   80F7         SJMP      ??ZDSecMgrAddLinkKey_1
   2382          }
   2383          
   2384          /******************************************************************************
   2385           * @fn          ZDSecMgrInitNV
   2386           *
   2387           * @brief       Initialize the SecMgr entry data in NV with all values set to 0
   2388           *
   2389           * @param       none
   2390           *
   2391           * @return      uint8 - <osal_nv_item_init> return codes
   2392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2393          uint8 ZDSecMgrInitNV(void)
   \                     ZDSecMgrInitNV:
   2394          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2395          
   2396            uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
   2397                          (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR       A
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   F5..         MOV       ?V1,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   7C11         MOV       R4,#0x11
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7A4C         MOV       R2,#0x4c
   \   00001A   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000020   E9           MOV       A,R1
   \   000021   FE           MOV       R6,A
   2398          
   2399            // If the item does not already exist, set all values to 0
   2400            if (rtrn != SUCCESS)
   \   000022   6017         JZ        ??ZDSecMgrInitNV_0
   2401            {
   2402              nvDeviceListHdr_t hdr;
   2403              hdr.numRecs = 0;
   \   000024   12....       LCALL     ?Subroutine14 & 0xFFFF
   2404              osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   2405            }
   \                     ??CrossCallReturnLabel_6:
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..02       MOV       ?V0,#0x2
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
   2406          
   2407            rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
   2408                                       zgApsTrustCenterAddr );
   2409          
   2410            return rtrn;
   \                     ??ZDSecMgrInitNV_0:
   \   00003B                ; Setup parameters for call to function osal_nv_item_init
   \   00003B   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   00003E   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7C08         MOV       R4,#0x8
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   7A71         MOV       R2,#0x71
   \   00004C   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   E9           MOV       A,R1
   \   000053   4E           ORL       A,R6
   \   000054   F9           MOV       R1,A
   \   000055   7402         MOV       A,#0x2
   \   000057   02....       LJMP      ??Subroutine86_0 & 0xFFFF
   2411          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine85_0
   \   000002                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   A8..         MOV       R0,?XSP + 0
   \   00000C   A9..         MOV       R1,?XSP + 1
   \   00000E   88..         MOV       ?V0,R0
   \   000010   89..         MOV       ?V1,R1
   \   000012   78..         MOV       R0,#?V0
   \   000014   22           RET
   2412          
   2413          #if defined ( NV_RESTORE )
   2414          /*********************************************************************
   2415           * @fn      ZDSecMgrWriteNV()
   2416           *
   2417           * @brief   Save off the APS link key list to NV
   2418           *
   2419           * @param   none
   2420           *
   2421           * @return  none
   2422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2423          static void ZDSecMgrWriteNV( void )
   \                     ZDSecMgrWriteNV:
   2424          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2425            uint16 i;
   2426            nvDeviceListHdr_t hdr;
   2427          
   2428            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine10 & 0xFFFF
   2429          
   2430            if (ZDSecMgrEntries != NULL)
   \                     ??CrossCallReturnLabel_3:
   \   000013   606F         JZ        ??ZDSecMgrWriteNV_0
   2431            {
   2432              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000015   7E00         MOV       R6,#0x0
   \   000017   7F00         MOV       R7,#0x0
   2433              {
   2434                // Save off the record
   2435                osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2436                              (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2437                              sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
   \                     ??ZDSecMgrWriteNV_1:
   \   000019   8E..         MOV       ?V0,R6
   \   00001B   8F..         MOV       ?V1,R7
   \   00001D   E5..         MOV       A,?V0
   \   00001F   75F005       MOV       B,#0x5
   \   000022   A4           MUL       AB
   \   000023   F5..         MOV       ?V0,A
   \   000025   A8F0         MOV       R0,B
   \   000027   75F005       MOV       B,#0x5
   \   00002A   E5..         MOV       A,?V1
   \   00002C   A4           MUL       AB
   \   00002D   28           ADD       A,R0
   \   00002E   F5..         MOV       ?V1,A
   \   000030                ; Setup parameters for call to function osal_nv_write
   \   000030   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000033   E0           MOVX      A,@DPTR
   \   000034   25..         ADD       A,?V0
   \   000036   F5..         MOV       ?V2,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   35..         ADDC      A,?V1
   \   00003C   F5..         MOV       ?V3,A
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   75..05       MOV       ?V2,#0x5
   \   000046   75..00       MOV       ?V3,#0x0
   \   000049   78..         MOV       R0,#?V2
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   2438          
   2439                if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
   \   000054   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000057   E0           MOVX      A,@DPTR
   \   000058   25..         ADD       A,?V0
   \   00005A   F8           MOV       R0,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   35..         ADDC      A,?V1
   \   00005F   8882         MOV       DPL,R0
   \   000061   F583         MOV       DPH,A
   \   000063   E0           MOVX      A,@DPTR
   \   000064   64FE         XRL       A,#0xfe
   \   000066   7003         JNZ       ??ZDSecMgrWriteNV_2
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F4           CPL       A
   \                     ??ZDSecMgrWriteNV_2:
   \   00006B   600A         JZ        ??ZDSecMgrWriteNV_3
   2440                {
   2441                  hdr.numRecs++;
   \   00006D   85..82       MOV       DPL,?XSP + 0
   \   000070   85..83       MOV       DPH,?XSP + 1
   \   000073   12....       LCALL     ?Subroutine39 & 0xFFFF
   2442                }
   2443              }
   \                     ??CrossCallReturnLabel_50:
   \   000076   F0           MOVX      @DPTR,A
   \                     ??ZDSecMgrWriteNV_3:
   \   000077   0E           INC       R6
   \   000078   EE           MOV       A,R6
   \   000079   7001         JNZ       ??ZDSecMgrWriteNV_4
   \   00007B   0F           INC       R7
   \                     ??ZDSecMgrWriteNV_4:
   \   00007C   C3           CLR       C
   \   00007D   9403         SUBB      A,#0x3
   \   00007F   EF           MOV       A,R7
   \   000080   9400         SUBB      A,#0x0
   \   000082   4095         JC        ??ZDSecMgrWriteNV_1
   2444            }
   2445          
   2446            // Save off the header
   2447            osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   \                     ??ZDSecMgrWriteNV_0:
   \   000084                ; Setup parameters for call to function osal_nv_write
   \   000084   A8..         MOV       R0,?XSP + 0
   \   000086   A9..         MOV       R1,?XSP + 1
   \   000088   88..         MOV       ?V0,R0
   \   00008A   89..         MOV       ?V1,R1
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   75..02       MOV       ?V0,#0x2
   \   000094   75..00       MOV       ?V1,#0x0
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
   2448          }
   \   0000A2   7402         MOV       A,#0x2
   \   0000A4   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   75F005       MOV       B,#0x5
   \   000008   A4           MUL       AB
   \   000009   F8           MOV       R0,A
   \   00000A   AAF0         MOV       R2,B
   \   00000C   75F005       MOV       B,#0x5
   \   00000F   E9           MOV       A,R1
   \   000010   A4           MUL       AB
   \   000011   2A           ADD       A,R2
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000017   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00001A   7404         MOV       A,#0x4
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   2402         ADD       A,#0x2
   \   000002   FC           MOV       R4,A
   \   000003   E4           CLR       A
   \   000004   39           ADDC      A,R1
   \   000005   FD           MOV       R5,A
   \   000006   7A4C         MOV       R2,#0x4c
   \   000008   7B00         MOV       R3,#0x0
   \   00000A   22           RET
   2449          #endif // NV_RESTORE
   2450          
   2451          #if defined ( NV_RESTORE )
   2452          /******************************************************************************
   2453           * @fn          ZDSecMgrRestoreFromNV
   2454           *
   2455           * @brief       Restore the APS Link Key entry data from NV. It does not restore
   2456           *              the key data itself as they remain in NV until they are used.
   2457           *              Only list data is restored.
   2458           *              Restore zgTrustCenterAdress from NV.
   2459           *
   2460           * @param       none
   2461           *
   2462           * @return      None.
   2463           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2464          static void ZDSecMgrRestoreFromNV( void )
   \                     ZDSecMgrRestoreFromNV:
   2465          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2466            nvDeviceListHdr_t hdr;
   2467            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2468          
   2469            if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
   2470                ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
   \   00000A                ; Setup parameters for call to function osal_nv_read
   \   00000A   A8..         MOV       R0,?XSP + 0
   \   00000C   A9..         MOV       R1,?XSP + 1
   \   00000E   88..         MOV       ?V0,R0
   \   000010   89..         MOV       ?V1,R1
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000017   75..02       MOV       ?V0,#0x2
   \   00001A   75..00       MOV       ?V1,#0x0
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   7C00         MOV       R4,#0x0
   \   000024   7D00         MOV       R5,#0x0
   \   000026   7A4C         MOV       R2,#0x4c
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   E9           MOV       A,R1
   \   000031   6003         JZ        $+5
   \   000033   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   000036   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   00003E   85..82       MOV       DPL,?XSP + 0
   \   000041   85..83       MOV       DPH,?XSP + 1
   \   000044   C3           CLR       C
   \   000045   E0           MOVX      A,@DPTR
   \   000046   9404         SUBB      A,#0x4
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   9400         SUBB      A,#0x0
   \   00004C   4003         JC        $+5
   \   00004E   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   2471            {
   2472              uint8 x;
   2473          
   2474              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000051                ; Setup parameters for call to function osal_mem_alloc
   \   000051   7A18         MOV       R2,#0x18
   \   000053   7B00         MOV       R3,#0x0
   \   000055   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000058   8A..         MOV       ?V8,R2
   \   00005A   8B..         MOV       ?V9,R3
   2475          
   2476              for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
   \   00005C   75..00       MOV       ?V0,#0x0
   \   00005F   EA           MOV       A,R2
   \   000060   2410         ADD       A,#0x10
   \   000062   F5..         MOV       ?V2,A
   \   000064   E4           CLR       A
   \   000065   35..         ADDC      A,?V9
   \   000067   F5..         MOV       ?V3,A
   2477              {
   2478                if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
   2479                                  (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
   2480                                  sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
   \                     ??ZDSecMgrRestoreFromNV_1:
   \   000069   E5..         MOV       A,?V0
   \   00006B   75F005       MOV       B,#0x5
   \   00006E   A4           MUL       AB
   \   00006F   FE           MOV       R6,A
   \   000070   AFF0         MOV       R7,B
   \   000072                ; Setup parameters for call to function osal_nv_read
   \   000072   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000075   E0           MOVX      A,@DPTR
   \   000076   2E           ADD       A,R6
   \   000077   F5..         MOV       ?V4,A
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   3F           ADDC      A,R7
   \   00007C   F5..         MOV       ?V5,A
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   75..05       MOV       ?V4,#0x5
   \   000086   75..00       MOV       ?V5,#0x0
   \   000089   78..         MOV       R0,#?V4
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   EF           MOV       A,R7
   \   00008F   F9           MOV       R1,A
   \   000090   EE           MOV       A,R6
   \   000091   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000094   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009A   E9           MOV       A,R1
   \   00009B   6003         JZ        $+5
   \   00009D   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2481                {
   2482                  // update data only for valid entries
   2483                  if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
   \   0000A0   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   2E           ADD       A,R6
   \   0000A5   F8           MOV       R0,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   3F           ADDC      A,R7
   \   0000A9   F9           MOV       R1,A
   \   0000AA   E8           MOV       A,R0
   \   0000AB   FA           MOV       R2,A
   \   0000AC   E9           MOV       A,R1
   \   0000AD   8882         MOV       DPL,R0
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   64FE         XRL       A,#0xfe
   \   0000B4   7003         JNZ       ??ZDSecMgrRestoreFromNV_3
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F4           CPL       A
   \                     ??ZDSecMgrRestoreFromNV_3:
   \   0000B9   7003         JNZ       $+5
   \   0000BB   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2484                  {
   2485                    if (pApsLinkKey != NULL)
   \   0000BE   E5..         MOV       A,?V8
   \   0000C0   45..         ORL       A,?V9
   \   0000C2   7003         JNZ       $+5
   \   0000C4   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2486                    {
   2487                      // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2488                      osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
   2489                                   sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   0000C7                ; Setup parameters for call to function osal_nv_read
   \   0000C7   78..         MOV       R0,#?V8
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CC   75..18       MOV       ?V4,#0x18
   \   0000CF   78..         MOV       R0,#?V4
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   7C00         MOV       R4,#0x0
   \   0000D6   7D00         MOV       R5,#0x0
   \   0000D8   8A82         MOV       DPL,R2
   \   0000DA   8983         MOV       DPH,R1
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000E1   12....       LCALL     ?DEALLOC_XSTACK8
   2490          
   2491                      // set new values for the counter
   2492                      pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
   \   0000E4   90....       MOV       DPTR,#__Constant_3e9
   \   0000E7   78..         MOV       R0,#?V4
   \   0000E9   12....       LCALL     ?L_MOV_X
   \   0000EC   85..82       MOV       DPL,?V2
   \   0000EF   85..83       MOV       DPH,?V3
   \   0000F2   78..         MOV       R0,#?V4
   \   0000F4   12....       LCALL     ?L_ADD_TO_X
   \   0000F7   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   FE           MOV       R6,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   FF           MOV       R7,A
   \   000101   EE           MOV       A,R6
   \   000102   75F009       MOV       B,#0x9
   \   000105   A4           MUL       AB
   \   000106   F8           MOV       R0,A
   \   000107   AAF0         MOV       R2,B
   \   000109   75F009       MOV       B,#0x9
   \   00010C   EF           MOV       A,R7
   \   00010D   A4           MUL       AB
   \   00010E   2A           ADD       A,R2
   \   00010F   F9           MOV       R1,A
   \   000110   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   000112   28           ADD       A,R0
   \   000113   FC           MOV       R4,A
   \   000114   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   000116   39           ADDC      A,R1
   \   000117   FD           MOV       R5,A
   \   000118   85..82       MOV       DPL,?V2
   \   00011B   85..83       MOV       DPH,?V3
   \   00011E   12....       LCALL     ?XLOAD_R0123
   \   000121   EC           MOV       A,R4
   \   000122   24F7         ADD       A,#-0x9
   \   000124   F582         MOV       DPL,A
   \   000126   ED           MOV       A,R5
   \   000127   34ED         ADDC      A,#-0x13
   \   000129   F583         MOV       DPH,A
   \   00012B   12....       LCALL     ?XSTORE_R0123
   2493          
   2494                      // restore values for counters in RAM
   2495                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
   2496                                                      pApsLinkKey->txFrmCntr;
   2497          
   2498                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
   2499                                                      pApsLinkKey->rxFrmCntr;
   \   00012E   E5..         MOV       A,?V8
   \   000130   2414         ADD       A,#0x14
   \   000132   F582         MOV       DPL,A
   \   000134   E4           CLR       A
   \   000135   35..         ADDC      A,?V9
   \   000137   F583         MOV       DPH,A
   \   000139   12....       LCALL     ?XLOAD_R0123
   \   00013C   EC           MOV       A,R4
   \   00013D   24FB         ADD       A,#-0x5
   \   00013F   F582         MOV       DPL,A
   \   000141   ED           MOV       A,R5
   \   000142   34ED         ADDC      A,#-0x13
   \   000144   F583         MOV       DPH,A
   \   000146   12....       LCALL     ?XSTORE_R0123
   2500          
   2501                      osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
   2502                                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000149                ; Setup parameters for call to function osal_nv_write
   \   000149   78..         MOV       R0,#?V8
   \   00014B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014E   75..18       MOV       ?V4,#0x18
   \   000151   75..00       MOV       ?V5,#0x0
   \   000154   78..         MOV       R0,#?V4
   \   000156   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000159   7C00         MOV       R4,#0x0
   \   00015B   7D00         MOV       R5,#0x0
   \   00015D   EE           MOV       A,R6
   \   00015E   FA           MOV       R2,A
   \   00015F   EF           MOV       A,R7
   \   000160   FB           MOV       R3,A
   \   000161   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000164   12....       LCALL     ?DEALLOC_XSTACK8
   2503          
   2504                      // clear copy of key in RAM
   2505                      osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   000167                ; Setup parameters for call to function osal_memset
   \   000167   7C18         MOV       R4,#0x18
   \   000169   7D00         MOV       R5,#0x0
   \   00016B   7900         MOV       R1,#0x0
   \   00016D   AA..         MOV       R2,?V8
   \   00016F   AB..         MOV       R3,?V9
   \   000171   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2506                    }
   2507                  }
   2508                }
   2509              }
   \                     ??ZDSecMgrRestoreFromNV_2:
   \   000174   05..         INC       ?V0
   \   000176   E5..         MOV       A,?V0
   \   000178   C3           CLR       C
   \   000179   9403         SUBB      A,#0x3
   \   00017B   5003         JNC       $+5
   \   00017D   02....       LJMP      ??ZDSecMgrRestoreFromNV_1 & 0xFFFF
   2510          
   2511              if (pApsLinkKey != NULL)
   \   000180   E5..         MOV       A,?V8
   \   000182   45..         ORL       A,?V9
   \   000184   6007         JZ        ??ZDSecMgrRestoreFromNV_0
   2512              {
   2513                osal_mem_free(pApsLinkKey);
   \   000186                ; Setup parameters for call to function osal_mem_free
   \   000186   AA..         MOV       R2,?V8
   \   000188   AB..         MOV       R3,?V9
   \   00018A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2514              }
   2515            }
   2516          
   2517            osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \                     ??ZDSecMgrRestoreFromNV_0:
   \   00018D                ; Setup parameters for call to function osal_nv_read
   \   00018D   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   000190   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000193   78..         MOV       R0,#?V0
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000198   75..08       MOV       ?V0,#0x8
   \   00019B   75..00       MOV       ?V1,#0x0
   \   00019E   78..         MOV       R0,#?V0
   \   0001A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A3   7C00         MOV       R4,#0x0
   \   0001A5   7D00         MOV       R5,#0x0
   \   0001A7   7A71         MOV       R2,#0x71
   \   0001A9   7B00         MOV       R3,#0x0
   \   0001AB   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0001AE   12....       LCALL     ?DEALLOC_XSTACK8
   2518          }
   \   0001B1   7402         MOV       A,#0x2
   \   0001B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B6                REQUIRE ?Subroutine6
   \   0001B6                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2519          #endif // NV_RESTORE
   2520          
   2521          /*********************************************************************
   2522           * @fn          ZDSecMgrSetDefaultNV
   2523           *
   2524           * @brief       Write the defaults to NV for Entry table and for APS key data table
   2525           *
   2526           * @param       none
   2527           *
   2528           * @return      none
   2529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2530          void ZDSecMgrSetDefaultNV( void )
   \                     ZDSecMgrSetDefaultNV:
   2531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2532            uint16 i;
   2533            nvDeviceListHdr_t hdr;
   2534            ZDSecMgrEntry_t secMgrEntry;
   2535            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2536          
   2537            // Initialize the header
   2538            hdr.numRecs = 0;
   \   00000A   12....       LCALL     ?Subroutine14 & 0xFFFF
   2539          
   2540            // clear the header
   2541            osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \                     ??CrossCallReturnLabel_7:
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..02       MOV       ?V0,#0x2
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00001E   12....       LCALL     ?DEALLOC_XSTACK8
   2542          
   2543            osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
   \   000021                ; Setup parameters for call to function osal_memset
   \   000021   7C05         MOV       R4,#0x5
   \   000023   7D00         MOV       R5,#0x0
   \   000025   7900         MOV       R1,#0x0
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP101_8
   \   00002C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2544          
   2545            for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   00002F   7E00         MOV       R6,#0x0
   \   000031   7F00         MOV       R7,#0x0
   2546            {
   2547              // Clear the record
   2548              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2549                          (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2550                                  sizeof(ZDSecMgrEntry_t), &secMgrEntry );
   \                     ??ZDSecMgrSetDefaultNV_0:
   \   000033                ; Setup parameters for call to function osal_nv_write
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP100_8
   \   000038   88..         MOV       ?V0,R0
   \   00003A   89..         MOV       ?V1,R1
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75..05       MOV       ?V0,#0x5
   \   000044   75..00       MOV       ?V1,#0x0
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   12....       LCALL     ?Subroutine40 & 0xFFFF
   2551            }
   \                     ??CrossCallReturnLabel_52:
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   0E           INC       R6
   \   000053   EE           MOV       A,R6
   \   000054   7001         JNZ       ??ZDSecMgrSetDefaultNV_1
   \   000056   0F           INC       R7
   \                     ??ZDSecMgrSetDefaultNV_1:
   \   000057   C3           CLR       C
   \   000058   9403         SUBB      A,#0x3
   \   00005A   EF           MOV       A,R7
   \   00005B   9400         SUBB      A,#0x0
   \   00005D   40D4         JC        ??ZDSecMgrSetDefaultNV_0
   2552          
   2553            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   7A18         MOV       R2,#0x18
   \   000061   12....       LCALL     ?Subroutine43 & 0xFFFF
   2554          
   2555            if (pApsLinkKey != NULL)
   \                     ??CrossCallReturnLabel_55:
   \   000064   6043         JZ        ??ZDSecMgrSetDefaultNV_2
   2556            {
   2557              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   000066                ; Setup parameters for call to function osal_memset
   \   000066   7C18         MOV       R4,#0x18
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   7900         MOV       R1,#0x0
   \   00006C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2558          
   2559              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   00006F   7E00         MOV       R6,#0x0
   \   000071   7F00         MOV       R7,#0x0
   2560              {
   2561                // Clear the record
   2562                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   2563                              sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \                     ??ZDSecMgrSetDefaultNV_3:
   \   000073                ; Setup parameters for call to function osal_nv_write
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   75..18       MOV       ?V2,#0x18
   \   00007B   75..00       MOV       ?V3,#0x0
   \   00007E   78..         MOV       R0,#?V2
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   7C00         MOV       R4,#0x0
   \   000085   7D00         MOV       R5,#0x0
   \   000087   EE           MOV       A,R6
   \   000088   2401         ADD       A,#0x1
   \   00008A   FA           MOV       R2,A
   \   00008B   EF           MOV       A,R7
   \   00008C   3402         ADDC      A,#0x2
   \   00008E   FB           MOV       R3,A
   \   00008F   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   2564              }
   \                     ??CrossCallReturnLabel_225:
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   \   000095   0E           INC       R6
   \   000096   EE           MOV       A,R6
   \   000097   7001         JNZ       ??ZDSecMgrSetDefaultNV_4
   \   000099   0F           INC       R7
   \                     ??ZDSecMgrSetDefaultNV_4:
   \   00009A   C3           CLR       C
   \   00009B   9403         SUBB      A,#0x3
   \   00009D   EF           MOV       A,R7
   \   00009E   9400         SUBB      A,#0x0
   \   0000A0   40D1         JC        ??ZDSecMgrSetDefaultNV_3
   2565          
   2566              osal_mem_free(pApsLinkKey);
   \   0000A2                ; Setup parameters for call to function osal_mem_free
   \   0000A2   AA..         MOV       R2,?V0
   \   0000A4   AB..         MOV       R3,?V1
   \   0000A6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2567            }
   2568          }
   \                     ??ZDSecMgrSetDefaultNV_2:
   \   0000A9   7407         MOV       A,#0x7
   \   0000AB   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EA           MOV       A,R2
   \   00000A   4B           ORL       A,R3
   \   00000B   22           RET
   2569          
   2570          #if defined ( NV_RESTORE )
   2571          /*********************************************************************
   2572           * @fn      ZDSecMgrUpdateNV()
   2573           *
   2574           * @brief   Updates one entry of the APS link key table to NV
   2575           *
   2576           * @param   index - to the entry in security manager table
   2577           *
   2578           * @return  none
   2579           */
   2580          static void ZDSecMgrUpdateNV( uint16 index )
   2581          {
   2582            nvDeviceListHdr_t hdr;
   2583          
   2584            if (ZDSecMgrEntries != NULL)
   2585            {
   2586              // Save off the record
   2587              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2588                             (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
   2589                             sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
   2590            }
   2591          
   2592            if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
   2593            {
   2594              if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   2595              {
   2596                if (hdr.numRecs > 0)
   2597                {
   2598                  hdr.numRecs--;
   2599                }
   2600              }
   2601              else
   2602              {
   2603                hdr.numRecs++;
   2604              }
   2605          
   2606              // Save off the header
   2607              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   2608            }
   2609          }
   2610          #endif // NV_RESTORE
   2611          
   2612          /******************************************************************************
   2613           * @fn          ZDSecMgrAPSRemove
   2614           *
   2615           * @brief       Remove device from network.
   2616           *
   2617           * @param       nwkAddr - device's NWK address
   2618           * @param       extAddr - device's Extended address
   2619           * @param       parentAddr - parent's NWK address
   2620           *
   2621           * @return      ZStatus_t
   2622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2623          ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
   \                     ZDSecMgrAPSRemove:
   2624          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV       A,#-0x8
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2625            ZDSecMgrDevice_t device;
   2626          
   2627            if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
   2628                 ( extAddr == NULL )              ||
   2629                 ( parentAddr == INVALID_NODE_ADDR ) )
   \   000009   74FE         MOV       A,#-0x2
   \   00000B   6A           XRL       A,R2
   \   00000C   7003         JNZ       ??ZDSecMgrAPSRemove_0
   \   00000E   74FF         MOV       A,#-0x1
   \   000010   6B           XRL       A,R3
   \                     ??ZDSecMgrAPSRemove_0:
   \   000011   6016         JZ        ??ZDSecMgrAPSRemove_1
   \   000013   EC           MOV       A,R4
   \   000014   4D           ORL       A,R5
   \   000015   6012         JZ        ??ZDSecMgrAPSRemove_1
   \   000017   7408         MOV       A,#0x8
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00001F   74FE         MOV       A,#-0x2
   \   000021   68           XRL       A,R0
   \   000022   7003         JNZ       ??ZDSecMgrAPSRemove_2
   \   000024   74FF         MOV       A,#-0x1
   \   000026   69           XRL       A,R1
   \                     ??ZDSecMgrAPSRemove_2:
   \   000027   7004         JNZ       ??ZDSecMgrAPSRemove_3
   2630            {
   2631              return ( ZFailure );
   \                     ??ZDSecMgrAPSRemove_1:
   \   000029   7901         MOV       R1,#0x1
   \   00002B   801C         SJMP      ??ZDSecMgrAPSRemove_4
   2632            }
   2633          
   2634            device.nwkAddr = nwkAddr;
   \                     ??ZDSecMgrAPSRemove_3:
   \   00002D   12....       LCALL     ?Subroutine20 & 0xFFFF
   2635            device.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_121:
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   EC           MOV       A,R4
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   ED           MOV       A,R5
   \   000037   F0           MOVX      @DPTR,A
   2636            device.parentAddr = parentAddr;
   \   000038   7404         MOV       A,#0x4
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   2637          
   2638            // remove device
   2639            ZDSecMgrDeviceRemove( &device );
   \                     ??CrossCallReturnLabel_162:
   \   000040                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000040   AA..         MOV       R2,?XSP + 0
   \   000042   AB..         MOV       R3,?XSP + 1
   \   000044   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   2640          
   2641            return ( ZSuccess );
   \   000047   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAPSRemove_4:
   \   000049   02....       LJMP      ?Subroutine2 & 0xFFFF
   2642          }
   2643          
   2644          /******************************************************************************
   2645           * @fn          APSME_TCLinkKeyInit
   2646           *
   2647           * @brief       Initialize the NV table for preconfigured TC link key
   2648           *
   2649           *              When zgUseDefaultTCL is set to TRUE, the default preconfig
   2650           *              Trust Center Link Key is written to NV. A single tclk is used
   2651           *              by all devices joining the network.
   2652           *
   2653           * @param       setDefault - TRUE to set default values
   2654           *
   2655           * @return      none
   2656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2657          void APSME_TCLinkKeyInit(uint8 setDefault)
   \                     APSME_TCLinkKeyInit:
   2658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV       A,#-0x20
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2659            uint8             i;
   2660            APSME_TCLinkKey_t tcLinkKey;
   2661            uint8             rtrn;
   2662          
   2663            // Initialize all NV items for preconfigured TCLK
   2664            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   2665            {
   2666              // Making sure data is cleared for every key all the time
   2667              osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C20         MOV       R4,#0x20
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   7900         MOV       R1,#0x0
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2668          
   2669              // Initialize first element of the table with the default TCLK
   2670              if((i == 0) && ( zgUseDefaultTCLK == TRUE ))
   \   000019   90....       MOV       DPTR,#zgUseDefaultTCLK
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6401         XRL       A,#0x1
   \   00001F   7030         JNZ       ??APSME_TCLinkKeyInit_0
   2671              {
   2672                osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   000021                ; Setup parameters for call to function osal_memset
   \   000021   7C08         MOV       R4,#0x8
   \   000023   7D00         MOV       R5,#0x0
   \   000025   79FF         MOV       R1,#-0x1
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2673                osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
   \   00002E                ; Setup parameters for call to function osal_memcpy
   \   00002E   75....       MOV       ?V0,#defaultTCLinkKey & 0xff
   \   000031   75....       MOV       ?V1,#(defaultTCLinkKey >> 8) & 0xff
   \   000034   75..80       MOV       ?V2,#-0x80
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003C   7C10         MOV       R4,#0x10
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   740B         MOV       A,#0xb
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   AA82         MOV       R2,DPL
   \   000047   AB83         MOV       R3,DPH
   \   000049   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004C   7403         MOV       A,#0x3
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   2674              }
   2675          
   2676              // If the item doesn't exist in NV memory, create and initialize
   2677              // it with the default value passed in, either defaultTCLK or 0
   2678              rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
   2679                                         sizeof(APSME_TCLinkKey_t), &tcLinkKey);
   2680          
   2681              if (rtrn == SUCCESS)
   \                     ??APSME_TCLinkKeyInit_0:
   \   000051                ; Setup parameters for call to function osal_nv_item_init
   \   000051   A8..         MOV       R0,?XSP + 0
   \   000053   A9..         MOV       R1,?XSP + 1
   \   000055   88..         MOV       ?V0,R0
   \   000057   89..         MOV       ?V1,R1
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   7C20         MOV       R4,#0x20
   \   000060   7D00         MOV       R5,#0x0
   \   000062   7A01         MOV       R2,#0x1
   \   000064   7B01         MOV       R3,#0x1
   \   000066   12....       LCALL     ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   E9           MOV       A,R1
   \   00006D   7079         JNZ       ??APSME_TCLinkKeyInit_1
   2682              {
   2683                // set the Frame counters to 0 to existing keys in NV
   2684                osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   2685                               sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   00006F                ; Setup parameters for call to function osal_nv_read
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   75..20       MOV       ?V0,#0x20
   \   000077   75..00       MOV       ?V1,#0x0
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007F   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   2686          
   2687          #if defined ( NV_RESTORE )
   2688                if (setDefault == TRUE)
   \   000085   7401         MOV       A,#0x1
   \   000087   6E           XRL       A,R6
   \   000088   700A         JNZ       ??APSME_TCLinkKeyInit_2
   2689                {
   2690                  // clear the value stored in NV
   2691                  tcLinkKey.txFrmCntr = 0;
   \   00008A   7418         MOV       A,#0x18
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   2692                }
   \                     ??CrossCallReturnLabel_189:
   \   000092   8012         SJMP      ??APSME_TCLinkKeyInit_3
   2693                else
   2694                {
   2695                  // increase the value stored in NV
   2696                  tcLinkKey.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
   \                     ??APSME_TCLinkKeyInit_2:
   \   000094   90....       MOV       DPTR,#__Constant_b
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?L_MOV_X
   \   00009C   7418         MOV       A,#0x18
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?L_ADD_TO_X
   2697                }
   2698          #else
   2699                // Clear the counters if NV_RESTORE is not enabled and this NV item
   2700                // already existed in the NV memory
   2701                tcLinkKey.txFrmCntr = 0;
   2702                tcLinkKey.rxFrmCntr = 0;
   2703          #endif  // NV_RESTORE
   2704          
   2705                osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   2706                                sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \                     ??APSME_TCLinkKeyInit_3:
   \   0000A6                ; Setup parameters for call to function osal_nv_write
   \   0000A6   A8..         MOV       R0,?XSP + 0
   \   0000A8   A9..         MOV       R1,?XSP + 1
   \   0000AA   88..         MOV       ?V0,R0
   \   0000AC   89..         MOV       ?V1,R1
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   75..20       MOV       ?V0,#0x20
   \   0000B6   75..00       MOV       ?V1,#0x0
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   7C00         MOV       R4,#0x0
   \   0000C0   7D00         MOV       R5,#0x0
   \   0000C2   7A01         MOV       R2,#0x1
   \   0000C4   7B01         MOV       R3,#0x1
   \   0000C6   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000C9   12....       LCALL     ?DEALLOC_XSTACK8
   2707          
   2708                // set initial values for counters in RAM
   2709                TCLinkKeyFrmCntr[i].txFrmCntr = tcLinkKey.txFrmCntr;
   \   0000CC   7418         MOV       A,#0x18
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL     ?XLOAD_R0123
   \   0000D4   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   0000D7   12....       LCALL     ?XSTORE_R0123
   2710                TCLinkKeyFrmCntr[i].rxFrmCntr = tcLinkKey.rxFrmCntr;
   \   0000DA   741C         MOV       A,#0x1c
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL     ?XLOAD_R0123
   \   0000E2   90....       MOV       DPTR,#TCLinkKeyFrmCntr + 4
   \   0000E5   12....       LCALL     ?XSTORE_R0123
   2711              }
   2712            }
   2713          
   2714            // clear copy of key in RAM
   2715            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyInit_1:
   \   0000E8                ; Setup parameters for call to function osal_memset
   \   0000E8   7C20         MOV       R4,#0x20
   \   0000EA   7D00         MOV       R5,#0x0
   \   0000EC   7900         MOV       R1,#0x0
   \   0000EE   AA..         MOV       R2,?XSP + 0
   \   0000F0   AB..         MOV       R3,?XSP + 1
   \   0000F2   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2716          
   2717          }
   \   0000F5   7420         MOV       A,#0x20
   \   0000F7   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A01         MOV       R2,#0x1
   \   000006   7B01         MOV       R3,#0x1
   \   000008                REQUIRE ??Subroutine88_0
   \   000008                ; // Fall through to label ??Subroutine88_0
   2718          
   2719          /******************************************************************************
   2720           * @fn          APSME_TCLinkKeySync
   2721           *
   2722           * @brief       Sync Trust Center LINK key data.
   2723           *
   2724           * @param       srcAddr - [in] srcAddr
   2725           * @param       si      - [in, out] SSP_Info_t
   2726           *
   2727           * @return      ZStatus_t
   2728           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2729          ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeySync:
   2730          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV       A,#-0x20
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   2731            uint8 i, selectedId = ZDSECMGR_TC_DEVICE_MAX;
   2732            ZStatus_t status = ZSecNoKey;
   \   000012   75..A1       MOV       ?V2,#-0x5f
   2733            APSME_TCLinkKey_t tcLinkKey;
   2734            uint32 *tclkRxFrmCntr;
   2735            uint16 originatorAddr = APSME_TRUSTCENTER_NWKADDR;
   \   000015   75..00       MOV       ?V4,#0x0
   \   000018   75..00       MOV       ?V5,#0x0
   2736          
   2737            // Look up the IEEE address of the trust center if it's available
   2738            if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
   \   00001B   EC           MOV       A,R4
   \   00001C   2406         ADD       A,#0x6
   \   00001E   FE           MOV       R6,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V1
   \   000022   FF           MOV       R7,A
   \   000023                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00002A   E9           MOV       A,R1
   \   00002B   700D         JNZ       ??APSME_TCLinkKeySync_0
   2739            {
   2740              APSME_LookupExtAddr( srcAddr, si->extAddr );
   \   00002D                ; Setup parameters for call to function APSME_LookupExtAddr
   \   00002D   EE           MOV       A,R6
   \   00002E   FC           MOV       R4,A
   \   00002F   EF           MOV       A,R7
   \   000030   FD           MOV       R5,A
   \   000031   AA..         MOV       R2,?V6
   \   000033   AB..         MOV       R3,?V7
   \   000035   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000038   8018         SJMP      ??APSME_TCLinkKeySync_1
   2741            }
   2742            else if ( osal_ExtAddrEqual( si->extAddr, _NIB.nwkCoordExtAddress ) )
   \                     ??APSME_TCLinkKeySync_0:
   \   00003A                ; Setup parameters for call to function sAddrExtCmp
   \   00003A   7C..         MOV       R4,#(_NIB + 25) & 0xff
   \   00003C   7D..         MOV       R5,#((_NIB + 25) >> 8) & 0xff
   \   00003E   EE           MOV       A,R6
   \   00003F   FA           MOV       R2,A
   \   000040   EF           MOV       A,R7
   \   000041   FB           MOV       R3,A
   \   000042   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000045   E9           MOV       A,R1
   \   000046   600A         JZ        ??APSME_TCLinkKeySync_1
   2743            {
   2744              originatorAddr = _NIB.nwkCoordAddress;
   \   000048   90....       MOV       DPTR,#_NIB + 23
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F5..         MOV       ?V4,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F5..         MOV       ?V5,A
   2745              // in case originated not from our parent, use the default TC address
   2746            }
   2747          
   2748            // Look up the TC link key associated with the device
   2749            // or the default TC link key (extAddr is all FFs), whichever is found
   2750            for ( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   2751            {
   2752              // Read entry i of the TC link key table from NV
   2753              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   2754                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \                     ??APSME_TCLinkKeySync_1:
   \   000052                ; Setup parameters for call to function osal_nv_read
   \   000052   A8..         MOV       R0,?XSP + 0
   \   000054   A9..         MOV       R1,?XSP + 1
   \   000056   88..         MOV       ?V6,R0
   \   000058   89..         MOV       ?V7,R1
   \   00005A   78..         MOV       R0,#?V6
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   75..20       MOV       ?V6,#0x20
   \   000062   75..00       MOV       ?V7,#0x0
   \   000065   78..         MOV       R0,#?V6
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   2755          
   2756              // prefer exact match over default
   2757              if ( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
   \   000070                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   000070   AC..         MOV       R4,?XSP + 0
   \   000072   AD..         MOV       R5,?XSP + 1
   \   000074   EE           MOV       A,R6
   \   000075   FA           MOV       R2,A
   \   000076   EF           MOV       A,R7
   \   000077   FB           MOV       R3,A
   \   000078   12....       LCALL     `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   00007B   E9           MOV       A,R1
   \   00007C   7020         JNZ       ??APSME_TCLinkKeySync_2
   2758              {
   2759                selectedId = i;
   2760                // break from the loop
   2761                break;
   2762              }
   2763              else if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
   \   00007E                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   00007E   AA..         MOV       R2,?XSP + 0
   \   000080   AB..         MOV       R3,?XSP + 1
   \   000082   12....       LCALL     `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   000085   E9           MOV       A,R1
   \   000086   6065         JZ        ??APSME_TCLinkKeySync_3
   2764              {
   2765                if ( ( originatorAddr != APSME_TRUSTCENTER_NWKADDR ) && ( si->keyID == SEC_KEYID_TRANSPORT )
   2766                     && (i == 0) && ( zgUseDefaultTCLK == TRUE ) )
   \   000088   E5..         MOV       A,?V4
   \   00008A   45..         ORL       A,?V5
   \   00008C   6010         JZ        ??APSME_TCLinkKeySync_2
   \   00008E   12....       LCALL     ?Subroutine51 & 0xFFFF
   2767                {
   2768                  //if a Key is received directly from an unusual TC,
   2769                  // don't use the first element of the table initialized with the default TCLK
   2770                  continue;
   2771                }
   2772                if ( selectedId == ZDSECMGR_TC_DEVICE_MAX )
   2773                {
   2774                  selectedId = i;
   2775                }
   2776              }
   2777            }
   \                     ??CrossCallReturnLabel_69:
   \   000091   E0           MOVX      A,@DPTR
   \   000092   6402         XRL       A,#0x2
   \   000094   7008         JNZ       ??APSME_TCLinkKeySync_2
   \   000096   90....       MOV       DPTR,#zgUseDefaultTCLK
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   6401         XRL       A,#0x1
   \   00009C   604F         JZ        ??APSME_TCLinkKeySync_3
   2778          
   2779            if ( selectedId < ZDSECMGR_TC_DEVICE_MAX )
   2780            {
   2781               // Only for UNIQUE keys, verify that the incoming frame counter is valid
   2782              if ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY )
   \                     ??APSME_TCLinkKeySync_2:
   \   00009E   E5..         MOV       A,?V0
   \   0000A0   240F         ADD       A,#0xf
   \   0000A2   F8           MOV       R0,A
   \   0000A3   E4           CLR       A
   \   0000A4   35..         ADDC      A,?V1
   \   0000A6   F9           MOV       R1,A
   \   0000A7   E8           MOV       A,R0
   \   0000A8   FA           MOV       R2,A
   \   0000A9   90....       MOV       DPTR,#zgApsLinkKeyType
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   7032         JNZ       ??APSME_TCLinkKeySync_4
   2783              {
   2784                tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
   2785          
   2786                if ( si->frmCntr >= *tclkRxFrmCntr )
   \   0000AF   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000B2   78..         MOV       R0,#?V0
   \   0000B4   12....       LCALL     ?L_MOV_X
   \   0000B7   90....       MOV       DPTR,#TCLinkKeyFrmCntr + 4
   \   0000BA   78..         MOV       R0,#?V0
   \   0000BC   12....       LCALL     ?UL_GE_X
   \   0000BF   501B         JNC       ??APSME_TCLinkKeySync_5
   2787                {
   2788                  // set the keyNvId to use
   2789                  si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
   \   0000C1   8A82         MOV       DPL,R2
   \   0000C3   8983         MOV       DPH,R1
   \   0000C5   7401         MOV       A,#0x1
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   A3           INC       DPTR
   \   0000C9   F0           MOVX      @DPTR,A
   2790          
   2791                  // update the rx frame counter
   2792                  *tclkRxFrmCntr = si->frmCntr + 1;
   \   0000CA   90....       MOV       DPTR,#__Constant_1
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?L_ADD_X
   \   0000D2   90....       MOV       DPTR,#TCLinkKeyFrmCntr + 4
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?L_MOV_TO_X
   2793          
   2794                  status = ZSuccess;
   \   0000DA   800E         SJMP      ??APSME_TCLinkKeySync_6
   2795                }
   2796                else
   2797                {
   2798                  status = ZSecOldFrmCount;
   \                     ??APSME_TCLinkKeySync_5:
   \   0000DC   75..A2       MOV       ?V2,#-0x5e
   \   0000DF   800C         SJMP      ??APSME_TCLinkKeySync_3
   2799                }
   2800              }
   2801              else
   2802              {
   2803                // set the keyNvId to use
   2804                si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
   \                     ??APSME_TCLinkKeySync_4:
   \   0000E1   8882         MOV       DPL,R0
   \   0000E3   8983         MOV       DPH,R1
   \   0000E5   7401         MOV       A,#0x1
   \   0000E7   F0           MOVX      @DPTR,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   F0           MOVX      @DPTR,A
   2805          
   2806                status = ZSuccess;
   \                     ??APSME_TCLinkKeySync_6:
   \   0000EA   75..00       MOV       ?V2,#0x0
   2807              }
   2808            }
   2809          
   2810            // clear copy of key in RAM
   2811            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeySync_3:
   \   0000ED                ; Setup parameters for call to function osal_memset
   \   0000ED   7C20         MOV       R4,#0x20
   \   0000EF   7D00         MOV       R5,#0x0
   \   0000F1   7900         MOV       R1,#0x0
   \   0000F3   AA..         MOV       R2,?XSP + 0
   \   0000F5   AB..         MOV       R3,?XSP + 1
   \   0000F7   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2812          
   2813            return status;
   \   0000FA   A9..         MOV       R1,?V2
   \   0000FC   7420         MOV       A,#0x20
   \   0000FE                REQUIRE ?Subroutine1
   \   0000FE                ; // Fall through to label ?Subroutine1
   2814          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E5..         MOV       A,?V0
   \   000002   2412         ADD       A,#0x12
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E5..         MOV       A,?V0
   \   000002   240E         ADD       A,#0xe
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET
   2815          
   2816          /******************************************************************************
   2817           * @fn          APSME_TCLinkKeyLoad
   2818           *
   2819           * @brief       Load Trust Center LINK key data.
   2820           *
   2821           * @param       dstAddr - [in] dstAddr
   2822           * @param       si      - [in, out] SSP_Info_t
   2823           *
   2824           * @return      ZStatus_t
   2825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2826          ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeyLoad:
   2827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 45
   \   000005   74D3         MOV       A,#-0x2d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8C..         MOV       ?V0,R4
   \   00000C   8D..         MOV       ?V1,R5
   2828            uint8 i;
   2829            ZStatus_t status = ZSecNoKey;
   \   00000E   7EA1         MOV       R6,#-0x5f
   2830            APSME_TCLinkKey_t tcLinkKey;
   2831            AddrMgrEntry_t addrEntry;
   2832            uint32 *tclkTxFrmCntr;
   2833            uint8 extAddrFound;
   2834            uint8 defaultTCLKIdx = ZDSECMGR_TC_DEVICE_MAX;
   2835          
   2836            // Look up the ami of the srcAddr if available
   2837            addrEntry.user    = ADDRMGR_USER_DEFAULT;
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   E4           CLR       A
   \   000017   F0           MOVX      @DPTR,A
   2838            addrEntry.nwkAddr = dstAddr;
   \   000018   04           INC       A
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   2839          
   2840            extAddrFound = AddrMgrExtAddrValid( si->extAddr );
   \                     ??CrossCallReturnLabel_140:
   \   00001F   EC           MOV       A,R4
   \   000020   2406         ADD       A,#0x6
   \   000022   F5..         MOV       ?V2,A
   \   000024   E4           CLR       A
   \   000025   35..         ADDC      A,?V1
   \   000027   F5..         MOV       ?V3,A
   \   000029                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000029   AA..         MOV       R2,?V2
   \   00002B   FB           MOV       R3,A
   \   00002C   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00002F   E9           MOV       A,R1
   \   000030   FF           MOV       R7,A
   2841          
   2842            // Look up the TC link key associated with the device
   2843            // or the master TC link key (ami = 0xFFFF), whichever is found
   2844            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   2845            {
   2846              // Read entry i of the TC link key table from NV
   2847              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   2848                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   000031                ; Setup parameters for call to function osal_nv_read
   \   000031   740D         MOV       A,#0xd
   \   000033   12....       LCALL     ?XSTACK_DISP100_8
   \   000036   88..         MOV       ?V4,R0
   \   000038   89..         MOV       ?V5,R1
   \   00003A   78..         MOV       R0,#?V4
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   75..20       MOV       ?V4,#0x20
   \   000042   75..00       MOV       ?V5,#0x0
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   2849          
   2850              if( extAddrFound && AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
   \   000050   EF           MOV       A,R7
   \   000051   600F         JZ        ??APSME_TCLinkKeyLoad_0
   \   000053                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   000053   740D         MOV       A,#0xd
   \   000055   12....       LCALL     ?XSTACK_DISP102_8
   \   000058   AA..         MOV       R2,?V2
   \   00005A   AB..         MOV       R3,?V3
   \   00005C   12....       LCALL     `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   00005F   E9           MOV       A,R1
   \   000060   7012         JNZ       ??APSME_TCLinkKeyLoad_1
   2851              {
   2852                status = ZSuccess;
   2853          
   2854                break; // break from the loop
   2855              }
   2856          
   2857              if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
   \                     ??APSME_TCLinkKeyLoad_0:
   \   000062                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   000062   740D         MOV       A,#0xd
   \   000064   12....       LCALL     ?XSTACK_DISP101_8
   \   000067   12....       LCALL     `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   00006A   E9           MOV       A,R1
   \   00006B   606F         JZ        ??APSME_TCLinkKeyLoad_2
   2858              {
   2859                if ( !extAddrFound && ( !APSME_IsDistributedSecurity() ) )
   \   00006D   EF           MOV       A,R7
   \   00006E   7004         JNZ       ??APSME_TCLinkKeyLoad_1
   \   000070                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000070   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000073   E9           MOV       A,R1
   2860                {
   2861                  status = ZSuccess;
   2862          
   2863                  break; // break from the loop
   2864                }
   2865          
   2866                // Remember the last default TCLK index
   2867                defaultTCLKIdx = i;
   2868              }
   2869            }
   2870          
   2871            if ( (status != ZSuccess) && (defaultTCLKIdx < ZDSECMGR_TC_DEVICE_MAX) )
   2872            {
   2873              // Exact match was not found; use the last default TC Link Key
   2874              i = defaultTCLKIdx;
   2875              status = ZSuccess;
   \                     ??APSME_TCLinkKeyLoad_1:
   \   000074   7E00         MOV       R6,#0x0
   2876            }
   2877          
   2878            if ( status == ZSuccess )
   2879            {
   2880              tclkTxFrmCntr = &TCLinkKeyFrmCntr[i].txFrmCntr;
   2881          
   2882              // set the keyNvId to use
   2883              si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
   \   000076   E5..         MOV       A,?V0
   \   000078   240F         ADD       A,#0xf
   \   00007A   F582         MOV       DPL,A
   \   00007C   E4           CLR       A
   \   00007D   35..         ADDC      A,?V1
   \   00007F   F583         MOV       DPH,A
   \   000081   7401         MOV       A,#0x1
   \   000083   F0           MOVX      @DPTR,A
   \   000084   A3           INC       DPTR
   \   000085   F0           MOVX      @DPTR,A
   2884          
   2885              // update link key related fields
   2886              si->keyID   = SEC_KEYID_LINK;
   \   000086   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000089   E4           CLR       A
   \   00008A   F0           MOVX      @DPTR,A
   2887              si->frmCntr = *tclkTxFrmCntr;
   \   00008B   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   00008E   12....       LCALL     ?XLOAD_R0123
   \   000091   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000094   12....       LCALL     ?XSTORE_R0123
   2888          
   2889              // update outgoing frame counter
   2890              (*tclkTxFrmCntr)++;
   \   000097   90....       MOV       DPTR,#__Constant_1
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?L_MOV_X
   \   00009F   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?L_ADD_TO_X
   2891          
   2892          #if defined ( NV_RESTORE )
   2893              // write periodically to NV
   2894              if ( !(*tclkTxFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
   \   0000A7   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?L_MOV_X
   \   0000AF   90....       MOV       DPTR,#__Constant_a
   \   0000B2   78..         MOV       R0,#?V4
   \   0000B4   12....       LCALL     ?L_MOV_X
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   79..         MOV       R1,#?V4
   \   0000BB   12....       LCALL     ?UL_DIV_MOD
   \   0000BE   E5..         MOV       A,?V4
   \   0000C0   45..         ORL       A,?V5
   \   0000C2   45..         ORL       A,?V6
   \   0000C4   45..         ORL       A,?V7
   \   0000C6   7027         JNZ       ??APSME_TCLinkKeyLoad_3
   2895              {
   2896                // set the flag to write key to NV
   2897                TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
   \   0000C8   90....       MOV       DPTR,#TCLinkKeyFrmCntr + 8
   \   0000CB   7401         MOV       A,#0x1
   \   0000CD   F0           MOVX      @DPTR,A
   2898          
   2899                // Notify the ZDApp that the frame counter has changed.
   2900                osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
   \   0000CE                ; Setup parameters for call to function osal_set_event
   \   0000CE   7A00         MOV       R2,#0x0
   \   0000D0   7B04         MOV       R3,#0x4
   \   0000D2   90....       MOV       DPTR,#ZDAppTaskID
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F9           MOV       R1,A
   \   0000D7   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000DA   8013         SJMP      ??APSME_TCLinkKeyLoad_3
   \                     ??APSME_TCLinkKeyLoad_2:
   \   0000DC                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   2901              }
   2902          #endif
   2903            }
   \   0000DC   AA..         MOV       R2,?XSP + 0
   \   0000DE   AB..         MOV       R3,?XSP + 1
   \   0000E0   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0000E3   E9           MOV       A,R1
   \   0000E4   6401         XRL       A,#0x1
   \   0000E6   7007         JNZ       ??APSME_TCLinkKeyLoad_3
   2904          
   2905            // If no TC link key found, remove the device from the address manager
   2906            if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
   2907            {
   2908              AddrMgrEntryRelease( &addrEntry );
   \   0000E8                ; Setup parameters for call to function AddrMgrEntryRelease
   \   0000E8   AA..         MOV       R2,?XSP + 0
   \   0000EA   AB..         MOV       R3,?XSP + 1
   \   0000EC   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   2909            }
   2910          
   2911              // clear copy of key in RAM
   2912            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyLoad_3:
   \   0000EF                ; Setup parameters for call to function osal_memset
   \   0000EF   7C20         MOV       R4,#0x20
   \   0000F1   7D00         MOV       R5,#0x0
   \   0000F3   7900         MOV       R1,#0x0
   \   0000F5   740D         MOV       A,#0xd
   \   0000F7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FA   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2913          
   2914            return status;
   \   0000FD   EE           MOV       A,R6
   \   0000FE   F9           MOV       R1,A
   \   0000FF   742D         MOV       A,#0x2d
   \   000101   02....       LJMP      ?Subroutine1 & 0xFFFF
   2915          }
   2916          
   2917          /******************************************************************************
   2918           * @fn          APSME_IsDefaultTCLK
   2919           *
   2920           * @brief       Return TRUE or FALSE based on the extended address.  If the
   2921           *              input ext address is all FFs, it means the trust center link
   2922           *              assoiciated with the address is the default trust center link key
   2923           *
   2924           * @param       extAddr - [in] extended address
   2925           *
   2926           * @return      uint8 TRUE/FALSE
   2927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2928          uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
   \                     APSME_IsDefaultTCLK:
   2929          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2930            return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
   \   000004                ; Setup parameters for call to function osal_isbufset
   \   000004   7C08         MOV       R4,#0x8
   \   000006   79FF         MOV       R1,#-0x1
   \   000008   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   00000B   02....       LJMP      ??Subroutine74_0 & 0xFFFF
   2931          }
   2932          
   2933          /******************************************************************************
   2934           * @fn          ZDSecMgrNwkKeyInit
   2935           *
   2936           * @brief       Initialize the NV items for
   2937           *                  ZCD_NV_NWKKEY,
   2938           *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
   2939           *                  ZCD_NV_NWK_ALTERN_KEY_INFO
   2940           *
   2941           * @param       setDefault
   2942           *
   2943           * @return      none
   2944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2945          void ZDSecMgrNwkKeyInit(uint8 setDefault)
   \                     ZDSecMgrNwkKeyInit:
   2946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV       A,#-0x26
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2947            uint8 status;
   2948            nwkKeyDesc nwkKey;
   2949          
   2950            // Initialize NV items for NWK key, this structure contains the frame counter
   2951            // and is only used when NV_RESTORE is enabled
   2952            nwkActiveKeyItems keyItems;
   2953          
   2954            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C15         MOV       R4,#0x15
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   7900         MOV       R1,#0x0
   \   000012   7411         MOV       A,#0x11
   \   000014   12....       LCALL     ?XSTACK_DISP101_8
   \   000017   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2955          
   2956            status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
   2957          
   2958          #if defined ( NV_RESTORE )
   2959            // reset the values of NV items if NV_RESTORE is not enabled
   2960            if ((status == SUCCESS) && (setDefault == TRUE))
   \   00001A                ; Setup parameters for call to function osal_nv_item_init
   \   00001A   7411         MOV       A,#0x11
   \   00001C   12....       LCALL     ?XSTACK_DISP100_8
   \   00001F   88..         MOV       ?V0,R0
   \   000021   89..         MOV       ?V1,R1
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7C15         MOV       R4,#0x15
   \   00002A   7D00         MOV       R5,#0x0
   \   00002C   7A82         MOV       R2,#-0x7e
   \   00002E   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   E9           MOV       A,R1
   \   000035   7021         JNZ       ??ZDSecMgrNwkKeyInit_0
   \   000037   7401         MOV       A,#0x1
   \   000039   6E           XRL       A,R6
   \   00003A   701C         JNZ       ??ZDSecMgrNwkKeyInit_0
   2961            {
   2962              // clear NV data to default values
   2963              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   \   00003C                ; Setup parameters for call to function osal_nv_write
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75..15       MOV       ?V0,#0x15
   \   000044   75..00       MOV       ?V1,#0x0
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7C00         MOV       R4,#0x0
   \   00004E   7D00         MOV       R5,#0x0
   \   000050   7A82         MOV       R2,#-0x7e
   \   000052   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   2964            }
   \                     ??CrossCallReturnLabel_215:
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   2965          #else
   2966            (void)setDefault;   // to eliminate compiler warning
   2967          
   2968            // reset the values of NV items if NV_RESTORE is not enabled
   2969            if (status == SUCCESS)
   2970            {
   2971              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   2972            }
   2973          #endif // defined (NV_RESTORE)
   2974          
   2975            // Initialize NV items for NWK Active and Alternate keys. These items are used
   2976            // all the time, independently of NV_RESTORE being set or not
   2977            osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
   \                     ??ZDSecMgrNwkKeyInit_0:
   \   000058                ; Setup parameters for call to function osal_memset
   \   000058   12....       LCALL     ?Subroutine44 & 0xFFFF
   2978          
   2979            status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
   2980          
   2981          #if defined ( NV_RESTORE )
   2982            // reset the values of NV items if NV_RESTORE is not enabled
   2983            if ((status == SUCCESS) && (setDefault == TRUE))
   \                     ??CrossCallReturnLabel_57:
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   7C11         MOV       R4,#0x11
   \   000060   7D00         MOV       R5,#0x0
   \   000062   7A3A         MOV       R2,#0x3a
   \   000064   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A   E9           MOV       A,R1
   \   00006B   7021         JNZ       ??ZDSecMgrNwkKeyInit_1
   \   00006D   7401         MOV       A,#0x1
   \   00006F   6E           XRL       A,R6
   \   000070   701C         JNZ       ??ZDSecMgrNwkKeyInit_1
   2984            {
   2985              // clear NV data to default values
   2986              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   000072                ; Setup parameters for call to function osal_nv_write
   \   000072   78..         MOV       R0,#?V0
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000077   75..11       MOV       ?V0,#0x11
   \   00007A   75..00       MOV       ?V1,#0x0
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   7C00         MOV       R4,#0x0
   \   000084   7D00         MOV       R5,#0x0
   \   000086   7A3A         MOV       R2,#0x3a
   \   000088   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   2987            }
   \                     ??CrossCallReturnLabel_216:
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   2988          #else
   2989            // reset the values of NV items if NV_RESTORE is not enabled
   2990            if (status == SUCCESS)
   2991            {
   2992              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   2993            }
   2994          #endif // defined (NV_RESTORE)
   2995          
   2996            status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
   2997          
   2998          #if defined ( NV_RESTORE )
   2999            // reset the values of NV items if NV_RESTORE is not enabled
   3000            if ((status == SUCCESS) && (setDefault == TRUE))
   \                     ??ZDSecMgrNwkKeyInit_1:
   \   00008E                ; Setup parameters for call to function osal_nv_item_init
   \   00008E   A8..         MOV       R0,?XSP + 0
   \   000090   A9..         MOV       R1,?XSP + 1
   \   000092   88..         MOV       ?V0,R0
   \   000094   89..         MOV       ?V1,R1
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   7C11         MOV       R4,#0x11
   \   00009D   7D00         MOV       R5,#0x0
   \   00009F   7A3B         MOV       R2,#0x3b
   \   0000A1   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A7   E9           MOV       A,R1
   \   0000A8   7021         JNZ       ??ZDSecMgrNwkKeyInit_2
   \   0000AA   7401         MOV       A,#0x1
   \   0000AC   6E           XRL       A,R6
   \   0000AD   701C         JNZ       ??ZDSecMgrNwkKeyInit_2
   3001            {
   3002              // clear NV data to default values
   3003              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   0000AF                ; Setup parameters for call to function osal_nv_write
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   75..11       MOV       ?V0,#0x11
   \   0000B7   75..00       MOV       ?V1,#0x0
   \   0000BA   78..         MOV       R0,#?V0
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BF   7C00         MOV       R4,#0x0
   \   0000C1   7D00         MOV       R5,#0x0
   \   0000C3   7A3B         MOV       R2,#0x3b
   \   0000C5   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   3004            }
   \                     ??CrossCallReturnLabel_217:
   \   0000C8   12....       LCALL     ?DEALLOC_XSTACK8
   3005          #else
   3006            // reset the values of NV items if NV_RESTORE is not enabled
   3007            if (status == SUCCESS)
   3008            {
   3009              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3010            }
   3011          #endif // defined (NV_RESTORE)
   3012          
   3013          }
   \                     ??ZDSecMgrNwkKeyInit_2:
   \   0000CB                REQUIRE ?Subroutine9
   \   0000CB                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7426         MOV       A,#0x26
   \   000002   80..         SJMP      ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   7C11         MOV       R4,#0x11
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7900         MOV       R1,#0x0
   \   000006   AA..         MOV       R2,?XSP + 0
   \   000008   AB..         MOV       R3,?XSP + 1
   \   00000A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000D                ; Setup parameters for call to function osal_nv_item_init
   \   00000D                ; Setup parameters for call to function osal_nv_write
   \   00000D   A8..         MOV       R0,?XSP + 0
   \   00000F   A9..         MOV       R1,?XSP + 1
   \   000011   88..         MOV       ?V0,R0
   \   000013   89..         MOV       ?V1,R1
   \   000015   78..         MOV       R0,#?V0
   \   000017   22           RET
   3014          
   3015          /*********************************************************************
   3016           * @fn          ZDSecMgrReadKeyFromNv
   3017           *
   3018           * @brief       Looks for a specific key in NV based on Index value
   3019           *
   3020           * @param   keyNvId - Index of key to look in NV
   3021           *                    valid values are:
   3022           *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
   3023           *                    ZCD_NV_NWK_ALTERN_KEY_INFO
   3024           *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3025           *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3026           *                    ZCD_NV_PRECFGKEY
   3027           *
   3028           * @param  *keyinfo - Data is read into this buffer.
   3029           *
   3030           * @return  SUCCESS if NV data was copied to the keyinfo parameter .
   3031           *          Otherwise, NV_OPER_FAILED for failure.
   3032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3033          ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
   \                     ZDSecMgrReadKeyFromNv:
   3034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3035            if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
   3036                (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
   \   000005   743A         MOV       A,#0x3a
   \   000007   6A           XRL       A,R2
   \   000008   7001         JNZ       ??ZDSecMgrReadKeyFromNv_0
   \   00000A   EB           MOV       A,R3
   \                     ??ZDSecMgrReadKeyFromNv_0:
   \   00000B   6006         JZ        ??ZDSecMgrReadKeyFromNv_1
   \   00000D   743B         MOV       A,#0x3b
   \   00000F   6A           XRL       A,R2
   \   000010   4B           ORL       A,R3
   \   000011   7018         JNZ       ??ZDSecMgrReadKeyFromNv_2
   3037            {
   3038              // get NWK active or alternate key from NV
   3039              return (osal_nv_read(keyNvId,
   3040                                   osal_offsetof(nwkKeyDesc, key),
   3041                                   SEC_KEY_LEN,
   3042                                   keyinfo));
   \                     ??ZDSecMgrReadKeyFromNv_1:
   \   000013                ; Setup parameters for call to function osal_nv_read
   \   000013   8C..         MOV       ?V0,R4
   \   000015   8D..         MOV       ?V1,R5
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   75..10       MOV       ?V0,#0x10
   \   00001F   75..00       MOV       ?V1,#0x0
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C01         MOV       R4,#0x1
   \   000029   8042         SJMP      ??ZDSecMgrReadKeyFromNv_3
   3043            }
   3044            else if ((keyNvId >= ZCD_NV_TCLK_TABLE_START) &&
   3045                     (keyNvId < (ZCD_NV_TCLK_TABLE_START + ZDSECMGR_TC_DEVICE_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_2:
   \   00002B   EA           MOV       A,R2
   \   00002C   24FF         ADD       A,#-0x1
   \   00002E   F8           MOV       R0,A
   \   00002F   EB           MOV       A,R3
   \   000030   34FE         ADDC      A,#-0x2
   \   000032   F9           MOV       R1,A
   \   000033   E8           MOV       A,R0
   \   000034   49           ORL       A,R1
   \   000035   7018         JNZ       ??ZDSecMgrReadKeyFromNv_4
   3046            {
   3047              // Read entry keyNvId of the TC link key table from NV. keyNvId should be
   3048              // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3049              return (osal_nv_read(keyNvId,
   3050                                   osal_offsetof(APSME_TCLinkKey_t, key),
   3051                                   SEC_KEY_LEN,
   3052                                   keyinfo));
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   8C..         MOV       ?V0,R4
   \   000039   8D..         MOV       ?V1,R5
   \   00003B   78..         MOV       R0,#?V0
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000040   75..10       MOV       ?V0,#0x10
   \   000043   75..00       MOV       ?V1,#0x0
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   7C08         MOV       R4,#0x8
   \   00004D   801E         SJMP      ??ZDSecMgrReadKeyFromNv_3
   3053            }
   3054            else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
   3055                     (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_4:
   \   00004F   19           DEC       R1
   \   000050   C3           CLR       C
   \   000051   E8           MOV       A,R0
   \   000052   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000055   501A         JNC       ??ZDSecMgrReadKeyFromNv_5
   3056            {
   3057              // Read entry keyNvId of the APS link key table from NV. keyNvId should be
   3058              // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3059              return (osal_nv_read(keyNvId,
   3060                                   osal_offsetof(APSME_LinkKeyData_t, key),
   3061                                   SEC_KEY_LEN,
   3062                                   keyinfo));
   \   000057                ; Setup parameters for call to function osal_nv_read
   \   000057   8C..         MOV       ?V0,R4
   \   000059   8D..         MOV       ?V1,R5
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   75..10       MOV       ?V0,#0x10
   \   000063   75..00       MOV       ?V1,#0x0
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV       R4,#0x0
   \                     ??ZDSecMgrReadKeyFromNv_3:
   \   00006D   7D00         MOV       R5,#0x0
   \   00006F   8022         SJMP      ??ZDSecMgrReadKeyFromNv_6
   3063            }
   3064            else if (keyNvId == ZCD_NV_PRECFGKEY)
   \                     ??ZDSecMgrReadKeyFromNv_5:
   \   000071   7462         MOV       A,#0x62
   \   000073   6A           XRL       A,R2
   \   000074   4B           ORL       A,R3
   \   000075   7024         JNZ       ??ZDSecMgrReadKeyFromNv_7
   3065            {
   3066              // Read entry keyNvId of the Preconfig key from NV.
   3067              return (osal_nv_read(keyNvId,
   3068                                   0,
   3069                                   SEC_KEY_LEN,
   3070                                   keyinfo));
   \   000077                ; Setup parameters for call to function osal_nv_read
   \   000077   8C..         MOV       ?V0,R4
   \   000079   8D..         MOV       ?V1,R5
   \   00007B   78..         MOV       R0,#?V0
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000080   75..10       MOV       ?V0,#0x10
   \   000083   75..00       MOV       ?V1,#0x0
   \   000086   78..         MOV       R0,#?V0
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008B   7C00         MOV       R4,#0x0
   \   00008D   7D00         MOV       R5,#0x0
   \   00008F   7A62         MOV       R2,#0x62
   \   000091   7B00         MOV       R3,#0x0
   3071            }
   \                     ??ZDSecMgrReadKeyFromNv_6:
   \   000093   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   \   000099   8002         SJMP      ??ZDSecMgrReadKeyFromNv_8
   3072          
   3073            return NV_OPER_FAILED;
   \                     ??ZDSecMgrReadKeyFromNv_7:
   \   00009B   790A         MOV       R1,#0xa
   \                     ??ZDSecMgrReadKeyFromNv_8:
   \   00009D   02....       LJMP      ??Subroutine87_0 & 0xFFFF
   3074          }
   3075          
   3076          /******************************************************************************
   3077           * @fn          ZDSecMgrApsLinkKeyInit
   3078           *
   3079           * @brief       Initialize the NV table for Application link keys
   3080           *
   3081           * @param       none
   3082           *
   3083           * @return      none
   3084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3085          void ZDSecMgrApsLinkKeyInit(void)
   \                     ZDSecMgrApsLinkKeyInit:
   3086          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3087            APSME_LinkKeyData_t pApsLinkKey;
   3088            uint8 i;
   3089            uint8 status;
   3090          
   3091            // Initialize all NV items for APS link key, if not exist already.
   3092            osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C18         MOV       R4,#0x18
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   AA..         MOV       R2,?XSP + 0
   \   000012   AB..         MOV       R3,?XSP + 1
   \   000014   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3093          
   3094            for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000017   7E00         MOV       R6,#0x0
   3095            {
   3096              status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
   3097                                         sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \                     ??ZDSecMgrApsLinkKeyInit_0:
   \   000019                ; Setup parameters for call to function osal_nv_item_init
   \   000019   A8..         MOV       R0,?XSP + 0
   \   00001B   A9..         MOV       R1,?XSP + 1
   \   00001D   88..         MOV       ?V0,R0
   \   00001F   89..         MOV       ?V1,R1
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   7C18         MOV       R4,#0x18
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   EE           MOV       A,R6
   \   00002B   2401         ADD       A,#0x1
   \   00002D   FA           MOV       R2,A
   \   00002E   E4           CLR       A
   \   00002F   3402         ADDC      A,#0x2
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   3098          
   3099          #if defined ( NV_RESTORE )
   3100              (void)status;   // to eliminate compiler warning
   3101          #else
   3102              // reset the values of NV items if NV_RESTORE is not enabled
   3103              if (status == SUCCESS)
   3104              {
   3105                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3106                              sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   3107          
   3108              }
   3109          #endif // defined (NV_RESTORE)
   3110            }
   \   000038   0E           INC       R6
   \   000039   EE           MOV       A,R6
   \   00003A   C3           CLR       C
   \   00003B   9403         SUBB      A,#0x3
   \   00003D   40DA         JC        ??ZDSecMgrApsLinkKeyInit_0
   3111          }
   \   00003F   7418         MOV       A,#0x18
   \   000041   02....       LJMP      ??Subroutine86_0 & 0xFFFF
   3112          
   3113          /******************************************************************************
   3114           * @fn          ZDSecMgrInitNVKeyTables
   3115           *
   3116           * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
   3117           *
   3118           * @param       setDefault - TRUE to set default values
   3119           *
   3120           * @return      none
   3121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3122          void ZDSecMgrInitNVKeyTables(uint8 setDefault)
   \                     ZDSecMgrInitNVKeyTables:
   3123          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3124            ZDSecMgrNwkKeyInit(setDefault);
   \   000007                ; Setup parameters for call to function ZDSecMgrNwkKeyInit
   \   000007   12....       LCALL     `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
   3125            ZDSecMgrApsLinkKeyInit();
   \   00000A                ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
   \   00000A   12....       LCALL     `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
   3126            APSME_TCLinkKeyInit(setDefault);
   \   00000D                ; Setup parameters for call to function APSME_TCLinkKeyInit
   \   00000D   EE           MOV       A,R6
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
   3127          }
   \   000012   02....       LJMP      ??Subroutine81_0 & 0xFFFF
   3128          
   3129          /******************************************************************************
   3130           * @fn          ZDSecMgrSaveApsLinkKey
   3131           *
   3132           * @brief       Save APS Link Key to NV. It will loop through all the keys
   3133           *              to see which one to save.
   3134           *
   3135           * @param       none
   3136           *
   3137           * @return      none
   3138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3139          void ZDSecMgrSaveApsLinkKey(void)
   \                     ZDSecMgrSaveApsLinkKey:
   3140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3141            APSME_LinkKeyData_t *pKeyData = NULL;
   3142            int i;
   3143          
   3144            pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7A18         MOV       R2,#0x18
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   3145          
   3146            if (pKeyData != NULL)
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
   3147            {
   3148              // checks all pending flags to know which one to save
   3149              for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
   \   000017   75..00       MOV       ?V0,#0x0
   \   00001A   75..00       MOV       ?V1,#0x0
   3150              {
   3151                if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \                     ??ZDSecMgrSaveApsLinkKey_1:
   \   00001D   E5..         MOV       A,?V0
   \   00001F   75F009       MOV       B,#0x9
   \   000022   A4           MUL       AB
   \   000023   F8           MOV       R0,A
   \   000024   AAF0         MOV       R2,B
   \   000026   75F009       MOV       B,#0x9
   \   000029   E5..         MOV       A,?V1
   \   00002B   A4           MUL       AB
   \   00002C   2A           ADD       A,R2
   \   00002D   F9           MOV       R1,A
   \   00002E   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   000030   28           ADD       A,R0
   \   000031   F5..         MOV       ?V2,A
   \   000033   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   000035   39           ADDC      A,R1
   \   000036   F5..         MOV       ?V3,A
   \   000038   E5..         MOV       A,?V2
   \   00003A   2408         ADD       A,#0x8
   \   00003C   F5..         MOV       ?V4,A
   \   00003E   E4           CLR       A
   \   00003F   35..         ADDC      A,?V3
   \   000041   F5..         MOV       ?V5,A
   \   000043   85..82       MOV       DPL,?V4
   \   000046   F583         MOV       DPH,A
   \   000048   E0           MOVX      A,@DPTR
   \   000049   6401         XRL       A,#0x1
   \   00004B   6003         JZ        $+5
   \   00004D   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
   \   000050   E5..         MOV       A,?V0
   \   000052   2401         ADD       A,#0x1
   \   000054   FE           MOV       R6,A
   \   000055   E5..         MOV       A,?V1
   \   000057   3402         ADDC      A,#0x2
   \   000059   FF           MOV       R7,A
   \   00005A                ; Setup parameters for call to function osal_nv_read
   \   00005A   78..         MOV       R0,#?V6
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   75..18       MOV       ?V8,#0x18
   \   000062   75..00       MOV       ?V9,#0x0
   \   000065   78..         MOV       R0,#?V8
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   7C00         MOV       R4,#0x0
   \   00006C   7D00         MOV       R5,#0x0
   \   00006E   EE           MOV       A,R6
   \   00006F   FA           MOV       R2,A
   \   000070   EF           MOV       A,R7
   \   000071   FB           MOV       R3,A
   \   000072   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   \   000078   E9           MOV       A,R1
   \   000079   7058         JNZ       ??ZDSecMgrSaveApsLinkKey_2
   3152                {
   3153                  // retrieve key from NV
   3154                  if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3155                                   sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
   3156                  {
   3157                    pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
   \   00007B   85..82       MOV       DPL,?V2
   \   00007E   85..83       MOV       DPH,?V3
   \   000081   12....       LCALL     ?XLOAD_R0123
   \   000084   E5..         MOV       A,?V6
   \   000086   2410         ADD       A,#0x10
   \   000088   F582         MOV       DPL,A
   \   00008A   E4           CLR       A
   \   00008B   35..         ADDC      A,?V7
   \   00008D   F583         MOV       DPH,A
   \   00008F   12....       LCALL     ?XSTORE_R0123
   3158                    pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
   \   000092   85..82       MOV       DPL,?V2
   \   000095   85..83       MOV       DPH,?V3
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   12....       LCALL     ?XLOAD_R0123
   \   00009F   E5..         MOV       A,?V6
   \   0000A1   2414         ADD       A,#0x14
   \   0000A3   F582         MOV       DPL,A
   \   0000A5   E4           CLR       A
   \   0000A6   35..         ADDC      A,?V7
   \   0000A8   F583         MOV       DPH,A
   \   0000AA   12....       LCALL     ?XSTORE_R0123
   3159          
   3160                    // Write the APS link key back to the NV
   3161                    osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3162                                  sizeof(APSME_LinkKeyData_t), pKeyData);
   \   0000AD                ; Setup parameters for call to function osal_nv_write
   \   0000AD   78..         MOV       R0,#?V6
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   75..18       MOV       ?V2,#0x18
   \   0000B5   75..00       MOV       ?V3,#0x0
   \   0000B8   78..         MOV       R0,#?V2
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   7C00         MOV       R4,#0x0
   \   0000BF   7D00         MOV       R5,#0x0
   \   0000C1   EE           MOV       A,R6
   \   0000C2   FA           MOV       R2,A
   \   0000C3   EF           MOV       A,R7
   \   0000C4   FB           MOV       R3,A
   \   0000C5   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   0000C8   12....       LCALL     ?DEALLOC_XSTACK8
   3163          
   3164                    // clear the pending write flag
   3165                    ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   0000CB   85..82       MOV       DPL,?V4
   \   0000CE   85..83       MOV       DPH,?V5
   \   0000D1   E4           CLR       A
   \   0000D2   F0           MOVX      @DPTR,A
   3166                  }
   3167                }
   3168              }
   \                     ??ZDSecMgrSaveApsLinkKey_2:
   \   0000D3   05..         INC       ?V0
   \   0000D5   E5..         MOV       A,?V0
   \   0000D7   7002         JNZ       ??ZDSecMgrSaveApsLinkKey_3
   \   0000D9   05..         INC       ?V1
   \                     ??ZDSecMgrSaveApsLinkKey_3:
   \   0000DB   C3           CLR       C
   \   0000DC   9403         SUBB      A,#0x3
   \   0000DE   E5..         MOV       A,?V1
   \   0000E0   9400         SUBB      A,#0x0
   \   0000E2   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000E4   65D0         XRL       A,PSW
   \   0000E6   33           RLC       A
   \   0000E7   5003         JNC       $+5
   \   0000E9   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
   3169          
   3170              // clear copy of key in RAM
   3171              osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   0000EC                ; Setup parameters for call to function osal_memset
   \   0000EC   7C18         MOV       R4,#0x18
   \   0000EE   7D00         MOV       R5,#0x0
   \   0000F0   7900         MOV       R1,#0x0
   \   0000F2   AA..         MOV       R2,?V6
   \   0000F4   AB..         MOV       R3,?V7
   \   0000F6   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3172          
   3173              osal_mem_free(pKeyData);
   \   0000F9                ; Setup parameters for call to function osal_mem_free
   \   0000F9   AA..         MOV       R2,?V6
   \   0000FB   AB..         MOV       R3,?V7
   \   0000FD   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3174            }
   3175          }
   \                     ??ZDSecMgrSaveApsLinkKey_0:
   \   000100   02....       LJMP      ?Subroutine6 & 0xFFFF
   3176          
   3177          /******************************************************************************
   3178           * @fn          ZDSecMgrSaveTCLinkKey
   3179           *
   3180           * @brief       Save TC Link Key to NV. It will loop through all the keys
   3181           *              to see which one to save.
   3182           *
   3183           * @param       none
   3184           *
   3185           * @return      none
   3186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3187          void ZDSecMgrSaveTCLinkKey(void)
   \                     ZDSecMgrSaveTCLinkKey:
   3188          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3189            APSME_TCLinkKey_t *pKeyData = NULL;
   3190            uint16 i;
   3191          
   3192            pKeyData = (APSME_TCLinkKey_t *)osal_mem_alloc(sizeof(APSME_TCLinkKey_t));
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7A20         MOV       R2,#0x20
   \   000007   12....       LCALL     ?Subroutine43 & 0xFFFF
   3193          
   3194            if (pKeyData != NULL)
   \                     ??CrossCallReturnLabel_56:
   \   00000A   607A         JZ        ??ZDSecMgrSaveTCLinkKey_0
   3195            {
   3196              for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   3197              {
   3198                if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \   00000C   90....       MOV       DPTR,#TCLinkKeyFrmCntr + 8
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6401         XRL       A,#0x1
   \   000012   705E         JNZ       ??ZDSecMgrSaveTCLinkKey_1
   3199                {
   3200                  if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
   3201                                   sizeof(APSME_TCLinkKey_t), pKeyData) == SUCCESS)
   \   000014                ; Setup parameters for call to function osal_nv_read
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..20       MOV       ?V2,#0x20
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000027   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002A   E9           MOV       A,R1
   \   00002B   7045         JNZ       ??ZDSecMgrSaveTCLinkKey_1
   3202                  {
   3203                    pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   00002D   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   000030   12....       LCALL     ?XLOAD_R0123
   \   000033   E5..         MOV       A,?V0
   \   000035   2418         ADD       A,#0x18
   \   000037   F582         MOV       DPL,A
   \   000039   E4           CLR       A
   \   00003A   35..         ADDC      A,?V1
   \   00003C   F583         MOV       DPH,A
   \   00003E   12....       LCALL     ?XSTORE_R0123
   3204                    pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
   \   000041   90....       MOV       DPTR,#TCLinkKeyFrmCntr + 4
   \   000044   12....       LCALL     ?XLOAD_R0123
   \   000047   E5..         MOV       A,?V0
   \   000049   241C         ADD       A,#0x1c
   \   00004B   F582         MOV       DPL,A
   \   00004D   E4           CLR       A
   \   00004E   35..         ADDC      A,?V1
   \   000050   F583         MOV       DPH,A
   \   000052   12....       LCALL     ?XSTORE_R0123
   3205          
   3206                    // Write the TC link key back to the NV
   3207                    osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
   3208                                  sizeof(APSME_TCLinkKey_t), pKeyData);
   \   000055                ; Setup parameters for call to function osal_nv_write
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   78..         MOV       R0,#?V2
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   7C00         MOV       R4,#0x0
   \   000061   7D00         MOV       R5,#0x0
   \   000063   7A01         MOV       R2,#0x1
   \   000065   7B01         MOV       R3,#0x1
   \   000067   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   3209          
   3210                    // clear the pending write flag
   3211                    TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   00006D   90....       MOV       DPTR,#TCLinkKeyFrmCntr + 8
   \   000070   E4           CLR       A
   \   000071   F0           MOVX      @DPTR,A
   3212                  }
   3213                }
   3214              }
   3215                // clear copy of key in RAM
   3216              osal_memset( pKeyData, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??ZDSecMgrSaveTCLinkKey_1:
   \   000072                ; Setup parameters for call to function osal_memset
   \   000072   7C20         MOV       R4,#0x20
   \   000074   7D00         MOV       R5,#0x0
   \   000076   7900         MOV       R1,#0x0
   \   000078   AA..         MOV       R2,?V0
   \   00007A   AB..         MOV       R3,?V1
   \   00007C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3217          
   3218              osal_mem_free(pKeyData);
   \   00007F                ; Setup parameters for call to function osal_mem_free
   \   00007F   AA..         MOV       R2,?V0
   \   000081   AB..         MOV       R3,?V1
   \   000083   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3219            }
   3220          }
   \                     ??ZDSecMgrSaveTCLinkKey_0:
   \   000086   02....       LJMP      ??Subroutine82_0 & 0xFFFF
   3221          
   3222          /******************************************************************************
   3223           * @fn          ZDSecMgrUpdateTCAddress
   3224           *
   3225           * @brief       Update Trust Center address and save to NV.
   3226           *
   3227           * @param       extAddr - [in] extended address or NULL if no TC protected
   3228           *
   3229           * @return      none
   3230           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3231          void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
   \                     ZDSecMgrUpdateTCAddress:
   3232          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3233            uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   3234            APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   000016   EA           MOV       A,R2
   \   000017   4B           ORL       A,R3
   \   000018   700C         JNZ       ??ZDSecMgrUpdateTCAddress_0
   \   00001A   A8..         MOV       R0,?XSP + 0
   \   00001C   A9..         MOV       R1,?XSP + 1
   \   00001E   88..         MOV       ?V0,R0
   \   000020   89..         MOV       ?V1,R1
   \   000022   AA..         MOV       R2,?V0
   \   000024   AB..         MOV       R3,?V1
   \                     ??ZDSecMgrUpdateTCAddress_0:
   \   000026                ; Setup parameters for call to function APSME_SetRequest
   \   000026   EA           MOV       A,R2
   \   000027   FC           MOV       R4,A
   \   000028   EB           MOV       A,R3
   \   000029   FD           MOV       R5,A
   \   00002A   7A00         MOV       R2,#0x0
   \   00002C   7B00         MOV       R3,#0x0
   \   00002E   79AB         MOV       R1,#-0x55
   \   000030   12....       LCALL     `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
   3235          #if defined ( NV_RESTORE )
   3236            osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \   000033                ; Setup parameters for call to function osal_nv_write
   \   000033   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   000036   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   75..08       MOV       ?V0,#0x8
   \   000041   75..00       MOV       ?V1,#0x0
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   7C00         MOV       R4,#0x0
   \   00004B   7D00         MOV       R5,#0x0
   \   00004D   7A71         MOV       R2,#0x71
   \   00004F   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   3237          #endif
   3238          }
   \   000055   02....       LJMP      ?Subroutine4 & 0xFFFF
   3239          
   3240          #if defined ( ZBA_FALLBACK_NWKKEY )
   3241          /******************************************************************************
   3242           * @fn          ZDSecMgrFallbackNwkKey
   3243           *
   3244           * @brief       Use the ZBA fallback network key.
   3245           *
   3246           * @param       none
   3247           *
   3248           * @return      none
   3249           */
   3250          void ZDSecMgrFallbackNwkKey( void )
   3251          {
   3252            if ( !_NIB.nwkKeyLoaded )
   3253            {
   3254              uint8 fallbackKey[SEC_KEY_LEN];
   3255          
   3256              ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
   3257              SSP_UpdateNwkKey( fallbackKey, 0);
   3258              SSP_SwitchNwkKey( 0 );
   3259          
   3260              // clear local copy of key
   3261              osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
   3262          
   3263              // handle next step in authentication process
   3264              ZDSecMgrAuthNwkKey();
   3265            }
   3266          }
   3267          #endif // defined ( ZBA_FALLBACK_NWKKEY )
   3268          
   3269          #if defined ( NV_RESTORE )
   3270          /******************************************************************************
   3271           * @fn          ZDSecMgrClearNVKeyValues
   3272           *
   3273           * @brief       If NV_RESTORE is enabled and the status of the network needs
   3274           *              default values this fuction clears ZCD_NV_NWKKEY,
   3275           *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
   3276           *
   3277           * @param       none
   3278           *
   3279           * @return      none
   3280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3281          void ZDSecMgrClearNVKeyValues(void)
   \                     ZDSecMgrClearNVKeyValues:
   3282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV       A,#-0x26
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3283            nwkActiveKeyItems keyItems;
   3284            nwkKeyDesc nwkKey;
   3285          
   3286            osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   7411         MOV       A,#0x11
   \   000012   12....       LCALL     ?XSTACK_DISP101_8
   \   000015   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3287          
   3288            osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
   \   000018                ; Setup parameters for call to function osal_nv_write
   \   000018   7411         MOV       A,#0x11
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   88..         MOV       ?V0,R0
   \   00001F   89..         MOV       ?V1,R1
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   75..15       MOV       ?V0,#0x15
   \   000029   75..00       MOV       ?V1,#0x0
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7C00         MOV       R4,#0x0
   \   000033   7D00         MOV       R5,#0x0
   \   000035   7A82         MOV       R2,#-0x7e
   \   000037   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   3289          
   3290            // Initialize NV items for NWK Active and Alternate keys.
   3291            osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
   \   00003D                ; Setup parameters for call to function osal_memset
   \   00003D   12....       LCALL     ?Subroutine44 & 0xFFFF
   3292          
   3293            osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \                     ??CrossCallReturnLabel_58:
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   75..11       MOV       ?V0,#0x11
   \   000046   75..00       MOV       ?V1,#0x0
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7C00         MOV       R4,#0x0
   \   000050   7D00         MOV       R5,#0x0
   \   000052   7A3A         MOV       R2,#0x3a
   \   000054   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   3294          
   3295            osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \   00005A                ; Setup parameters for call to function osal_nv_write
   \   00005A   A8..         MOV       R0,?XSP + 0
   \   00005C   A9..         MOV       R1,?XSP + 1
   \   00005E   88..         MOV       ?V0,R0
   \   000060   89..         MOV       ?V1,R1
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   75..11       MOV       ?V0,#0x11
   \   00006A   75..00       MOV       ?V1,#0x0
   \   00006D   78..         MOV       R0,#?V0
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000072   7C00         MOV       R4,#0x0
   \   000074   7D00         MOV       R5,#0x0
   \   000076   7A3B         MOV       R2,#0x3b
   \   000078   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   3296          }
   \   00007E   02....       LJMP      ?Subroutine9 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrAppKeyType>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e9:
   \   000000   E9030000     DD 1001

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_b:
   \   000000   0B000000     DD 11

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
   3297          #endif // defined ( NV_RESTORE )
   3298          
   3299          /******************************************************************************
   3300          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     61   APSME_IsDefaultTCLK
        2      0   -> osal_isbufset
      0     37   APSME_IsLinkKeyValid
        0     33   -> APSME_LinkKeyNVIdGet
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
        0     36   -> osal_memcmp
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      0     10   APSME_KeyFwdToChild
        0     10   -> AssocGetWithExt
        0     10   -> ZDSecMgrAssocDeviceAuth
      0     44   APSME_LinkKeyNVIdGet
        0     11   -> ZDSecMgrEntryLookupExt
      0     55   APSME_LinkKeySet
        0     21   -> ZDSecMgrEntryLookupExtGetIndex
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
        0     19   -> osal_memset
        0     23   -> osal_nv_read
        0     23   -> osal_nv_write
      0     57   APSME_TCLinkKeyInit
        0     47   -> osal_memcpy
        0     44   -> osal_memset
        0     46   -> osal_nv_item_init
        0     48   -> osal_nv_read
        0     48   -> osal_nv_write
      0     65   APSME_TCLinkKeyLoad
        0     61   -> APSME_IsDefaultTCLK
        0     61   -> APSME_IsDistributedSecurity
        0     61   -> AddrMgrEntryLookupNwk
        0     61   -> AddrMgrEntryRelease
        0     61   -> AddrMgrExtAddrEqual
        0     61   -> AddrMgrExtAddrValid
        0     61   -> osal_memset
        0     65   -> osal_nv_read
        0     61   -> osal_set_event
      0     52   APSME_TCLinkKeySync
        0     48   -> APSME_IsDefaultTCLK
        0     48   -> APSME_LookupExtAddr
        0     48   -> AddrMgrExtAddrEqual
        0     48   -> AddrMgrExtAddrValid
        0     48   -> osal_memset
        0     52   -> osal_nv_read
        0     48   -> sAddrExtCmp
      2     10   ZDSecMgrAPSRemove
        2      8   -> ZDSecMgrDeviceRemove
      0     18   ZDSecMgrAddLinkKey
        0     14   -> APSME_LinkKeySet
        0     16   -> ZDSecMgrAddrStore
        0     14   -> ZDSecMgrAuthenticationSet
        0     14   -> ZDSecMgrEntryLookupAMI
        0     14   -> ZDSecMgrEntryNew
        0     14   -> ZDSecMgrWriteNV
      0     57   ZDSecMgrAddrClear
        0     24   -> AddrMgrEntryRelease
        0     24   -> ZDSecMgrExtAddrLookup
      0     56   ZDSecMgrAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      3     59   ZDSecMgrAppKeyGet
        2      0   -> SSP_GetTrueRand
      0     59   ZDSecMgrAppKeyReq
        0     51   -> APSME_LookupExtAddr
        0     51   -> APSME_LookupNwkAddr
        0     51   -> APSME_TransportKeyReq
        0     59   -> ZDSecMgrAppKeyGet
        0     51   -> osal_memset
      0     45   ZDSecMgrApsLinkKeyInit
        0     34   -> osal_memset
        0     36   -> osal_nv_item_init
      2     33   ZDSecMgrAssocDeviceAuth
      2     32   ZDSecMgrAuthNwkKey
        2      0   -> osal_set_event
      0     22   ZDSecMgrAuthenticationCheck
        0     22   -> APSME_GetRequest
        0     22   -> AddrMgrExtAddrLookup
        0     22   -> NLME_GetExtAddr
        0     22   -> ZDSecMgrEntryLookupExt
        0     22   -> ZDSecMgrExtAddrLookup
        0     22   -> sAddrExtCmp
      1     25   ZDSecMgrAuthenticationSet
        0     11   -> ZDSecMgrEntryLookupExt
      0     52   ZDSecMgrClearNVKeyValues
        0     48   -> osal_memset
        0     52   -> osal_nv_write
      2      0   ZDSecMgrConfig
        2      0   -> APSME_SecurityCM_ED
        2      0   -> SSP_Init
      0     42   ZDSecMgrDeviceJoin
        0     30   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrAddrStore
        0     30   -> ZDSecMgrDeviceRemove
        0     30   -> ZDSecMgrDeviceValidate
        0     30   -> ZDSecMgrSendNwkKey
        0     33   -> osal_memcpy
      0      9   ZDSecMgrDeviceJoinDirect
        0      9   -> AssocGetWithShort
        0      9   -> ZDSecMgrAssocDeviceAuth
        0      9   -> ZDSecMgrDeviceJoin
      0     18   ZDSecMgrDeviceJoinFwd
        0     18   -> APSME_UpdateDeviceReq
        0     18   -> AssocGetWithShort
        0     18   -> ZDSecMgrAssocDeviceAuth
      2     33   ZDSecMgrDeviceNew
        2      0   -> ZDSecMgrDeviceJoinFwd
      0     50   ZDSecMgrDeviceRemove
        0     20   -> APSME_RemoveDeviceReq
        0     20   -> AssocGetWithExt
        0     20   -> NLME_GetShortAddr
        0     20   -> NLME_LeaveReq
      0     11   ZDSecMgrDeviceRemoveByExtAddr
        0     11   -> ZDSecMgrEntryFree
        0     11   -> ZDSecMgrEntryLookupExt
      2     30   ZDSecMgrDeviceValidate
        2      0   -> ZDSecMgrDeviceValidateRM
      2      0   ZDSecMgrDeviceValidateRM
      0     35   ZDSecMgrEntryFree
        0     20   -> ZDSecMgrEntryLookupAMIGetIndex
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> osal_memset
        0     24   -> osal_nv_read
        0     24   -> osal_nv_write
      0     18   ZDSecMgrEntryInit
        0      9   -> ZDSecMgrRestoreFromNV
        0      9   -> osal_mem_alloc
      0     22   ZDSecMgrEntryLookup
        0     22   -> AddrMgrEntryLookupNwk
      0     41   ZDSecMgrEntryLookupAMI
      0     29   ZDSecMgrEntryLookupAMIGetIndex
      0     33   ZDSecMgrEntryLookupExt
        0     11   -> ZDSecMgrEntryLookupAMI
        0     11   -> ZDSecMgrExtAddrLookup
      0     32   ZDSecMgrEntryLookupExtGetIndex
        0     11   -> ZDSecMgrExtAddrLookup
      0     41   ZDSecMgrEntryNew
      0     54   ZDSecMgrExtAddrLookup
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrExtAddrSet
      0     24   ZDSecMgrExtAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0      9   ZDSecMgrInit
        0      9   -> APSME_SecurityCM_ED
        0      9   -> SSP_Init
        0      9   -> ZDSecMgrEntryInit
      0     16   ZDSecMgrInitNV
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_write
      0      9   ZDSecMgrInitNVKeyTables
        0      9   -> APSME_TCLinkKeyInit
        0      9   -> ZDSecMgrApsLinkKeyInit
        0      9   -> ZDSecMgrNwkKeyInit
      1     33   ZDSecMgrNewDeviceEvent
        0     33   -> AddrMgrEntryGet
        0     33   -> AssocGetWithShort
        0     33   -> AssocRemove
        0     33   -> NLME_GetShortAddr
        0     33   -> ZDSecMgrAddrClear
        0     33   -> ZDSecMgrAssocDeviceAuth
        0     33   -> ZDSecMgrDeviceNew
      0     61   ZDSecMgrNwkKeyInit
        0     48   -> osal_memset
        0     50   -> osal_nv_item_init
        0     52   -> osal_nv_write
      2      0   ZDSecMgrPermitJoining
      2      0   ZDSecMgrPermitJoiningTimeout
      0     46   ZDSecMgrReadKeyFromNv
        0     14   -> osal_nv_read
      0     17   ZDSecMgrRemoveDeviceInd
        0     17   -> APSME_LookupNwkAddr
        0     17   -> NLME_GetShortAddr
        0     17   -> ZDSecMgrDeviceRemove
      2      4   ZDSecMgrRequestAppKey
        2      4   -> APSME_RequestKeyReq
      2      0   ZDSecMgrRequestKeyInd
        2      0   -> ZDSecMgrAppKeyReq
      0     33   ZDSecMgrRestoreFromNV
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> osal_memset
        0     24   -> osal_nv_read
        0     24   -> osal_nv_write
      0     22   ZDSecMgrSaveApsLinkKey
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> osal_memset
        0     22   -> osal_nv_read
        0     22   -> osal_nv_write
      0     16   ZDSecMgrSaveTCLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      1     80   ZDSecMgrSendNwkKey
        0     46   -> APSME_TransportKeyReq
        0     46   -> NLME_GetShortAddr
        0     50   -> NLME_ReadNwkKeyInfo
        0     46   -> osal_memset
      0     23   ZDSecMgrSetDefaultNV
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     19   -> osal_memset
        0     23   -> osal_nv_write
      0     25   ZDSecMgrSetupPartner
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> AddrMgrExtAddrValid
        0     25   -> ZDP_IEEEAddrReq
        0     25   -> ZDP_NwkAddrReq
      2      0   ZDSecMgrSwitchKeyInd
        2      0   -> SSP_SwitchNwkKey
        2      0   -> ZDApp_NVUpdate
      0     59   ZDSecMgrTCDataLoad
        0     25   -> APSME_IsDistributedSecurity
        0     25   -> AddrMgrEntryLookupExt
        0     27   -> ZDSecMgrAddrStore
        0     25   -> sAddrExtCpy
      0     17   ZDSecMgrTCExtAddrCheck
        0     17   -> APSME_GetRequest
        0     17   -> sAddrExtCmp
      0     34   ZDSecMgrTransportKeyInd
        0     32   -> APSME_LinkKeySet
        0     32   -> SSP_SwitchNwkKey
        0     32   -> SSP_UpdateNwkKey
        0     32   -> ZDP_NwkAddrReq
        0     34   -> ZDSecMgrAddrStore
        0     32   -> ZDSecMgrAuthNwkKey
        0     32   -> ZDSecMgrEntryLookupAMI
        0     32   -> ZDSecMgrEntryNew
        0     32   -> ZDSecMgrExtAddrLookup
        0     32   -> ZDSecMgrReadKeyFromNv
        0     32   -> ZDSecMgrTCDataLoad
        0     32   -> ZDSecMgrUpdateTCAddress
        0     32   -> ZDSecMgrWriteNV
        0     32   -> osal_memset
      2      8   ZDSecMgrUpdateDeviceInd
        2      8   -> ZDSecMgrDeviceJoin
      0     54   ZDSecMgrUpdateTCAddress
        0     18   -> APSME_SetRequest
        0     22   -> osal_nv_write
      0     50   ZDSecMgrWriteNV
        0     18   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       1  ?<Initializer for ZDSecMgrAppKeyType>
       8  ??Subroutine67_0
       6  ??Subroutine68_0
       4  ??Subroutine69_0
       6  ??Subroutine70_0
       4  ??Subroutine71_0
       6  ??Subroutine72_0
       3  ??Subroutine73_0
       7  ??Subroutine74_0
       6  ??Subroutine75_0
       6  ??Subroutine76_0
       6  ??Subroutine77_0
       5  ??Subroutine78_0
       6  ??Subroutine79_0
       3  ??Subroutine80_0
       5  ??Subroutine81_0
       5  ??Subroutine82_0
       2  ??Subroutine83_0
       9  ??Subroutine84_0
       6  ??Subroutine85_0
       3  ??Subroutine86_0
       5  ??Subroutine87_0
       6  ??Subroutine88_0
       2  ??Subroutine89_0
       2  ??Subroutine90_0
       6  ??Subroutine91_0
       2  ?Subroutine0
       8  ?Subroutine1
      12  ?Subroutine10
       5  ?Subroutine11
      15  ?Subroutine12
       3  ?Subroutine13
      21  ?Subroutine14
      13  ?Subroutine15
       9  ?Subroutine16
       6  ?Subroutine17
      11  ?Subroutine18
       6  ?Subroutine19
       2  ?Subroutine2
       6  ?Subroutine20
       9  ?Subroutine21
       4  ?Subroutine22
       6  ?Subroutine23
       7  ?Subroutine24
      17  ?Subroutine25
       4  ?Subroutine26
      12  ?Subroutine27
       4  ?Subroutine28
      10  ?Subroutine29
       3  ?Subroutine3
       4  ?Subroutine30
       2  ?Subroutine31
       8  ?Subroutine32
      14  ?Subroutine33
       9  ?Subroutine34
       6  ?Subroutine35
       7  ?Subroutine36
       6  ?Subroutine37
       4  ?Subroutine38
       9  ?Subroutine39
       2  ?Subroutine4
      29  ?Subroutine40
       1  ?Subroutine41
      14  ?Subroutine42
      12  ?Subroutine43
      24  ?Subroutine44
      21  ?Subroutine45
      27  ?Subroutine46
       4  ?Subroutine47
       8  ?Subroutine48
      10  ?Subroutine49
       8  ?Subroutine5
       6  ?Subroutine50
      12  ?Subroutine51
       2  ?Subroutine52
      12  ?Subroutine53
       4  ?Subroutine54
       6  ?Subroutine55
       6  ?Subroutine56
      10  ?Subroutine57
       6  ?Subroutine58
       8  ?Subroutine59
       5  ?Subroutine6
       5  ?Subroutine60
       4  ?Subroutine61
       9  ?Subroutine62
      30  ?Subroutine63
      11  ?Subroutine64
       6  ?Subroutine65
       9  ?Subroutine66
       5  ?Subroutine7
       5  ?Subroutine8
       4  ?Subroutine9
      14  APSME_IsDefaultTCLK
     143  APSME_IsLinkKeyValid
      57  APSME_KeyFwdToChild
      55  APSME_LinkKeyNVIdGet
     259  APSME_LinkKeySet
     250  APSME_TCLinkKeyInit
     260  APSME_TCLinkKeyLoad
     254  APSME_TCLinkKeySync
      27  ApsLinkKeyFrmCntr
       9  TCLinkKeyFrmCntr
      32  TrustCenterLinkKey
      76  ZDSecMgrAPSRemove
     111  ZDSecMgrAddLinkKey
      68  ZDSecMgrAddrClear
      67  ZDSecMgrAddrStore
      42  ZDSecMgrAppKeyGet
     277  ZDSecMgrAppKeyReq
       1  ZDSecMgrAppKeyType
      68  ZDSecMgrApsLinkKeyInit
      23  ZDSecMgrAssocDeviceAuth
      26  ZDSecMgrAuthNwkKey
     113  ZDSecMgrAuthenticationCheck
      31  ZDSecMgrAuthenticationSet
     129  ZDSecMgrClearNVKeyValues
      12  ZDSecMgrConfig
     240  ZDSecMgrDeviceJoin
      29  ZDSecMgrDeviceJoinDirect
     176  ZDSecMgrDeviceJoinFwd
       9  ZDSecMgrDeviceNew
     237  ZDSecMgrDeviceRemove
      29  ZDSecMgrDeviceRemoveByExtAddr
      24  ZDSecMgrDeviceValidate
      17  ZDSecMgrDeviceValidateRM
       2  ZDSecMgrEntries
     345  ZDSecMgrEntryFree
      73  ZDSecMgrEntryInit
      97  ZDSecMgrEntryLookup
      67  ZDSecMgrEntryLookupAMI
      63  ZDSecMgrEntryLookupAMIGetIndex
      53  ZDSecMgrEntryLookupExt
      88  ZDSecMgrEntryLookupExtGetIndex
     110  ZDSecMgrEntryNew
      72  ZDSecMgrExtAddrLookup
      67  ZDSecMgrExtAddrStore
      17  ZDSecMgrInit
      90  ZDSecMgrInitNV
      21  ZDSecMgrInitNVKeyTables
     215  ZDSecMgrNewDeviceEvent
     203  ZDSecMgrNwkKeyInit
      38  ZDSecMgrPermitJoining
       1  ZDSecMgrPermitJoiningEnabled
       1  ZDSecMgrPermitJoiningTimed
      23  ZDSecMgrPermitJoiningTimeout
     160  ZDSecMgrReadKeyFromNv
      71  ZDSecMgrRemoveDeviceInd
      38  ZDSecMgrRequestAppKey
      30  ZDSecMgrRequestKeyInd
     438  ZDSecMgrRestoreFromNV
     259  ZDSecMgrSaveApsLinkKey
     137  ZDSecMgrSaveTCLinkKey
     269  ZDSecMgrSendNwkKey
     174  ZDSecMgrSetDefaultNV
     119  ZDSecMgrSetupPartner
      23  ZDSecMgrSwitchKeyInd
       1  ZDSecMgrTCAuthenticated
      88  ZDSecMgrTCDataLoad
       8  ZDSecMgrTCExtAddr
      38  ZDSecMgrTCExtAddrCheck
     319  ZDSecMgrTransportKeyInd
     105  ZDSecMgrUpdateDeviceInd
      88  ZDSecMgrUpdateTCAddress
     167  ZDSecMgrWriteNV
       4  __Constant_1
       4  __Constant_3e9
       4  __Constant_a
       4  __Constant_b
     378  -- Other

 
 7 977 bytes in segment BANKED_CODE
   378 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    24 bytes in segment XDATA_ROM_C
    81 bytes in segment XDATA_Z
 
   379 bytes of CODE     memory
     8 bytes of CONST    memory (+ 16 bytes shared)
 7 977 bytes of HUGECODE memory
    82 bytes of XDATA    memory

Errors: none
Warnings: none
